<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sticker Canvas</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: 'Inter', sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 1vh;
            box-sizing: border-box;
            overflow-x: hidden;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        #canvas-container {
            width: 90%;
            height: 500px;
            background-color: #ffffff;
            border: 1px solid #e0e0e0;
            position: relative;
            margin-top: 10px;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            border-radius: 16px;
            touch-action: none;
        }

        .sticker {
            position: absolute;
            height: auto;
            cursor: grab;
            user-select: none;
            transition: transform 0.1s ease-in-out;
            box-sizing: border-box;
            touch-action: none;
        }

        .sticker img {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }

        .sticker:active {
            cursor: grabbing;
            z-index: 100;
        }

        .sticker:focus {
            outline: none;
        }

        .sticker:hover > .delete-btn,
        .sticker:hover > .copy-btn,
        .sticker:hover > .resize-handle {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .sticker.selected > .delete-btn,
        .sticker.selected > .copy-btn,
        .sticker.selected > .resize-handle {
            display: flex;
        }

        .controls {
            margin-top: 10px;
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .bucket-active .sticker {
            border: none !important;
            transition: none !important;
        }

        .bucket-active .sticker .delete-btn,
        .bucket-active .sticker .copy-btn,
        .bucket-active .sticker .resize-handle {
            display: none !important;
        }

        .bucket-active .sticker:active,
        .bucket-active .sticker:hover {
            cursor: crosshair;
        }

        button {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            border: none;
            background: none;
            cursor: pointer;
            color: #333;
            transition: transform 0.2s, color 0.2s;
            outline: none;
            -webkit-tap-highlight-color: transparent;
        }

        button:focus, button:active {
            outline: 0 !important;
            box-shadow: none !important;
        }

        .controls button:hover {
            color: #000;
            transform: scale(1.1);
        }

        button.active {
            border-radius: 50%;
          
            transform: scale(1.05);
        }

        .icon {
            width: 1.4em;
            height: 1.4em;
            stroke: currentColor;
        }

    #sticker-palette-container.disabled {
    pointer-events: none;
    opacity: 0.5; /* or whatever dimming you want */
    }

    #sticker-palette-container {
    width: 100%;
    margin-top: 20px;
    padding: 5px;
    background-color: #f8f8f8;
    border: 1px solid #ddd;
    border-radius: 8px;
    box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);

    display: flex;
    flex-wrap: nowrap;        /* single row */
    overflow-x: auto;         /* horizontal scroll */
    overflow-y: hidden;

    align-items: center;      /* vertical centering */
    justify-content: center;  /* horizontal centering */
    gap: 10px;                /* space between items */
    scrollbar-width: thin;
}

#sticker-palette-container::-webkit-scrollbar {
    height: 8px;
}

#sticker-palette-container::-webkit-scrollbar-thumb {
    background: #bbb; 
    border-radius: 4px;
}

        .palette-sticker {
            width: 60px;
            height: 60px;
            object-fit: contain;
            cursor: pointer;
            border: 2px solid transparent;
            transition: border-color 0.2s, transform 0.2s;
        }

        .palette-sticker:hover {
            transform: scale(1.1);
        }

#overlay-container {
  position: absolute;
  background-color: rgba(255, 255, 255, 0.95);
  border: 1px solid #ccc;
  border-radius: 8px;
  padding: 20px;
  display: none;
  z-index: 200;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  grid-template-columns: repeat(5, 1fr);
  gap: 15px;
  width: 350px;
}
        .overlay-sticker {
            width: 100%;
            height: auto;
            aspect-ratio: 1/1;
            object-fit: contain;
            cursor: grab;
            border: 1px solid transparent;
        }

        .overlay-sticker:hover {
            transform: scale(1.1);
        }

        .copy-btn-icon, .delete-btn-icon {
            width: 100%;
            height: 100%;
            fill: white;
            stroke: white;
        }

        .resize-handle-icon {
            width: 60%;
            height: 60%;
            fill: white;
            stroke: white;
        }

        .delete-btn, .copy-btn, .resize-handle {
            position: absolute;
            width: 20%;
            height: 20%;
            border-radius: 50%;
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            display: none;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 101;
            padding: 0;
            transition: transform 0.2s, background-color 0.2s;
        }

        .delete-btn {
            top: 5%;
            right: 5%;
            background-color: #c2bebeff;
        }

        .copy-btn {
            top: 5%;
            left: 5%;
            background-color: #c2bebeff;
        }

        .resize-handle {
            bottom: 5%;
            right: 5%;
            background-color: #c2bebeff;
            cursor: pointer;
        }

        .resize-handle:active {
            cursor: ne-resize;
        }

        .copy-btn:hover {
            background-color: #6aa84fff;
            transform: scale(1.1);
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }

        .delete-btn:hover {
            background-color: #f26262ff;
            transform: scale(1.1);
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }

        .resize-handle:hover {
            background-color: #4a86e8;
            transform: scale(1.1);
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }

    

     #folder {
    position: absolute;
    bottom: 20px;
    right: 20px;
    width: 80px;
    height: 80px;
    
    border: 2px dotted #ccc;
    border-radius: 12px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: background-color 0.3s, transform 0.3s, border-color 0.3s;
    z-index: 1000;
}

#folder:hover {
    background-color: #d0d0d0;
    transform: scale(1.05);
}

#folder.drag-over {
    background-color: #d0d0d0;
    border-color: #4a86e8;
    transform: scale(1.1);
}

.folder-icon {
    width: 40px;
    height: 40px;
    stroke: #888;
}

#folder-count {
    font-size: 12px;
    color: #555;
    margin-top: 5px;
    font-weight: 500;
}

#folder-overlay {
  display: none;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 80%;
  height: 80%;
  background: white;
  border-radius: 12px;
  padding: 20px;
  overflow-y: auto;
  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
  gap: 12px;
  z-index: 10000;
   border: 1px solid #ccc;
            border-radius: 8px;
}

#folder-overlay .overlay-close {
  position: absolute;
  top: 8px;   /* move it further up */
  right: 8px; /* move it further right */
  z-index: 9999;
  background: #444;
  color: white;
  border: none;
  border-radius: 50%;
  width: 28px;
  height: 28px;
  font-size: 18px;
  line-height: 28px;
  text-align: center;
  cursor: pointer;
}

/* Disable any pointer style on the wrapper */
#folder-overlay .overlay-sticker-wrapper {
  position: relative;
  display: inline-block;
}

#folder-overlay .overlay-sticker {
  transform: none !important;
  box-shadow: none !important;
  border: none !important;
  cursor: default !important;
}


#folder-overlay .overlay-sticker:hover {
  transform: none !important;
  box-shadow: none !important;
  border: none !important;
  cursor: default !important;
}

/* delete button inside wrapper */
#folder-overlay .overlay-sticker-wrapper .delete-sticker-btn {
  position: absolute;
  top: 4px;
  right: 4px;
  background: #c2bebeff;
  color: white;
  border: none;
  border-radius: 50%;
  width: 22px;
  height: 22px;
  font-size: 16px;
  line-height: 20px;
  text-align: center;
  cursor: pointer;
  display: block;
}

#folder-overlay .overlay-sticker-wrapper .delete-sticker-btn:hover {
  background-color: #f26262ff;
}

#folder.full {
  border-color: red;
}

#folder.full .folder-icon {
  filter: hue-rotate(-50deg) saturate(5); /* tint to red */
  /* Or use: color: red; if it's an SVG or font icon */
}

/* Folder icon inside */
#folder.full .folder-icon {
  filter: hue-rotate(-50deg) saturate(5); /* tint to red */
  /* Or use: color: red; if it's an SVG or font icon */
}

/* The count */
#folder.full .folder-count {
  color: red;
  font-weight: bold;
}


@keyframes shake {
  0% { transform: translateX(0); }
  20% { transform: translateX(-5px); }
  40% { transform: translateX(5px); }
  60% { transform: translateX(-5px); }
  80% { transform: translateX(5px); }
  100% { transform: translateX(0); }
}

.overlay-save {
 
  border: none;
  border-radius: 6px;
  font-weight: bold;
  cursor: pointer;
  background: black;
  color: white;
  transition: background 0.2s, color 0.2s, opacity 0.2s;
}

.overlay-save:disabled {
  background: #ccc;   /* grey background */
  color: #666;        /* faded text */
  cursor: not-allowed;
  opacity: 0.7;
}

.controls.disabled button {
  pointer-events: none;
  opacity: 0.4;
}

#email-popup {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) scale(1);
  background: #fff;
  padding: 24px 20px;
  border-radius: 16px;
  box-shadow: 0 8px 30px rgba(0, 0, 0, 0.25);
  z-index: 11000;
  width: 320px;
  text-align: center;
  font-family: "Inter", sans-serif;
  transition: transform 0.2s ease, opacity 0.2s ease;
}

#email-popup.hidden {
  display: none;
  opacity: 0;
  transform: translate(-50%, -50%) scale(0.9);
}

#email-popup h3 {
  margin: 0 0 16px;
  font-size: 1.2rem;
  color: #333;
}

#email-popup input {
  width: 100%;
  padding: 10px 12px;
  margin: 12px 0;
  border: 1px solid #ddd;
  border-radius: 8px;
  font-size: 0.95rem;
  outline: none;
  transition: border-color 0.2s, box-shadow 0.2s;
  box-sizing: border-box; /* ✅ keeps it inside the popup */
}
#email-popup input:focus {
  border-color: #0078ff;
  box-shadow: 0 0 0 2px rgba(0, 120, 255, 0.2);
}

#email-popup .popup-actions {
  display: flex;
  justify-content: space-between;
  margin-top: 14px;
  gap: 10px;
}

#email-popup button {
  flex: 1;
  padding: 10px 0;
  border: none;
  border-radius: 8px;
  font-size: 0.95rem;
  font-weight: 600;
  cursor: pointer;
  transition: background 0.2s, transform 0.1s;
}

#email-popup #cancel-btn {
  background: #f2f2f2;
  color: #333;
}

#email-popup #cancel-btn:hover {
  background: #e0e0e0;
}

#email-popup #send-btn {
  background: #0078ff;
  color: white;
}

#email-popup #send-btn:hover {
  background: #0063cc;
}

#email-popup button:active {
  transform: scale(0.96);
}

#success-popup {
  position: fixed; /* make it consistent with loading & email */
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  padding: 20px;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.25);
  z-index: 11001;
  text-align: center;
}


#success-popup.hidden {
  display: none;
}

.success-box p {
  margin-bottom: 10px;
  font-size: 16px;
}

.popup {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  padding: 20px;
  border-radius: 12px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.2);
  z-index: 2000;
 
}

/* Loading popup */
#loading-popup {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  padding: 20px;
  border-radius: 12px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.2);
  z-index: 11001;
  text-align: center;
}

#loading-popup .popup-content {
  display: flex;
  align-items: center;
  gap: 10px;
  font-size: 16px;
  
}

.hidden {
  display: none !important;
}

.dots::after {
  content: '';
  animation: dots 1.5s steps(3, end) infinite;
}

@keyframes dots {
  0%   { content: ''; }
  33%  { content: '.'; }
  66%  { content: '..'; }
  100% { content: '...'; }
}

#error-message {
  color: red;
  font-size: 13px;
  margin-top: -5px;
  margin-bottom: 8px;
  text-align: left;
}

#email-input.error {
  border: 1px solid red;
  outline: none;
}
    </style>

    <script src="https://unpkg.com/lucide@latest"></script>
</head>

<body>



    <div class="controls">
    <button id="add-sticker-btn" title="Überrasche mich">
        <i data-lucide="shuffle" class="icon"></i>
    </button>
    <button id="undo-btn" title="Zurück">
        <i data-lucide="undo-2" class="icon"></i>
    </button>
    <button id="redo-btn" title="Vor">
        <i data-lucide="redo-2" class="icon"></i>
    </button>
    <button id="new-btn" title="Neu">
        <i data-lucide="file-plus-2" class="icon"></i>
    </button>
</div>

<div class="color-palette-container">
    <div class="color-palette" id="color-palette"></div>
</div>

<div id="canvas-container">
    <div id="sticker-layer"></div>

    <div id="folder" title="Drop stickers here to save">
        <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="folder-icon lucide-folder">
            <path d="M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2z"></path>
        </svg>
        <span id="folder-count">0/35</span>
    </div>
</div>

<div id="sticker-palette-container"></div>
<div id="overlay-container"></div>
<div id="folder-overlay"></div> 

<!-- Email Popup -->
<div id="email-popup" class="email-popup hidden">
  <h3>Enter your email</h3>
  <input type="email" id="email-input" placeholder="your@email.com" required />
  <div id="email-error" class="error-message"></div>
  
  <div class="popup-actions">
    <button id="cancel-btn">Cancel</button>
    <button id="send-btn">Send</button>
  </div>
</div>

<div id="success-popup" class="hidden">
  <div class="success-box">
    <p id="success-message">Stickers saved successfully!</p>
    <button id="success-ok-btn">OK</button>
  </div>
</div>

<div id="loading-popup" class="hidden">
  <div class="popup-content">
    <p>Sticker werden gespeichert<span class="dots"></span></p>
  </div>
</div>

    <script>
        const stickerGroups = [
            {
name: "zulu",
urls: [

"https://static.wixstatic.com/media/990059_ebcddfd98c1e4dc0b62ae280d13400d4~mv2.png",
"https://static.wixstatic.com/media/990059_fb28597b3e934901b24ea56c70cd251e~mv2.png",
"https://static.wixstatic.com/media/990059_4dc9f12ccdc444f6b513c3ef52daee78~mv2.png",
"https://static.wixstatic.com/media/990059_e40835c13c4a44e0a14736238061a772~mv2.png",
"https://static.wixstatic.com/media/990059_0a9b16bed516447094cc67917789195d~mv2.png",
"https://static.wixstatic.com/media/990059_b52f919a40d24c8b9a34ab71888ca857~mv2.png",
"https://static.wixstatic.com/media/990059_15b6a3bc8e84440d9583d1b83e3d598c~mv2.png",
"https://static.wixstatic.com/media/990059_0bfcc3bb23bc4c8b9b37acdaf3e6b2d6~mv2.png",
"https://static.wixstatic.com/media/990059_8ebfac4726aa43f48c2374d7fb6bc70c~mv2.png",
"https://static.wixstatic.com/media/990059_5e9a398270f24cca981a1b7a98b25e65~mv2.png",
"https://static.wixstatic.com/media/990059_b6f2f99e235444e98295484404827f3b~mv2.png",
"https://static.wixstatic.com/media/990059_0376999057424754a2b98167ec6a6f99~mv2.png",
"https://static.wixstatic.com/media/990059_b5a6a1789b6f4edf80a187e580181b68~mv2.png",
"https://static.wixstatic.com/media/990059_8f8f53abd6bb49e8977b51ca7a72a6d8~mv2.png",
"https://static.wixstatic.com/media/990059_5263a42c53764f85810b51e49509a481~mv2.png",
"https://static.wixstatic.com/media/990059_9626fa28ca104b3981ac427f911bd124~mv2.png",
"https://static.wixstatic.com/media/990059_c6d1ba9e3e59474d9e4613104727c664~mv2.png",
"https://static.wixstatic.com/media/990059_02fad7d56aa34422a2f2f5009d79c6ee~mv2.png",
"https://static.wixstatic.com/media/990059_e5f3629b5b2a4fb58b3fcb6d66db0656~mv2.png",
"https://static.wixstatic.com/media/990059_ce84e83c7cf64054ab9a3d14a8727eee~mv2.png",
"https://static.wixstatic.com/media/990059_70703e8f4eb2400bb3a2794a9d2b30a1~mv2.png",
"https://static.wixstatic.com/media/990059_7bb16089e07b4a87824ee66326eec83d~mv2.png",
"https://static.wixstatic.com/media/990059_3741222f3ad044869262fc8a3de0f2a9~mv2.png",
"https://static.wixstatic.com/media/990059_b5ea812823a1417880ed7957c8d869ff~mv2.png",
"https://static.wixstatic.com/media/990059_c82cda1fbd024e73bf3ebc202ca98f1e~mv2.png",
"https://static.wixstatic.com/media/990059_dea51e1b23aa4d37961a76d4167be966~mv2.png",
"https://static.wixstatic.com/media/990059_82ddb672dfca4aaaa506708a8e81136f~mv2.png",
"https://static.wixstatic.com/media/990059_b9cd82b4f836457e84aaf7bdf6855909~mv2.png",
"https://static.wixstatic.com/media/990059_b1a74d918acf41c0ba210ea84572f089~mv2.png",
"https://static.wixstatic.com/media/990059_e7c337369b8f440ca612b1d4092b78e2~mv2.png",
"https://static.wixstatic.com/media/990059_bf7b64bb50804119ab5b14b9e1c7c6ce~mv2.png",
"https://static.wixstatic.com/media/990059_5d7ef870b2f4406c8601f64d5b4e2d0c~mv2.png",
"https://static.wixstatic.com/media/990059_f7d42b9e0fd7488ba09fd62a84a03cbc~mv2.png",
"https://static.wixstatic.com/media/990059_3580839d05684e54a4ee289c790e30ea~mv2.png",
"https://static.wixstatic.com/media/990059_a7766ba179fc42728328c6e273d3dcd0~mv2.png"

]
},
            {
name: "muerto",
urls: [

"https://static.wixstatic.com/media/990059_03a221fd165d4a89b5124370626486ad~mv2.png",
"https://static.wixstatic.com/media/990059_682d393f5d77435da4ab7096708cb8d7~mv2.png",
"https://static.wixstatic.com/media/990059_4349efbaa2d24be8b017e957daad4a9e~mv2.png",
"https://static.wixstatic.com/media/990059_49720d322ef24087999ba4d482275662~mv2.png",
"https://static.wixstatic.com/media/990059_b18489e8975a47d5a487241d0d9f35f0~mv2.png",
"https://static.wixstatic.com/media/990059_a8d0533c108f494aa845b9ff80c4fc84~mv2.png",
"https://static.wixstatic.com/media/990059_dba27be6d625437e966be5841737db29~mv2.png",
"https://static.wixstatic.com/media/990059_e8c8d6ac987448cb8889c4f597c014fb~mv2.png",
"https://static.wixstatic.com/media/990059_23c7997d627c400da2a4f931d2df4a51~mv2.png",
"https://static.wixstatic.com/media/990059_e0c4743c307045e9aabf7b57f68b4b7e~mv2.png",
"https://static.wixstatic.com/media/990059_5adc058fc36e4080b7cee077a0174f59~mv2.png",
"https://static.wixstatic.com/media/990059_f2b8533239eb42cdaa89579bef97fd42~mv2.png",
"https://static.wixstatic.com/media/990059_0a066802fe8f4113acf9d74073af28f3~mv2.png",
"https://static.wixstatic.com/media/990059_46267e59e16f4d6b9b0985f4546c58f0~mv2.png",
"https://static.wixstatic.com/media/990059_a22468d7506a4094b48e9709f436d886~mv2.png",
"https://static.wixstatic.com/media/990059_4f26d9e09d3541108934a89f95419ef8~mv2.png",
"https://static.wixstatic.com/media/990059_ddd1138a462a4214b3f011f6f070e4ff~mv2.png",
"https://static.wixstatic.com/media/990059_b2e189bef2084da5b2cc54fae201da06~mv2.png",
"https://static.wixstatic.com/media/990059_f31737e926ba42d48db52abd305e88f8~mv2.png",
"https://static.wixstatic.com/media/990059_28a8ca536ea84c9c8179e5ef06f8b0ad~mv2.png",
"https://static.wixstatic.com/media/990059_7ee0ac7365db45ee9fba4bad3bf804dc~mv2.png",
"https://static.wixstatic.com/media/990059_7190e1e630b34197bee6f5925a073b07~mv2.png",
"https://static.wixstatic.com/media/990059_d5099b5806d1487eb7f6f37a0dab8ee1~mv2.png",
"https://static.wixstatic.com/media/990059_7779fdbeca784abf975cdd9c90297fa7~mv2.png",
"https://static.wixstatic.com/media/990059_45c15098a4cd468bb58cd67bb0ec8ddd~mv2.png",
"https://static.wixstatic.com/media/990059_079cbe0471204f59bc373fca7ed5bb8a~mv2.png",
"https://static.wixstatic.com/media/990059_034576676e974d128a6af3b901050979~mv2.png",
"https://static.wixstatic.com/media/990059_7c98bbc20aab4bccafb8729ce192c67f~mv2.png",
"https://static.wixstatic.com/media/990059_bc3de2f513594c86917b0e2326efcf8a~mv2.png",
"https://static.wixstatic.com/media/990059_79a921a872224dc7b6d04de5c55bda2b~mv2.png",
"https://static.wixstatic.com/media/990059_5f395576e10d4fbf8c7379f7ea89d6d4~mv2.png",
"https://static.wixstatic.com/media/990059_d0a92839ce0049c1aa89b97943d394d1~mv2.png",
"https://static.wixstatic.com/media/990059_08ef2737f12c4b31b89ea2a1651eb6e1~mv2.png",
"https://static.wixstatic.com/media/990059_281fd072e0e04f4e8cf1569188b8a30a~mv2.png",
"https://static.wixstatic.com/media/990059_395b8ec40a6945579ff1a493ab9483ac~mv2.png"

]
},
        ];



const saveBtn = document.getElementById("save-btn");
const popup = document.getElementById("email-popup");
const cancelBtn = document.getElementById("cancel-btn");
const sendBtn = document.getElementById("send-btn");
const emailInput = document.getElementById("email-input");


const folder = document.getElementById('folder');
const folderCount = document.getElementById('folder-count');
let folderUrls = [];
const MAX_FOLDER_IMAGES = 35;
const folderOverlay = document.getElementById('folder-overlay');

const canvas = document.getElementById('canvas-container');
const addStickerBtn = document.getElementById('add-sticker-btn');
const undoBtn = document.getElementById('undo-btn');
const redoBtn = document.getElementById('redo-btn');

const newBtn = document.getElementById('new-btn');
const paletteContainer = document.getElementById('sticker-palette-container');
const overlayContainer = document.getElementById('overlay-container');
const colorPalette = document.getElementById('color-palette');
const history = [];

let bucketMode = false;
let activeSticker = null;
let activePaletteSticker = null;
let selectedColor = null;
let isRestoring = false;
let redoStack = [];

let initialX, initialY, offsetX, offsetY;
let initialTouchDistance = 0;
let initialStickerWidth = 0;
let initialStickerHeight = 0;

let initialCenter = { x: 0, y: 0 };
let firstStickerAdded = false;

const colors = [

    '#8d5524', '#c68642', '#e0ac69', '#f1c27d', '#ffdbac',
    // Reds
    '#FF0000', '#FF4500', '#FF6347', '#D2691E', '#CD5C5C',

    // Oranges & Yellows
    '#FFA500', '#FF8C00', '#FFD700', '#FFFF00', '#FFC04C',

    // Greens
    '#008000', '#228B22', '#3CB371', '#9ACD32', '#ADFF2F',

    // Blues
    '#0000FF', '#0000CD', '#4169E1', '#1E90FF', '#87CEFA',

    // Purples
    '#800080', '#4B0082', '#9932CC', '#BA55D3', '#DA70D6',

    // Pinks & Browns
    '#FFC0CB', '#FF69B4', '#FA8072', '#A52A2A', '#8B4513',

    '#C0C0C0', '#808080',


];

// Your new function to handle saving the data
// This function will need to be connected to your Wix Velo backend
async function saveFolderDataToWix(urls) {

    try {
        // This is a placeholder. You will need to replace this with your actual
        // Wix Velo backend function call, for example:
        // const savedItem = await saveStickersToFolder(urls);
        // console.log("Stickers saved successfully to Wix CMS:", savedItem);
        console.log("Saving to Wix CMS:", urls);
        // You'll need to create the backend module file `stickerService.jsw`
        // as described in the previous response to make this work.
    } catch (error) {
        console.error("Failed to save stickers to Wix CMS:", error);
    }
}

window.addEventListener("message", (event) => {
  if (event.data.type === "saveSuccess") {
    document.getElementById("loading-popup").classList.add("hidden");
     const count = event.data.urlAmount || 0;
    document.getElementById("success-message").textContent =
      `✅ Saved ${count} stickers successfully!`;
    document.getElementById("success-popup").classList.remove("hidden");
  }
  if (event.data.type === "saveError") {
    document.getElementById("loading-popup").classList.add("hidden");
    alert("❌ Something went wrong: " + event.data.error);
  }
});

// Cancel hides popup
cancelBtn.addEventListener("click", () => {
  popup.classList.add("hidden");
});

function showSuccessPopup() {
  document.getElementById("success-popup").classList.remove("hidden");
}

document.getElementById("success-ok-btn").addEventListener("click", () => {
  document.getElementById("success-popup").classList.add("hidden");
  
  
  
});

sendBtn.addEventListener("click", () => {
  const email = emailInput.value.trim();
  const errorDiv = document.getElementById("email-error");
  const popup = document.getElementById("email-popup");

  // Validate email
  if (!email || !email.includes("@")) {
    emailInput.classList.add("error");
    errorDiv.textContent = "Please enter a valid email.";
    return;
  }

  // Clear error
  emailInput.classList.remove("error");
  errorDiv.textContent = "";

  // Hide popup and show loading
  popup.classList.add("hidden");
  document.getElementById("loading-popup").classList.remove("hidden");
  document.querySelector(".controls").classList.remove("disabled");
  enablePaletteStickers();

  // Actually save
  window.parent.postMessage({
    type: "saveStickers",
    urls: folderUrls,
    email: email
  }, "*");
});



// Drag and drop events for the folder
folder.addEventListener('dragover', (e) => {
    e.preventDefault();
    if (folderUrls.length < MAX_FOLDER_IMAGES) {
        e.currentTarget.classList.add('drag-over');
    }
});

folder.addEventListener('dragleave', (e) => {
    e.currentTarget.classList.remove('drag-over');
});

folder.addEventListener("drop", (e) => {
    e.preventDefault();
    e.currentTarget.classList.remove("drag-over");

     if (folderUrls.length >= MAX_FOLDER_IMAGES) {
        updateFolderUI();  // 🔹 show red full state
        console.warn("🚫 Folder limit reached");
        return;
    }

    const jsonData = e.dataTransfer.getData("application/json");
    if (jsonData) {
        try {
            const { url } = JSON.parse(jsonData);
            if (url && !folderUrls.includes(url)) {
                folderUrls.push(url);
                folderCount.textContent = `${folderUrls.length}/${MAX_FOLDER_IMAGES}`;
                saveFolderDataToWix(folderUrls);
                updateFolderUI();
            }
        } catch (err) {
            console.error("Invalid JSON drop", err);
        }
        return; // ✅ don’t add to canvas
    }

    // fallback for canvas stickers
    const stickerDivId = e.dataTransfer.getData("text/plain");
    if (stickerDivId) {
        const stickerToMove = document.getElementById(stickerDivId);
        if (stickerToMove && stickerToMove.classList.contains("sticker")) {
            const stickerUrl = stickerToMove.querySelector("img").src;
            if (!folderUrls.includes(stickerUrl)) {
                stickerToMove.remove();
                folderUrls.push(stickerUrl);
                folderCount.textContent = `${folderUrls.length}/${MAX_FOLDER_IMAGES}`;
                saveFolderDataToWix(folderUrls);
                updateFolderUI();
            }
        }
    }
});


function renderFolderOverlay() {
    folderOverlay.innerHTML = "";

    document.querySelector(".controls").classList.add("disabled");

// Save button (top-left)
const saveBtn = document.createElement("button");
saveBtn.innerHTML = `
  <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="currentColor" viewBox="0 0 24 24">
    <path d="M17 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V7zM12 19a2 2 0 1 1 0-4 
             2 2 0 0 1 0 4zm3-10H5V5h10z"/>
  </svg>
`;
saveBtn.className = "overlay-save";
saveBtn.disabled = true; // 🚫 disabled at start

saveBtn.addEventListener("click", () => {
  if (folderUrls.length === 0) return; // extra safety

  console.log("💾 Save button clicked");
  popup.classList.remove("hidden"); // just open the popup
});

folderOverlay.appendChild(saveBtn);

function updateSaveButton() {
    saveBtn.disabled = folderUrls.length === 0;
}

// initialize state
updateSaveButton();

    // Close button
    const closeBtn = document.createElement("button");
    closeBtn.textContent = "×";
    closeBtn.className = "overlay-close";
    closeBtn.addEventListener("click", () => {
        folderOverlay.style.display = "none";
         document.querySelector(".controls").classList.remove("disabled");
         enablePaletteStickers();
    });
    folderOverlay.appendChild(closeBtn);

    if (folderUrls.length === 0) {
        const emptyMsg = document.createElement("p");
        
        emptyMsg.className = "empty-msg";
        folderOverlay.appendChild(emptyMsg);
    } else {
        folderUrls.forEach((url, index) => {
            const wrapper = document.createElement("div");
            wrapper.className = "overlay-sticker-wrapper";

            const img = document.createElement("img");
            img.src = url;
            img.className = "overlay-sticker";

            

            const delBtn = document.createElement("button");
            delBtn.textContent = "–";
            delBtn.className = "delete-sticker-btn";
            delBtn.addEventListener("click", (e) => {
                e.stopPropagation();
                folderUrls.splice(index, 1);
                saveFolderDataToWix(folderUrls);
                updateFolderUI();       // 🔹 update counter + full state
                renderFolderOverlay();  // 🔹 refresh overlay contents
            });

            wrapper.appendChild(img);
            wrapper.appendChild(delBtn);
            folderOverlay.appendChild(wrapper);
        });
    }

    folderOverlay.style.display = "grid";
    disablePaletteStickers();
}

folderOverlay.addEventListener("dragover", (e) => {
    e.preventDefault();
});

folderOverlay.addEventListener("drop", (e) => {
    e.preventDefault();

    // Try JSON payload (overlay/palette stickers)
    let jsonData = e.dataTransfer.getData("application/json");
    if (jsonData) {
        try {
            const { url } = JSON.parse(jsonData);
            if (url && !folderUrls.includes(url)) {
                folderUrls.push(url);
                saveFolderDataToWix(folderUrls);
                updateFolderUI();
                renderFolderOverlay();
            }
            return; // ✅ handled
        } catch (err) {
            console.error("Invalid JSON drop into folder", err);
        }
    }

    // Otherwise fallback to text/plain (canvas stickers)
    const stickerId = e.dataTransfer.getData("text/plain");
    if (stickerId) {
        const draggedEl = document.getElementById(stickerId);
        if (draggedEl && draggedEl.src && !folderUrls.includes(draggedEl.src)) {
            folderUrls.push(draggedEl.src);
            saveFolderDataToWix(folderUrls);
            updateFolderUI();
            renderFolderOverlay();
        }
    }
});



// --- CLICK TO OPEN OVERLAY ---
folder.addEventListener("click", () => {
    
    renderFolderOverlay();
});

function setBucketMode(enabled) {
    bucketMode = enabled;
    if (bucketMode) {
        document.body.classList.add('bucket-active');
        canvas.style.cursor = 'crosshair';
        document.querySelectorAll('.color-swatch').forEach(swatch => {
            swatch.draggable = false;
        });
    } else {
        document.body.classList.remove('bucket-active');
        canvas.style.cursor = 'default';
        document.querySelectorAll('.color-swatch').forEach(swatch => {
            swatch.draggable = true;
        });
    }
}

function saveState() {
    if (isRestoring) return;
    const stickersOnCanvas = document.querySelectorAll('#canvas-container .sticker');
    const currentState = {
        stickers: []
    };
    stickersOnCanvas.forEach(sticker => {
        const stickerImg = sticker.querySelector('img');
        if (stickerImg) {
            currentState.stickers.push({
                url: stickerImg.src,
                x: sticker.offsetLeft,
                y: sticker.offsetTop,
                width: sticker.offsetWidth,
                height: sticker.offsetHeight
            });
        }
    });
    history.push(currentState);
    redoStack = [];
    updateUndoButton();
}

function loadState(state) {
    isRestoring = true;
    canvas.innerHTML = '';
    state.stickers.forEach(data => {
        // pass suppressSave: true so addSticker doesn't push history while restoring
        addSticker(data.url, data.x, data.y, data.width, data.height, { suppressSave: true });
    });
    isRestoring = false;
    updateUndoButton();
}

function deselectAllStickers() {
    document.querySelectorAll('.sticker').forEach(s => {
        s.classList.remove('selected');
    });
}

function getTouchDistance(touches) {
    const dx = touches[0].clientX - touches[1].clientX;
    const dy = touches[0].clientY - touches[1].clientY;
    return Math.sqrt(dx * dx + dy * dy);
}

function addSticker(url, x, y, width = 200, height = 200, opts = {}) {
    const { suppressSave = false } = opts;
    const sticker = document.createElement('div');
    sticker.classList.add('sticker');
    sticker.style.width = `${width}px`;
    sticker.style.height = `${height}px`;

    // --- UPDATED CODE ---
    // Add a unique ID to each sticker so we can find it later
    sticker.id = `sticker-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    sticker.draggable = true;
    sticker.addEventListener('dragstart', (e) => {
        e.dataTransfer.setData('text/plain', sticker.id);
    });
    // --- END UPDATED CODE ---

    const stickerImg = document.createElement('img');
    stickerImg.crossOrigin = "Anonymous";
    stickerImg.src = url;
    stickerImg.draggable = false;
    sticker.appendChild(stickerImg);

    sticker.addEventListener('click', (e) => {
        if (bucketMode && selectedColor) {
            e.stopPropagation();
            const rect = sticker.getBoundingClientRect();
            const clickX = Math.floor((e.clientX - rect.left) * (stickerImg.naturalWidth / rect.width));
            const clickY = Math.floor((e.clientY - rect.top) * (stickerImg.naturalHeight / rect.height));
            recolorSticker(stickerImg, selectedColor, clickX, clickY);

        }
    });

    const copyBtn = document.createElement('div');
    copyBtn.classList.add('copy-btn');
    copyBtn.innerHTML = `
        <svg class="copy-btn-icon" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="12" y1="8" x2="12" y2="16" />
            <line x1="8" y1="12" x2="16" y2="12" />
        </svg>
    `;

    copyBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        const stickerWidth = sticker.offsetWidth;
        const stickerHeight = sticker.offsetHeight;
        let newX = parseInt(sticker.style.left) + 10;
        let newY = parseInt(sticker.style.top) + 10;
        function isOverlapping(x, y) {
            const stickers = document.querySelectorAll('.sticker');
            return Array.from(stickers).some(s => {
                const sx = parseInt(s.style.left);
                const sy = parseInt(s.style.top);
                const sw = s.offsetWidth;
                const sh = s.offsetHeight;
                return !(x + stickerWidth < sx || x > sx + sw || y + stickerHeight < sy || y > sy + sh);
            });
        }
        const step = 10;
        let attempts = 0;
        while (isOverlapping(newX, newY) && attempts < 100) {
            newX += step;
            newY += step;
            if (newX + stickerWidth > canvas.offsetWidth) newX = step;
            if (newY + stickerHeight > canvas.offsetHeight) newY = step;
            attempts++;
        }
        saveState();
        addSticker(stickerImg.src, newX, newY, sticker.offsetWidth);
    });

    const deleteBtn = document.createElement('div');
    deleteBtn.classList.add('delete-btn');
    deleteBtn.innerHTML = `
        <svg class="delete-btn-icon" viewBox="0 0 24 24">
            <line x1="5" y1="12" x2="19" y2="12" stroke="white" stroke-width="1" />
        </svg>
    `;
    deleteBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        saveState();
        sticker.remove();
    });

    const resizeHandle = document.createElement('div');
    resizeHandle.classList.add('resize-handle');
    resizeHandle.innerHTML = `
        <svg class="resize-handle-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="15 3 21 3 21 9"></polyline>
            <polyline points="9 21 3 21 3 15"></polyline>
            <line x1="21" y1="3" x2="14" y2="10"></line>
            <line x1="3" y1="21" x2="10" y2="14"></line>
        </svg>
    `;

    sticker.appendChild(deleteBtn);
    sticker.appendChild(copyBtn);
    sticker.appendChild(resizeHandle);

    function startInteraction(e) {
        if (e.target.closest('.delete-btn') || e.target.closest('.copy-btn') || e.target.closest('.resize-handle')) {
            return;
        }
        if (bucketMode) return;

        // Save state at the beginning of an interaction
        saveState();

        deselectAllStickers();
        sticker.classList.add('selected');

        e.preventDefault();
        activeSticker = sticker;

        initialCenter.x = sticker.offsetLeft + sticker.offsetWidth / 2;
        initialCenter.y = sticker.offsetTop + sticker.offsetHeight / 2;

        if (e.touches && e.touches.length === 2) {
            initialTouchDistance = getTouchDistance(e.touches);
            initialStickerWidth = sticker.offsetWidth;
            initialStickerHeight = sticker.offsetHeight;
        } else if (e.touches && e.touches.length === 1) {
            const touch = e.touches[0];
            initialX = touch.clientX;
            initialY = touch.clientY;
            offsetX = sticker.offsetLeft;
            offsetY = sticker.offsetTop;
        } else {
            initialX = e.clientX;
            initialY = e.clientY;
            offsetX = sticker.offsetLeft;
            offsetY = sticker.offsetTop;
        }

        document.addEventListener('mousemove', handleMove);
        document.addEventListener('mouseup', handleEnd);
        document.addEventListener('touchmove', handleMove, { passive: false });
        document.addEventListener('touchend', handleEnd);
    }

    function handleMove(e) {
        if (!activeSticker || bucketMode) return;
        e.preventDefault();

        if (e.touches && e.touches.length === 2) {
            const newTouchDistance = getTouchDistance(e.touches);
            const scaleChange = newTouchDistance / initialTouchDistance;
            const newWidth = Math.max(initialStickerWidth * scaleChange, 30);
            const aspectRatio = initialStickerWidth / initialStickerHeight;
            const newHeight = newWidth / aspectRatio;

            activeSticker.style.width = `${newWidth}px`;
            activeSticker.style.height = `${newHeight}px`;

            activeSticker.style.left = `${initialCenter.x - newWidth / 2}px`;
            activeSticker.style.top = `${initialCenter.y - newHeight / 2}px`;

        } else {
            const clientX = e.touches ? e.touches[0].clientX : e.clientX;
            const clientY = e.touches ? e.touches[0].clientY : e.clientY;
            const newX = offsetX + (clientX - initialX);
            const newY = offsetY + (clientY - initialY);
            activeSticker.style.left = `${newX}px`;
            activeSticker.style.top = `${newY}px`;
        }
    }

   function handleEnd() {
    document.removeEventListener('mousemove', handleMove);
    document.removeEventListener('mouseup', handleEnd);
    document.removeEventListener('touchmove', handleMove);
    document.removeEventListener('touchend', handleEnd);

    if (activeSticker) {
    // check overlap with folder
    if (isOverFolder(activeSticker, folder)) {
        if (folderUrls.length >= MAX_FOLDER_IMAGES) {
            // Folder is full → shake + red
            folder.classList.add("full");
            setTimeout(() => folder.classList.remove("full"), 500); 
            return; // block adding
        } else {
            const stickerUrl = activeSticker.querySelector('img').src;
            activeSticker.remove();
            folderUrls.push(stickerUrl);
            folderCount.textContent = `${folderUrls.length}/${MAX_FOLDER_IMAGES}`;
            saveFolderDataToWix(folderUrls);
        }
    }
}
    activeSticker = null;
    saveState();
}
    function addResizeHandleListeners(handle, sticker) {
        let startX, startY, startWidth, startHeight, startLeft, startTop;

        const startResize = (e) => {
            e.stopPropagation();
            e.preventDefault();

            saveState();

            const clientX = e.touches ? e.touches[0].clientX : e.clientX;
            const clientY = e.touches ? e.touches[0].clientY : e.clientY;

            startX = clientX;
            startY = clientY;
            startWidth = sticker.offsetWidth;
            startHeight = sticker.offsetHeight;
            startLeft = sticker.offsetLeft;
            startTop = sticker.offsetTop;

            document.addEventListener('mousemove', doResize);
            document.addEventListener('mouseup', endResize);
            document.addEventListener('touchmove', doResize, { passive: false });
            document.addEventListener('touchend', endResize);
        };

        const doResize = (e) => {
            e.stopPropagation();
            e.preventDefault();

            const clientX = e.touches ? e.touches[0].clientX : e.clientX;
            const clientY = e.touches ? e.touches[0].clientY : e.clientY;

            const deltaX = clientX - startX;
            const newWidth = Math.max(startWidth + deltaX, 30);
            const aspectRatio = startWidth / startHeight;
            const newHeight = newWidth / aspectRatio;

            sticker.style.width = `${newWidth}px`;
            sticker.style.height = `${newHeight}px`;

            // The key change is here:
            // Adjust the top-left position to simulate resizing from the center or another anchor point.
            sticker.style.left = `${startLeft + (startWidth - newWidth) / 2}px`;
            sticker.style.top = `${startTop + (startHeight - newHeight) / 2}px`;

        };

        const endResize = () => {
            document.removeEventListener('mousemove', doResize);
            document.removeEventListener('mouseup', endResize);
            document.removeEventListener('touchmove', doResize);
            document.removeEventListener('touchend', endResize);
            saveState();
        };

        handle.addEventListener('mousedown', startResize);
        handle.addEventListener('touchstart', startResize);
    }

    addResizeHandleListeners(resizeHandle, sticker);

    function addWheelResize(stickerImg) {
        let lastWheelTime = 0;
        let timeoutId = null;
        stickerImg.addEventListener('wheel', (e) => {
            e.preventDefault();

            // Save the state before the first scroll delta in a sequence
            if (Date.now() - lastWheelTime > 200 || history.length === 0) {
                saveState();
            }

            const parent = stickerImg.parentElement;
            const delta = Math.sign(e.deltaY);

            const initialWidth = parent.offsetWidth;
            const initialHeight = parent.offsetHeight;

            const initialLeft = parent.offsetLeft;
            const initialTop = parent.offsetTop;

            const newSize = initialWidth + (delta * 10);
            const minSize = 30;

            if (newSize >= minSize) {
                const newHeight = newSize / (initialWidth / initialHeight);

                parent.style.width = `${newSize}px`;
                parent.style.height = `${newHeight}px`;

                parent.style.left = `${initialLeft + (initialWidth - newSize) / 2}px`;
                parent.style.top = `${initialTop + (initialHeight - newHeight) / 2}px`;
            }
            lastWheelTime = Date.now();
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => {
                saveState();
            }, 200);
        });
    }


 

    addWheelResize(stickerImg);

    sticker.addEventListener('mousedown', startInteraction);
    sticker.addEventListener('touchstart', startInteraction);

    canvas.addEventListener('mousedown', (e) => {
        if (!e.target.closest('.sticker')) {
            deselectAllStickers();
        }
    });
    canvas.addEventListener('touchstart', (e) => {
        if (!e.target.closest('.sticker')) {
            deselectAllStickers();
        }
    });

    let finalX, finalY;
    const canvasRect = canvas.getBoundingClientRect();
    const existingStickers = document.querySelectorAll('.sticker');

    if (existingStickers.length === 0) {
        finalX = (canvas.offsetWidth / 2) - (width / 2);
        finalY = (canvas.offsetHeight / 2) - (width / 2);
    } else if (x !== undefined && y !== undefined) {
        finalX = x;
        finalY = y;
    } else {
        const newStickerWidth = width;
        const newStickerHeight = (stickerImg.naturalHeight / stickerImg.naturalWidth) * newStickerWidth;
        let foundPosition = false;

        const step = newStickerWidth / 2;
        for (let yy = 0; yy < canvas.offsetHeight - newStickerHeight && !foundPosition; yy += step) {
            for (let xx = 0; xx < canvas.offsetWidth - newStickerWidth && !foundPosition; xx += step) {
                let overlap = false;
                document.querySelectorAll('.sticker').forEach(existing => {
                    const rect = existing.getBoundingClientRect();
                    const ex = rect.left - canvasRect.left;
                    const ey = rect.top - canvasRect.top;
                    const ew = rect.width;
                    const eh = rect.height;

                    if (
                        xx < ex + ew &&
                        xx + newStickerWidth > ex &&
                        yy < ey + eh &&
                        yy + newStickerHeight > ey
                    ) {
                        overlap = true;
                    }
                });

                if (!overlap) {
                    finalX = xx;
                    finalY = yy;
                    foundPosition = true;
                }
            }
        }

        if (!foundPosition) {
            finalX = Math.floor(Math.random() * (canvas.offsetWidth - newStickerWidth));
            finalY = Math.floor(Math.random() * (canvas.offsetHeight - newStickerHeight));
        }
    }

    sticker.style.left = `${finalX}px`;
    sticker.style.top = `${finalY}px`;

    function updateButtonSizes() {
        const btnSize = sticker.offsetWidth * 0.2;
        [deleteBtn, copyBtn, resizeHandle].forEach(btn => {
            btn.style.width = btnSize + 'px';
            btn.style.height = btnSize + 'px';
        });
        deleteBtn.style.top = deleteBtn.style.right = `${btnSize * 0.25}px`;
        copyBtn.style.top = copyBtn.style.left = `${btnSize * 0.25}px`;
        resizeHandle.style.bottom = resizeHandle.style.right = `${btnSize * 0.25}px`;
    }

    updateButtonSizes();
    const observer = new ResizeObserver(updateButtonSizes);
    observer.observe(sticker);
    canvas.appendChild(sticker);

    // Save state after a sticker is added to the DOM
    if (!suppressSave && !isRestoring) {
        saveState();
    }

    return sticker;
}

function populatePalette() {
    stickerGroups.forEach(group => {
        const paletteSticker = document.createElement('img');
        paletteSticker.src = group.urls[0];
        paletteSticker.classList.add('palette-sticker');
        paletteSticker.dataset.group = group.name;

        paletteSticker.addEventListener('click', (e) => {
            if (activePaletteSticker === paletteSticker) {
                hideOverlay();
            } else {
                hideOverlay();
                showOverlay(e, group.urls);
                activePaletteSticker = paletteSticker;
            }
        });

        paletteSticker.draggable = true;
        paletteSticker.addEventListener('dragstart', (e) => {
            e.dataTransfer.setData('application/json', JSON.stringify({
                url: e.target.src,
                width: 200
            }));
            hideOverlay();
        });
        paletteContainer.appendChild(paletteSticker);
    });
}

function hideOverlay() {
    overlayContainer.style.display = 'none';
    activePaletteSticker = null;
}

let activeGroupURLs = [];

function showOverlay(e, urls) {
    activeGroupURLs = urls;
    overlayContainer.innerHTML = '';

    urls.forEach(url => {
        const overlaySticker = document.createElement('img');
        overlaySticker.src = url;
        overlaySticker.classList.add('overlay-sticker');
        overlaySticker.draggable = true;

        overlaySticker.addEventListener('dragstart', (e) => {
            e.stopPropagation();
            e.dataTransfer.setData('application/json', JSON.stringify({
                url: e.target.src,
                width: 200
            }));
            e.dataTransfer.setData("source", "overlay");
        });

        overlaySticker.addEventListener('click', (e) => {
            e.stopPropagation();
            addSticker(url);
        });

        overlayContainer.appendChild(overlaySticker);
    });

    // 🔹 Anchor to canvas instead of target
    const canvas = document.getElementById("canvas-container");
    const canvasRect = canvas.getBoundingClientRect();

    // position overlay to the left of the canvas, vertically aligned to top
    overlayContainer.style.left = (canvasRect.left - overlayContainer.offsetWidth - 20) + "px"; 
    overlayContainer.style.top = canvasRect.top + "px";

    overlayContainer.style.display = "grid";
}

document.addEventListener('click', (e) => {
    if (!paletteContainer.contains(e.target) && !overlayContainer.contains(e.target) && !colorPalette.contains(e.target)) {
        hideOverlay();
    }
});

canvas.addEventListener('dragover', (e) => {
    e.preventDefault();
});

canvas.addEventListener("drop", (e) => {
    e.preventDefault();
    const source = e.dataTransfer.getData("source");
    if (source === "overlay" && e.target.closest("#folder")) {
        // 🔹 dropped on folder, not canvas → do nothing
        return;
    }

    const jsonData = e.dataTransfer.getData("application/json");
    if (jsonData) {
        const { url, width } = JSON.parse(jsonData);
        addSticker(url, e.offsetX, e.offsetY, width);
    }
});

function hexToRgb(hex) {
    hex = hex.replace(/^#/, "");
    const bigint = parseInt(hex, 16);
    return [(bigint >> 16) & 255, (bigint >> 8) & 255, bigint & 255];
}

function disablePaletteStickers() {
    document.querySelector("#sticker-palette-container").classList.add("disabled");
}

function enablePaletteStickers() {
    document.querySelector("#sticker-palette-container").classList.remove("disabled");
}

function recolorSticker(stickerImg, fillColor, clickX, clickY) {


    const canvasEl = document.createElement("canvas");
    const ctx = canvasEl.getContext("2d");
    canvasEl.width = stickerImg.naturalWidth;
    canvasEl.height = stickerImg.naturalHeight;
    ctx.drawImage(stickerImg, 0, 0);

    const imgData = ctx.getImageData(0, 0, canvasEl.width, canvasEl.height);
    const data = imgData.data;
    const isBlack = (r, g, b, a) => (r < 50 && g < 50 && b < 50 && a > 100);

    let r, g, b;
    if (!isTransparent) {
        const hexColor = fillColor;
        const bigint = parseInt(hexColor.replace(/^#/, ""), 16);
        [r, g, b] = [(bigint >> 16) & 255, (bigint >> 8) & 255, bigint & 255];
    }

    const startIndex = ((clickY * canvasEl.width) + clickX) * 4;
    const startR = data[startIndex];
    const startG = data[startIndex + 1];
    const startB = data[startIndex + 2];
    const startA = data[startIndex + 3];

    if (isBlack(startR, startG, startB, startA)) {
        let found = false;
        const offsets = [[1, 0], [-1, 0], [0, 1], [0, -1]];
        for (const [dx, dy] of offsets) {
            const nx = clickX + dx;
            const ny = clickY + dy;
            if (nx < 0 || ny < 0 || nx >= canvasEl.width || ny >= canvasEl.height) continue;
            const ni = ((ny * canvasEl.width) + nx) * 4;
            if (data[ni + 3] === 0) {
                clickX = nx;
                clickY = ny;
                found = true;
                break;
            }
        }
        if (!found) return;
    }

    const stack = [[clickX, clickY]];
    const visited = new Set();
    let touchesEdge = false;
    let pixelsToFill = [];

    while (stack.length) {
        const [x, y] = stack.pop();
        if (x < 0 || y < 0 || x >= canvasEl.width || y >= canvasEl.height) {
            touchesEdge = true;
            continue;
        }
        const i = ((y * canvasEl.width) + x) * 4;
        const key = `${x},${y}`;
        if (visited.has(key)) continue;
        visited.add(key);
        if (isBlack(data[i], data[i + 1], data[i + 2], data[i + 3])) continue;
        pixelsToFill.push(i);
        stack.push([x + 1, y]);
        stack.push([x - 1, y]);
        stack.push([x, y + 1]);
        stack.push([x, y - 1]);
    }

    if (touchesEdge) return;

    if (isTransparent) {
        for (const i of pixelsToFill) {
            data[i + 3] = 0;
        }
    } else {
        for (const i of pixelsToFill) {
            data[i] = r;
            data[i + 1] = g;
            data[i + 2] = b;
            data[i + 3] = 255;
        }
    }

    if (pixelsToFill.length > 0) {
        ctx.putImageData(imgData, 0, 0);
        stickerImg.src = canvasEl.toDataURL();
        saveState();
    }
}

function updateUndoButton() {
    undoBtn.disabled = history.length <= 1;
}


  function updateFolderUI() {
    folderCount.textContent = `${folderUrls.length}/${MAX_FOLDER_IMAGES}`;

    if (folderUrls.length >= MAX_FOLDER_IMAGES) {
        folder.classList.add("full");
    } else {
        folder.classList.remove("full");
    }
}

undoBtn.addEventListener('click', () => {
    if (history.length > 1) {
        const lastState = history.pop();
        redoStack.push(lastState); // 👈 save for redo
        loadState(history[history.length - 1]);
        updateUndoRedoButtons();
    }
});

redoBtn.addEventListener('click', () => {
    if (redoStack.length > 0) {
        const nextState = redoStack.pop();
        history.push(nextState);
        loadState(nextState);
        updateUndoRedoButtons();
    }
});

function updateUndoRedoButtons() {
    undoBtn.disabled = history.length <= 1;
    redoBtn.disabled = redoStack.length === 0;
}

newBtn.addEventListener('click', () => {
    console.log("🆕 New button clicked");

    // Clear all stickers (adjust selector to match your sticker elements)
    document.querySelectorAll("#canvas-container .sticker").forEach(el => el.remove());

    // Reset folder
    folderUrls = [];
    document.getElementById("folder-count").textContent = "0/35";

    // Reset history
    history.splice(0);
    saveState();
    firstStickerAdded = false;
});

addStickerBtn.addEventListener('click', () => {
    setBucketMode(false);
    document.querySelectorAll('.color-swatch').forEach(s => s.classList.remove('active'));
    document.querySelectorAll('.controls button').forEach(b => {
        if (b.id === 'add-sticker-btn') b.classList.add('active');
        else b.classList.remove('active');
    });
    selectedColor = null;

    const allUrls = stickerGroups.flatMap(group => group.urls);
    const randomUrl = allUrls[Math.floor(Math.random() * allUrls.length)];

    addSticker(randomUrl);
});

populatePalette();
populateColorPalette();
saveState();

window.addEventListener('load', () => {
    if (window.lucide) {
        lucide.createIcons();
    }
});

let isDragging = false;
let startX;
let scrollLeft;
let isSwiping = false;
let initialTap = { clientX: 0 };

function addSwipeFunctionality() {
    const paletteContainer = document.querySelector('.color-palette-container');
    const palette = document.querySelector('.color-palette');

    const handleStart = (e) => {
        isDragging = true;
        startX = e.type.includes('mouse') ? e.pageX - paletteContainer.offsetLeft : e.touches[0].clientX;
        scrollLeft = paletteContainer.scrollLeft;
        initialTap.clientX = e.type.includes('mouse') ? e.clientX : e.touches[0].clientX;
    };

    const handleMove = (e) => {
        if (!isDragging) return;
        e.preventDefault();
        const x = e.type.includes('mouse') ? e.pageX - paletteContainer.offsetLeft : e.touches[0].clientX;
        const walk = (x - startX) * 1.5;
        paletteContainer.scrollLeft = scrollLeft - walk;
        if (Math.abs(e.clientX - initialTap.clientX) > 10) {
            isSwiping = true;
        }
    };

    const handleEnd = () => {
        isDragging = false;
        setTimeout(() => {
            isSwiping = false;
        }, 100);
    };

    [paletteContainer, palette].forEach(element => {
        element.addEventListener('mousedown', handleStart);
        element.addEventListener('mousemove', handleMove);
        element.addEventListener('mouseup', handleEnd);
        element.addEventListener('mouseleave', handleEnd);

        element.addEventListener('touchstart', handleStart);
        element.addEventListener('touchmove', handleMove, { passive: false });
        element.addEventListener('touchend', handleEnd);
    });
}

function populateColorPalette() {
    colorPalette.innerHTML = '';
    colors.forEach(color => {
        const swatch = document.createElement('div');
        swatch.classList.add('color-swatch');
        swatch.style.backgroundColor = color;

        if (selectedColor === color) {
            swatch.classList.add('active');
        }

        swatch.addEventListener('click', (e) => {
            if (isSwiping) return;

            document.querySelectorAll('.controls button').forEach(b => b.classList.remove('active'));

            const wasActive = swatch.classList.contains('active');
            document.querySelectorAll('.color-swatch').forEach(s => s.classList.remove('active'));

            if (!wasActive) {
                swatch.classList.add('active');
                selectedColor = color;
                setBucketMode(true);
            } else {
                selectedColor = null;
                setBucketMode(false);
            }
        });

        colorPalette.appendChild(swatch);
    });
}

addSwipeFunctionality();
populateColorPalette();

function isOverFolder(sticker, folderEl) {
    const stickerRect = sticker.getBoundingClientRect();
    const folderRect = folderEl.getBoundingClientRect();
    return !(
        stickerRect.right < folderRect.left ||
        stickerRect.left > folderRect.right ||
        stickerRect.bottom < folderRect.top ||
        stickerRect.top > folderRect.bottom
    );
}

document.addEventListener("contextmenu", function(e) {
    e.preventDefault();
}, false);
    </script>
</body>
</html>
