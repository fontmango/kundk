<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Simple Drawing Pad</title>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" />
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    body { font-family: 'Inter', sans-serif; }
    #stage { position: relative; width: 100%; height: 100%; border-radius: 1rem; overflow: hidden; }
    #bg-canvas, #draw-canvas {
      position: absolute; inset: 0; width: 100%; height: 100%;
      touch-action: none;
      border-radius: 1rem;
    }
    .icon-stroke { stroke: black; transition: stroke 0.3s ease; }
    .icon-stroke svg { stroke: currentColor; }
    .dark-mode .icon-stroke { stroke: white; }

    #save-prompt {
      display: none;
      position: fixed; top: 0; left: 0; width: 100%; height: 100%;
      background: rgba(0, 0, 0, 0.5); backdrop-filter: blur(5px);
      z-index: 50; justify-content: center; align-items: center;
      flex-direction: column; text-align: center;
    }
    #save-prompt-content {
      background: white; padding: 2.5rem; border-radius: 1.5rem;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }



    .button-group { display: flex; gap: 0.5rem; justify-content: center; margin-top: 1.5rem; }
    .prompt-btn {
      padding: 0.75rem; font-weight: 600; border-radius: 0.75rem;
      transition: all 0.2s ease-in-out; border: 2px solid;
    }
    .prompt-btn-primary { color: #3B82F6; border-color: #3B82F6; }
    .prompt-btn-secondary { color: #6B7280; border-color: #6B7280; }
    .prompt-btn-primary:hover { background: #3B82F6; color: white; }
    .prompt-btn-secondary:hover { background: #6B7280; color: white; }
  </style>
</head>
<body class="bg-white">
  <div class="flex flex-col items-center justify-between h-screen p-4">
    <div id="drawing-app-container" class="w-full max-w-4xl mx-auto p-4 bg-white rounded-2xl flex flex-col space-y-4 flex-grow">
      <div id="canvas-container" class="relative w-full rounded-xl overflow-hidden flex-grow border border-gray-200">
        <div id="stage" style="height: 100%;">
          <canvas id="bg-canvas"></canvas>
          <canvas id="draw-canvas" class="cursor-crosshair"></canvas>
        </div>
      </div>

      <div class="flex-shrink-0 w-full flex justify-center pt-4">
        <div class="flex flex-nowrap overflow-x-auto items-center gap-2 rounded-lg border border-gray-200 px-4 py-2 bg-transparent">
          <div class="flex items-center gap-1">
            <button id="tool-pen" class="p-2 rounded-lg ring-2 ring-blue-500 icon-stroke" title="Pen">
              <i data-lucide="pen-line" class="w-4 h-4"></i>
            </button>
            <button id="tool-eraser" class="p-2 rounded-lg icon-stroke" title="Eraser">
              <i data-lucide="eraser" class="w-4 h-4"></i>
            </button>
          </div>
          <button id="undo-btn" class="p-2 rounded-lg disabled:opacity-50 icon-stroke" title="Undo">
            <i data-lucide="rotate-ccw" class="w-4 h-4"></i>
          </button>
          <button id="toggle-background" class="p-2 rounded-lg icon-stroke" title="Toggle background">
            <span id="icon-sun"><i data-lucide="sun" class="w-4 h-4"></i></span>
            <span id="icon-moon" class="hidden"><i data-lucide="moon" class="w-4 h-4"></i></span>
          </button>
          <button id="clear-canvas" class="p-2 rounded-lg icon-stroke" title="New / Clear">
            <i data-lucide="file-plus" class="w-4 h-4"></i>
          </button>
          <button id="save-btn" class="p-2 rounded-lg icon-stroke disabled:opacity-50" title="Save">
            <i data-lucide="save" class="w-4 h-4"></i>
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Save popup -->
  <div id="save-prompt">
    <div id="save-prompt-content">

      <h2 class="text-2xl font-bold mb-4">Dein Meisterwerk wurde gespeichert!</h2>
      <p class="text-gray-600 mb-4">WÃ¤hle eine Option:</p>
      <div class="button-group">
        <!-- Upload -->
        <button id="copy-url-btn" class="prompt-btn prompt-btn-primary" title="Upload & Get Link">
  <i data-lucide="upload" class="w-6 h-6"></i>
</button>
        <!-- Download -->
        <button id="download-btn" class="prompt-btn prompt-btn-primary" title="Download">
          <i data-lucide="download" class="w-6 h-6"></i>
        </button>
        <!-- Abort -->
        <button id="abort-btn" class="prompt-btn prompt-btn-secondary" title="Abort">
          <i data-lucide="x" class="w-6 h-6"></i>
        </button>
      </div>
    </div>
  </div>

 <!-- Link popup -->
<div id="link-prompt" style="display: none; 
    position: fixed; 
    top: 0; left: 0; 
    width: 100%; height: 100%; 
    background: rgba(0,0,0,0.5); 
    backdrop-filter: blur(5px); 
    z-index: 50; 
    justify-content: center; 
    align-items: center;
    ">
  <div id="link-prompt-content" style="background: white; padding: 2.5rem; border-radius: 1.5rem; box-shadow: 0 4px 15px rgba(0,0,0,0.2); text-align: center;">
    <h2 class="text-2xl font-bold mb-4">Dein Link ist bereit!</h2>
    <p class="text-gray-600 mb-4" id="uploaded-url">URL wird hier angezeigt</p>
    <div class="button-group">
      <button id="copy-link-btn" class="prompt-btn prompt-btn-primary" title="Copy Link">
        <i data-lucide="link" class="w-6 h-6"></i>
      </button>
      <button id="open-link-btn" class="prompt-btn prompt-btn-primary" title="Open Link">
        <i data-lucide="external-link" class="w-6 h-6"></i>
      </button>
      <button id="close-link-btn" class="prompt-btn prompt-btn-secondary" title="Close">
        <i data-lucide="x" class="w-6 h-6"></i>
      </button>
    </div>
  </div>
</div>

<!-- Loading popup -->
<div id="loading-prompt" style="display: none; 
    position: fixed; 
    top: 0; left: 0; 
    width: 100%; height: 100%; 
    background: rgba(0,0,0,0.5); 
    backdrop-filter: blur(5px); 
    z-index: 50; 
    justify-content: center; 
    align-items: center; 
    color: white; 
    font-size: 1.25rem;
    font-weight: bold;
    ">
  <div class="flex flex-col items-center space-y-4">
    <div class="animate-spin rounded-full h-12 w-12 border-4 border-white border-t-transparent"></div>
    <p>Uploading...</p>
  </div>
</div>

  <script>
const bgCanvas = document.getElementById('bg-canvas');
const drawCanvas = document.getElementById('draw-canvas');
const bgCtx = bgCanvas.getContext('2d');
let drawCtx = drawCanvas.getContext('2d');

const penToolBtn = document.getElementById('tool-pen');
const eraserToolBtn = document.getElementById('tool-eraser');
const undoBtn = document.getElementById('undo-btn');
const clearBtn = document.getElementById('clear-canvas');
const saveBtn = document.getElementById('save-btn');
const toggleBgBtn = document.getElementById('toggle-background');
const iconSun = document.getElementById('icon-sun');
const iconMoon = document.getElementById('icon-moon');
const appContainer = document.getElementById('drawing-app-container');
const savePrompt = document.getElementById('save-prompt');

const uploadBtn = document.getElementById("copy-url-btn");
const downloadBtn = document.getElementById("download-btn");
const abortBtn = document.getElementById("abort-btn");

let isDrawing = false, lastX = 0, lastY = 0;
let isWhiteBackground = true;
let currentTool = 'pen';
let penWidth = 5, eraserWidth = 20;
let penColor = 'black';
let history = [], historyIndex = -1;
let saveCounter = 1;

function checkCanvasForContent() {
    const pixels = drawCtx.getImageData(0, 0, drawCanvas.width, drawCanvas.height).data;
    const hasContent = Array.from(pixels).some((v, i) => i % 4 === 3 && v > 0);
    saveBtn.disabled = !hasContent;
}

function updateHistoryButtons() {
    undoBtn.disabled = historyIndex <= 0;
}

function drawImageToCanvas(img) {
    const prevTransform = drawCtx.getTransform();
    drawCtx.setTransform(1, 0, 0, 1, 0, 0);
    drawCtx.clearRect(0, 0, drawCanvas.width, drawCanvas.height);
    drawCtx.drawImage(img, 0, 0, drawCanvas.width, drawCanvas.height);
    drawCtx.setTransform(prevTransform);
}

function sizeCanvases() {
    const stage = document.getElementById('stage');
    const rect = stage.getBoundingClientRect();
    const dpr = window.devicePixelRatio || 1;

    const previousDataUrl = historyIndex >= 0 ? history[historyIndex] : null;

    drawCanvas.width = bgCanvas.width = Math.floor(rect.width * dpr);
    drawCanvas.height = bgCanvas.height = Math.floor(rect.height * dpr);
    drawCanvas.style.width = bgCanvas.style.width = rect.width + 'px';
    drawCanvas.style.height = bgCanvas.style.height = rect.height + 'px';
    drawCtx.setTransform(dpr, 0, 0, dpr, 0, 0);
    bgCtx.setTransform(dpr, 0, 0, dpr, 0, 0);

    paintBackground();

    if (previousDataUrl) {
        const img = new Image();
        img.onload = () => { drawImageToCanvas(img); checkCanvasForContent(); };
        img.src = previousDataUrl;
    } else {
        drawCtx.clearRect(0, 0, drawCanvas.width, drawCanvas.height);
        checkCanvasForContent();
    }
}

function paintBackground() {
    bgCtx.save();
    bgCtx.setTransform(1,0,0,1,0,0);
    bgCtx.fillStyle = isWhiteBackground ? '#ffffff' : '#000000';
    bgCtx.fillRect(0,0,bgCanvas.width,bgCanvas.height);
    bgCtx.restore();
}

function setActiveTool(tool) {
    currentTool = tool;
    penToolBtn.classList.toggle('ring-2', tool === 'pen');
    penToolBtn.classList.toggle('ring-blue-500', tool === 'pen');
    eraserToolBtn.classList.toggle('ring-2', tool === 'eraser');
    eraserToolBtn.classList.toggle('ring-blue-500', tool === 'eraser');
}

function updatePenColorForBackground() {
    penColor = isWhiteBackground ? 'black' : 'white';
}

function pushHistory() {
    if(historyIndex < history.length - 1) history = history.slice(0, historyIndex + 1);
    history.push(drawCanvas.toDataURL('image/png'));
    historyIndex = history.length - 1;
    updateHistoryButtons();
    checkCanvasForContent();
}

function loadHistory(index) {
    drawCtx.clearRect(0, 0, drawCanvas.width, drawCanvas.height);
    if(index >= 0 && history[index]) {
        const img = new Image();
        img.onload = () => { drawImageToCanvas(img); updateHistoryButtons(); checkCanvasForContent(); };
        img.src = history[index];
    } else updateHistoryButtons(), checkCanvasForContent();
}

function startDraw(x,y){
    isDrawing=true; lastX=x; lastY=y;
    drawCtx.lineCap='round'; drawCtx.lineJoin='round';
}

function drawTo(x,y){
    if(!isDrawing) return;
    drawCtx.globalCompositeOperation = currentTool === 'pen' ? 'source-over' : 'destination-out';
    drawCtx.strokeStyle = currentTool === 'pen' ? penColor : 'rgba(0,0,0,1)';
    drawCtx.lineWidth = currentTool === 'pen' ? penWidth : eraserWidth;
    drawCtx.beginPath();
    drawCtx.moveTo(lastX,lastY);
    drawCtx.lineTo(x,y);
    drawCtx.stroke();
    lastX = x; lastY = y;
}

function endDraw(){ 
    if(!isDrawing) return;
    isDrawing=false; 
    drawCtx.globalCompositeOperation='source-over';
    pushHistory();
}

function saveImage() {
    const out = document.createElement('canvas');
    out.width = drawCanvas.width; out.height = drawCanvas.height;
    const octx = out.getContext('2d');
    octx.fillStyle = isWhiteBackground ? '#ffffff' : '#000000';
    octx.fillRect(0,0,out.width,out.height);
    octx.drawImage(drawCanvas,0,0);
    const link = document.createElement('a');
    link.download = `kiwi_${saveCounter++}.png`;
    link.href = out.toDataURL('image/png');
    link.click();
}

function getCanvasDataUrl() {
    const out = document.createElement('canvas');
    out.width = drawCanvas.width; out.height = drawCanvas.height;
    const octx = out.getContext('2d');
    octx.fillStyle = isWhiteBackground ? "#ffffff" : "#000000";
    octx.fillRect(0, 0, out.width, out.height);
    octx.drawImage(drawCanvas, 0, 0);
    return out.toDataURL("image/png");
}

// Mouse & Touch Events
function pointerStart(e) {
    const rect = drawCanvas.getBoundingClientRect();
    const x = e.clientX ?? e.touches[0].clientX;
    const y = e.clientY ?? e.touches[0].clientY;
    startDraw(x-rect.left, y-rect.top);
    e.preventDefault?.();
}

function pointerMove(e) {
    if(!isDrawing) return;
    const rect = drawCanvas.getBoundingClientRect();
    const x = e.clientX ?? e.touches[0].clientX;
    const y = e.clientY ?? e.touches[0].clientY;
    drawTo(x-rect.left, y-rect.top);
    e.preventDefault?.();
}

drawCanvas.addEventListener('mousedown', pointerStart);
drawCanvas.addEventListener('mousemove', pointerMove);
window.addEventListener('mouseup', endDraw);
drawCanvas.addEventListener('touchstart', pointerStart, {passive:false});
drawCanvas.addEventListener('touchmove', pointerMove, {passive:false});
drawCanvas.addEventListener('touchend', e => { endDraw(); e.preventDefault(); }, {passive:false});

// UI Controls
penToolBtn.addEventListener('click', ()=>setActiveTool('pen'));
eraserToolBtn.addEventListener('click', ()=>setActiveTool('eraser'));
undoBtn.addEventListener('click', ()=>loadHistory(historyIndex>0?--historyIndex:-1));
clearBtn.addEventListener('click', ()=>{ drawCtx.clearRect(0,0,drawCanvas.width,drawCanvas.height); history = []; historyIndex = -1; pushHistory(); });
toggleBgBtn.addEventListener('click', ()=>{
    isWhiteBackground = !isWhiteBackground;
    iconSun.classList.toggle('hidden', !isWhiteBackground);
    iconMoon.classList.toggle('hidden', isWhiteBackground);
    paintBackground(); updatePenColorForBackground();
    appContainer.classList.toggle('dark-mode', !isWhiteBackground);
});
saveBtn.addEventListener('click', ()=>{ if(!saveBtn.disabled) savePrompt.style.display='flex'; });

uploadBtn.addEventListener('click', () => {
    const base64Image = getCanvasDataUrl();
    window.parent.postMessage({ type: "UPLOAD_REQUEST", image: base64Image }, "*");
});

downloadBtn.addEventListener("click", () => { saveImage(); savePrompt.style.display = "none"; });
abortBtn.addEventListener("click", () => { savePrompt.style.display = "none"; });

window.addEventListener('load', ()=>{
    sizeCanvases(); setActiveTool('pen'); updatePenColorForBackground(); paintBackground(); pushHistory();
    window.lucide?.createIcons();
});
window.addEventListener('resize', sizeCanvases);

window.addEventListener("message", async (event) => {
  const loadingPrompt = document.getElementById("loading-prompt");

  if (event.data.type === "UPLOAD_SUCCESS") {
    loadingPrompt.style.display = "none"; // hide loader â

    const uploadedUrl = event.data.url;
    const uploadedUrlEl = document.getElementById("uploaded-url");
    const linkPrompt = document.getElementById("link-prompt");
    const copyLinkBtn = document.getElementById("copy-link-btn");
    const openLinkBtn = document.getElementById("open-link-btn");
    const closeLinkBtn = document.getElementById("close-link-btn");

    uploadedUrlEl.textContent = uploadedUrl;
    linkPrompt.style.display = "flex";
    savePrompt.style.display = "none";

    copyLinkBtn.onclick = () =>
      navigator.clipboard.writeText(uploadedUrl).then(() =>
        alert("â URL copied to clipboard!")
      );
    openLinkBtn.onclick = () => window.open(uploadedUrl, "_blank");
    closeLinkBtn.onclick = () => (linkPrompt.style.display = "none");
  }

  if (event.data.type === "UPLOAD_ERROR") {
    loadingPrompt.style.display = "none"; // also hide loader â
    alert("Error uploading: " + event.data.message);
  }
});

document.getElementById("copy-url-btn").addEventListener("click", () => {
  document.getElementById("loading-prompt").style.display = "flex";
});

</script>

</body>
</html>
