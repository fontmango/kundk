<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sticker Canvas</title>
    <style>
      
          
      img.protected {
  -webkit-touch-callout: none; /* disable "Save Image" on iOS Safari */
  -webkit-user-select: none;   /* prevent text/image selection */
  -webkit-user-drag: none;     /* prevent dragging image to new tab */
  user-select: none;
}
      
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        body {
            margin: 0;
            padding: 0;
            font-family: 'Inter', sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            height: 100vh;
            box-sizing: border-box;
            overflow-x: hidden;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
      
        }

        #canvas-container {
            width: 90%;
            max-width: 600px;
            height: 80vh;  
            background-color: #ffffff;
            border: 1px solid #e0e0e0;
            position: relative;
            margin-top: 10px;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            border-radius: 16px;
            touch-action: none;
        }
        
        .sticker {
            position: absolute;
            height: auto;
            cursor: grab;
            user-select: none;
            transition: transform 0.1s ease-in-out;
            box-sizing: border-box;
            touch-action: none;
        }

        .sticker img {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }

        .sticker:active {
            cursor: grabbing;
            z-index: 100;
        }
        
        .sticker:focus {
            outline: none;
        }

        .sticker:hover > .delete-btn,
        .sticker:hover > .copy-btn,
        .sticker:hover > .lock-btn {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .sticker.selected > .delete-btn,
        .sticker.selected > .copy-btn,
        .sticker.selected > .lock-btn {
            display: flex;
        }

        .controls {
            display: flex;
            gap: 15px;
            align-items: center;
        }
        
        .bucket-active .sticker {
            border: none !important;
            transition: none !important;
        }

         .bucket-active .sticker .delete-btn,
        .bucket-active .sticker .copy-btn,
        .bucket-active .sticker .lock-btn {
            display: none !important;
        }


        .bucket-active .sticker:active,
        .bucket-active .sticker:hover {
            cursor: crosshair;
        }

        .ghost-sticker {
            position: fixed;
            pointer-events: none;
            z-index: 1000;
            opacity: 0.7;
            width: 100px;
            height: auto;
            transform: translate(-50%, -50%);
        }

        button {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            border: none;
            background: none;
            cursor: pointer;
            color: #333;
            transition: transform 0.2s, color 0.2s;
            outline: none;
            -webkit-tap-highlight-color: transparent;
        }

        button:focus, button:active {
            outline: 0 !important;
            box-shadow: none !important;
        }
        
        button:hover {
            color: #000;
            transform: scale(1.1);
        }
        
        button.active {
            border-radius: 50%;
            background-color: #e0e0e0;
            transform: scale(1.05);
        }

        .icon {
            width: 1.4em;
            height: 1.4em;
            stroke: currentColor;
        }

        .color-palette-container {
            width: 90%;
            max-width: 600px;
            overflow-x: scroll;
            -webkit-overflow-scrolling: touch;
            scrollbar-width: none;
            -ms-overflow-style: none;
            touch-action: pan-y;
        }

        .color-palette-container::-webkit-scrollbar {
            display: none;  
        }

        .color-palette {
            display: flex;
            flex-wrap: nowrap;
            gap: 8px;
            margin-top: 10px;
            padding: 3px;
            width: max-content;
        }

        .color-swatch {
            width: 25px;
            height: 25px;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid transparent;
            transition: transform 0.2s, border-color 0.2s;
            flex-shrink: 0;
            outline: 0 !important;
            box-shadow: none !important;
            -webkit-tap-highlight-color: transparent;
            touch-action: none;
        }

        .color-swatch.active {
            border-color: #333;
            transform: scale(1.1);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }
        
        #sticker-palette-container {
            display: none;
        }

        /* Overlay box (popup wrapper) */
.overlay {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: rgba(255, 255, 255, 0.95);
  border: 1px solid #ccc;
  border-radius: 8px;
  padding: 10px;
  display: none;          /* <- start hidden */
  z-index: 200;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  width: 80%;
  height: 90%;
  overflow-y: auto;

  /* grid layout for children */
  display: none;          /* important: no grid by default */
  grid-template-columns: repeat(4, 1fr);
  gap: 10px;

}

.close-btn {
  position: absolute;
  top: 5px;
  right: 5px;
  background: rgba(0, 0, 0, 0.6);
  color: white;
  border: none;
  border-radius: 50%;
  width: 32px;
  height: 32px;
  font-size: 18px;
  cursor: pointer;
  z-index: 300;
}

.close-btn:hover {
  transform: scale(1.1);
}

/* Show overlay */
.overlay.active {
  display: block;
}

/* Content inside overlay (grid of groups or stickers) */
.overlay-grid {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  gap: 10px;
  overflow-y: auto;
  height: calc(100% - 40px); /* leave space for close button */
}

/* Group icons */
.overlay-icon {
  width: 100%;
  height: auto;
  aspect-ratio: 1/1;
  object-fit: contain;
  cursor: pointer;
  border-radius: 8px;
  transition: transform 0.2s;
}

.overlay-icon:hover {
  transform: scale(1.05);
}

/* Stickers */
.overlay-sticker {
  width: 100%;
  height: auto;
  aspect-ratio: 1/1;
  object-fit: contain;
  cursor: pointer;
  border: 1px solid transparent;
  transition: transform 0.2s;
}

.overlay-sticker:hover {
  transform: scale(1.1);
}
        
        .copy-btn-icon {
            width: 100%;
            height: 100%;
            fill: white;
            stroke: white;
        }

      .lock-btn-icon {
            width: 60%;
            height: 60%;
            fill: white;
            stroke: white;
        }

        .delete-btn:focus,
        .copy-btn:focus,
        .lock-btn:focus,
        .delete-btn:active,
        .copy-btn:active,
        .lock-btn:active {
            outline: none;
            box-shadow: none;
        }

        .delete-btn-icon {
            width: 100%;
            height: 100%;
            fill: white;
            stroke: white;
        }
        
        .delete-btn {
            position: absolute;
            top: 5%;
            right: 5%;
            width: 20%;
            height: 20%;
            border-radius: 50%;
            background-color: #c2bebeff;
            color: white;
            display: none;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 101;
            padding: 0;
            transition: transform 0.2s, background-color 0.2s;
            outline: none;
            -webkit-tap-highlight-color: transparent;
        }

        .copy-btn {
            position: absolute;
            top: 5%;
            left: 5%;
            width: 20%;
            height: 20%;
            border-radius: 50%;
            background-color: #c2bebeff;
            color: white;
            display: none;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 101;
            padding: 0;
            transition: transform 0.2s, background-color 0.2s;
            outline: none;
            -webkit-tap-highlight-color: transparent;
        }
        
        .lock-btn {
            position: absolute;
            bottom: 5%;
            left: 50%;
            transform: translateX(-50%);
            width: 20%;
            height: 20%;
            border-radius: 50%;
            background-color: #c2bebeff;
            color: white;
            display: none;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 101;
            padding: 0;
            transition: transform 0.2s, background-color 0.2s;
            outline: none;
            -webkit-tap-highlight-color: transparent;
        }

        .lock-btn:hover {
            transform: scale(1.1) translateX(-50%);
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }

        .sticker.locked .lock-btn {
            background-color: #ff9933; /* Orange when locked */
            transform: scale(1.1) translateX(-50%);
        }

        .copy-btn:hover {
            background-color: #6aa84fff;
            transform: scale(1.1);
            box-shadow: 0 2px 6px rgba(0,0,0,0.3);
        }

        .delete-btn:hover {
            background-color: #f26262ff;
            transform: scale(1.1);
            box-shadow: 0 2px 6px rgba(0,0,0,0.3);
        }
    </style>

    <script src="https://unpkg.com/lucide@latest"></script>
</head>
<body>
    <div class="controls">
        <button id="add-sticker-btn" title="Add Random">
            <i data-lucide="shuffle" class="icon"></i>
        </button>
        
        <button id="sticker-picker-btn" title="Choose Sticker">
            <i data-lucide="sticker" class="icon"></i>
        </button>
        
        <button id="undo-btn" title="Undo">
            <i data-lucide="undo-2" class="icon"></i>
        </button>

        <button id="redo-btn" title="Redo">
        <i data-lucide="redo-2" class="icon"></i>
    </button>
   
       
    </div>
    

    <div id="canvas-container"></div>
    
    <div id="group-overlay-container" class="overlay"></div>
    <div id="sticker-overlay-container" class="overlay"></div>

    <script>
        const stickerGroups = [
            {
                
                name: "Vikings",
                urls: [
                    "https://static.wixstatic.com/media/990059_195242b424cb450ea78b93e9de392511~mv2.png",
                    "https://static.wixstatic.com/media/990059_e5529716f6f64f77a4d7c250ab6cfb5a~mv2.png",
                    "https://static.wixstatic.com/media/990059_4636b8e42e674dccbb6117391652f10b~mv2.png",
                    "https://static.wixstatic.com/media/990059_b4c7121418e14667bfdf79aecfea0524~mv2.png",
                    "https://static.wixstatic.com/media/990059_c5244cbdc1014a0292d36824ce277bba~mv2.png",
                    "https://static.wixstatic.com/media/990059_82d1bde23b3f45709690e3b032b39f7a~mv2.png",
                    "https://static.wixstatic.com/media/990059_63d7cd18bf4245d687839909ceb3671c~mv2.png",
                    "https://static.wixstatic.com/media/990059_04487087ffd9403184e0562a09da9952~mv2.png",
                    "https://static.wixstatic.com/media/990059_0abecd8111674041bda6a9bc58a0325d~mv2.png",
                    "https://static.wixstatic.com/media/990059_3d5f1cfd966b460a9fc708fbadc23342~mv2.png",
                    "https://static.wixstatic.com/media/990059_1e7bdf5f8a9c415d940ecabe8aa515f8~mv2.png",
                    "https://static.wixstatic.com/media/990059_f7bda5bccf6143b59cf118b96fe8d5c3~mv2.png",
                    "https://static.wixstatic.com/media/990059_17382f604e5240cd9b192d1c408d177c~mv2.png",
                    "https://static.wixstatic.com/media/990059_8050e711279440069ebb11be47552624~mv2.png",
                    "https://static.wixstatic.com/media/990059_9280b10abb8f4b439280d80e2d654a00~mv2.png",
                    "https://static.wixstatic.com/media/990059_e69156957edb46ceb444911d6268d580~mv2.png",
                    "https://static.wixstatic.com/media/990059_818add1171f44d7b8fb14cc7324bf1ba~mv2.png",
                    "https://static.wixstatic.com/media/990059_c0876d74524a4a3890c8acc306d6c5b9~mv2.png",
                    "https://static.wixstatic.com/media/990059_4c2a3c3d1f4d44c88bd245577c12d89e~mv2.png",
                    "https://static.wixstatic.com/media/990059_6a6b1c7017c242bcb387edf0250492f9~mv2.png",
                    "https://static.wixstatic.com/media/990059_87363ab578ea485fb48b3ba8865da3c5~mv2.png",
                    "https://static.wixstatic.com/media/990059_786e79df55c3459680a241c123d7edc8~mv2.png",
                    "https://static.wixstatic.com/media/990059_75f54e8faf5f49aa9a6f554647c0a942~mv2.png",
                    "https://static.wixstatic.com/media/990059_70b398a8aea848cf92a090ffae357819~mv2.png",
                    "https://static.wixstatic.com/media/990059_393bb80861a1442cad28cfc4fd11a3b9~mv2.png",
                    "https://static.wixstatic.com/media/990059_4c090a4740134396a9d2650a86431677~mv2.png",
                    "https://static.wixstatic.com/media/990059_1148bbb54d724dc2beb5cebc69c78d04~mv2.png",
                    "https://static.wixstatic.com/media/990059_74b3de5669834b7e9cd434ee592a38a1~mv2.png",
                    "https://static.wixstatic.com/media/990059_30092f18c74c4b1e9ebd8c362ab02b31~mv2.png",
                    "https://static.wixstatic.com/media/990059_033520b5d83f401bbfafd972bb74e29f~mv2.png",
                    "https://static.wixstatic.com/media/990059_95ffdb66d7d94ad99e0471a5103defec~mv2.png",
                    "https://static.wixstatic.com/media/990059_2a29f33d7ef34280b86e7786af3971d1~mv2.png",
                    "https://static.wixstatic.com/media/990059_2f5de7bfb37b4edf9375460f2befe73d~mv2.png",
                    "https://static.wixstatic.com/media/990059_91c06e8d3bd0444696cf64ff35870d79~mv2.png",
                    "https://static.wixstatic.com/media/990059_caaa5e6cda52435fbb7c5d44baf532b6~mv2.png"

                ]
            },
            {
                name: "2",
                urls: [
                    "https://static.wixstatic.com/media/990059_bdb2912772b543748423fcdcd14a5511~mv2.png"
                ]
            },
            {
                name: "3",
                urls: [
                    "https://static.wixstatic.com/media/990059_d6bcc1676fd3430eaf87ee52bd938f3e~mv2.png"
                ]
            },
            {
                name: "4",
                urls: [
                    "https://static.wixstatic.com/media/990059_de40a3950aae4e5c8191652fefdb5495~mv2.png"
                ]
            },
            {
           		 name: "5",
                urls: [
                    "https://static.wixstatic.com/media/990059_de40a3950aae4e5c8191652fefdb5495~mv2.png"
                ]
            },
            {
            	 name: "6",
                urls: [
                    "https://static.wixstatic.com/media/990059_de40a3950aae4e5c8191652fefdb5495~mv2.png"
                ]
            },
            {
            	 name: "7",
                urls: [
                    "https://static.wixstatic.com/media/990059_de40a3950aae4e5c8191652fefdb5495~mv2.png"
                ]
            },
            {
                name: "8",
                urls: [
                    "https://static.wixstatic.com/media/990059_bdb2912772b543748423fcdcd14a5511~mv2.png"
                ]
            },
            {
                name: "9",
                urls: [
                    "https://static.wixstatic.com/media/990059_d6bcc1676fd3430eaf87ee52bd938f3e~mv2.png"
                ]
            },
            {
                name: "10",
                urls: [
                    "https://static.wixstatic.com/media/990059_de40a3950aae4e5c8191652fefdb5495~mv2.png"
                ]
            },
            {
           		 name: "11",
                urls: [
                    "https://static.wixstatic.com/media/990059_de40a3950aae4e5c8191652fefdb5495~mv2.png"
                ]
            },
            {
            	 name: "12",
                urls: [
                    "https://static.wixstatic.com/media/990059_de40a3950aae4e5c8191652fefdb5495~mv2.png"
                ]
            },
            {
            	 name: "13",
                urls: [
                    "https://static.wixstatic.com/media/990059_de40a3950aae4e5c8191652fefdb5495~mv2.png"
                ]
            },
            {
                name: "14",
                urls: [
                    "https://static.wixstatic.com/media/990059_bdb2912772b543748423fcdcd14a5511~mv2.png"
                ]
            },
            {
                name: "15",
                urls: [
                    "https://static.wixstatic.com/media/990059_d6bcc1676fd3430eaf87ee52bd938f3e~mv2.png"
                ]
            },
            {
                name: "16",
                urls: [
                    "https://static.wixstatic.com/media/990059_de40a3950aae4e5c8191652fefdb5495~mv2.png"
                ]
            },
            {
           		 name: "17",
                urls: [
                    "https://static.wixstatic.com/media/990059_de40a3950aae4e5c8191652fefdb5495~mv2.png"
                ]
            },
            {
            	 name: "18",
                urls: [
                    "https://static.wixstatic.com/media/990059_de40a3950aae4e5c8191652fefdb5495~mv2.png"
                ]
            },
            {
            	 name: "19",
                urls: [
                    "https://static.wixstatic.com/media/990059_de40a3950aae4e5c8191652fefdb5495~mv2.png"
                ]
            },
            {
                name: "20",
                urls: [
                    "https://static.wixstatic.com/media/990059_bdb2912772b543748423fcdcd14a5511~mv2.png"
                ]
            },
            {
                name: "21",
                urls: [
                    "https://static.wixstatic.com/media/990059_d6bcc1676fd3430eaf87ee52bd938f3e~mv2.png"
                ]
            },
            {
                name: "22",
                urls: [
                    "https://static.wixstatic.com/media/990059_de40a3950aae4e5c8191652fefdb5495~mv2.png"
                ]
            },
            {
           		 name: "23",
                urls: [
                    "https://static.wixstatic.com/media/990059_de40a3950aae4e5c8191652fefdb5495~mv2.png"
                ]
            },
            {
            	 name: "24",
                urls: [
                    "https://static.wixstatic.com/media/990059_de40a3950aae4e5c8191652fefdb5495~mv2.png"
                ]
            },
            {
            	 name: "25",
                urls: [
                    "https://static.wixstatic.com/media/990059_de40a3950aae4e5c8191652fefdb5495~mv2.png"
                ]
            },
            {
            	 name: "26",
                urls: [
                    "https://static.wixstatic.com/media/990059_de40a3950aae4e5c8191652fefdb5495~mv2.png"
                ]
            },
            {
            	 name: "27",
                urls: [
                    "https://static.wixstatic.com/media/990059_de40a3950aae4e5c8191652fefdb5495~mv2.png"
                ]
            }
            
            
        ];

        const canvas = document.getElementById('canvas-container');
        const addStickerBtn = document.getElementById('add-sticker-btn');
        const undoBtn = document.getElementById('undo-btn');
        const redoBtn = document.getElementById('redo-btn');

        const colorPalette = document.getElementById('color-palette');
        const history = [];
        
        const stickerPickerBtn = document.getElementById('sticker-picker-btn');
        const groupOverlayContainer = document.getElementById('group-overlay-container');
        const stickerOverlayContainer = document.getElementById('sticker-overlay-container');
        
        let bucketMode = false;
        let activeSticker = null;
        let activePaletteSticker = null;
        let selectedColor = null;
        let isRestoring = false;
        let redoStack = [];

        
        let initialX, initialY, offsetX, offsetY;
        let initialTouchDistance = 0;
        let initialStickerWidth = 0;
        let initialStickerHeight = 0;
        
        let initialCenter = { x: 0, y: 0 };
        let firstStickerAdded = false;


        
        function setBucketMode(enabled) {
            bucketMode = enabled;
            if (bucketMode) {
                document.body.classList.add('bucket-active');
                canvas.style.cursor = 'crosshair';
                document.querySelectorAll('.color-swatch').forEach(swatch => {
                    swatch.draggable = false;
                });
            } else {
                document.body.classList.remove('bucket-active');
                canvas.style.cursor = 'default';
                document.querySelectorAll('.color-swatch').forEach(swatch => {
                    swatch.draggable = true;
                });
            }
        }

        // NEW: Central function to add or replace a sticker and center it.
        function addOrReplaceSticker(url) {
            // Deactivate color picker when adding a new sticker.
            setBucketMode(false);
            selectedColor = null;
        
            const stickerWidth = 120;
            const canvasWidth = canvas.offsetWidth;
            const canvasHeight = canvas.offsetHeight;
            
            // Clear the canvas and add the new sticker in the center.
            canvas.innerHTML = '';
            const finalX = (canvasWidth / 2) - (stickerWidth / 2);
            const finalY = (canvasHeight / 2) - (stickerWidth / 2);
            
            
            addSticker(url, finalX, finalY, stickerWidth);
            saveState();
        }
        
        function saveState() {
            if (isRestoring) return;
            const stickersOnCanvas = document.querySelectorAll('#canvas-container .sticker');
            const currentState = {
                stickers: []
            };

            stickersOnCanvas.forEach(sticker => {
                const stickerImg = sticker.querySelector('img');
                if (stickerImg) {
                    currentState.stickers.push({
                        url: stickerImg.src,
                        x: sticker.offsetLeft,
                        y: sticker.offsetTop,
                        width: sticker.offsetWidth,
                        height: sticker.offsetHeight,
                        locked: sticker.classList.contains('locked')
                    });
                }
            });
          
          const prevState = history[history.length - 1];
    if (JSON.stringify(prevState) !== JSON.stringify(currentState)) {
        history.push(currentState);
    }
          
             redoStack = [];
            updateUndoButton();
            
        }

        function loadState(state) {
            isRestoring = true;
            canvas.innerHTML = '';
            state.stickers.forEach(data => {
                const newSticker = addSticker(data.url, data.x, data.y, data.width, data.height, {
                    suppressSave: true
                });
                if (data.locked) {
                    newSticker.classList.add('locked');
                }
            });
            isRestoring = false;
            updateUndoRedoButtons();
        }

        function deselectAllStickers() {
            document.querySelectorAll('.sticker').forEach(s => {
                s.classList.remove('selected');
            });
        }

        function getTouchDistance(touches) {
            const dx = touches[0].clientX - touches[1].clientX;
            const dy = touches[0].clientY - touches[1].clientY;
            return Math.sqrt(dx * dx + dy * dy);
        }
        
     function addSticker(url, x, y, width = 200, height = 200, opts = {}) {
    const { suppressSave = false } = opts;
    const sticker = document.createElement('div');
    sticker.classList.add('sticker');
    sticker.style.width = width + 'px';
    sticker.style.height = 'auto';

    const stickerImg = document.createElement('img');
    stickerImg.crossOrigin = "Anonymous";
    stickerImg.src = url;
    stickerImg.draggable = false;
    stickerImg.classList.add("protected");
    sticker.appendChild(stickerImg);

    // Initial position for new stickers
    if (x !== undefined && y !== undefined) {
        sticker.style.left = `${x}px`;
        sticker.style.top = `${y}px`;
    }

    // --- Interaction and Event Listener Variables ---
    let activeSticker = null;
    let initialX, initialY, offsetX, offsetY;
    let initialPinchDistance = 0;
    let initialStickerWidth = 0;
    let initialStickerHeight = 0;
    let initialRect = null;

    // --- Interaction Buttons and Handlers ---
    const copyBtn = document.createElement('div');
    copyBtn.classList.add('copy-btn');
    copyBtn.innerHTML = `<svg class="copy-btn-icon" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
<line x1="12" y1="8" x2="12" y2="16" />
<line x1="8" y1="12" x2="16" y2="12" />
</svg>`;
    copyBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        const stickerWidth = sticker.offsetWidth;
        const stickerHeight = sticker.offsetHeight;
        let newX = parseInt(sticker.style.left) + 10;
        let newY = parseInt(sticker.style.top) + 10;

        function isOverlapping(x, y) {
            const stickers = document.querySelectorAll('.sticker');
            return Array.from(stickers).some(s => {
                const sx = parseInt(s.style.left);
                const sy = parseInt(s.style.top);
                const sw = s.offsetWidth;
                const sh = s.offsetHeight;
                return !(x + stickerWidth < sx || x > sx + sw || y + stickerHeight < sy || y > sy + sh);
            });
        }
        const step = 10;
        let attempts = 0;
        while (isOverlapping(newX, newY) && attempts < 100) {
            newX += step;
            newY += step;
            if (newX + stickerWidth > canvas.offsetWidth) newX = step;
            if (newY + stickerHeight > canvas.offsetHeight) newY = step;
            attempts++;
        }
        saveState();
        addSticker(stickerImg.src, newX, newY, sticker.offsetWidth);
    });

    const deleteBtn = document.createElement('div');
    deleteBtn.classList.add('delete-btn');
    deleteBtn.innerHTML = `<svg class="delete-btn-icon" viewBox="0 0 24 24">
<line x1="5" y1="12" x2="19" y2="12" stroke="white" stroke-width="1" />
</svg>`;
    deleteBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        saveState();
        sticker.remove();
    });

    const lockBtn = document.createElement('div');
    lockBtn.classList.add('lock-btn');
    lockBtn.innerHTML = `<svg class="lock-btn-icon" data-lucide="lock" viewBox="0 0 24 24">
<rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
<path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
</svg>`;
    lockBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        sticker.classList.toggle('locked');
        saveState();
    });

    sticker.appendChild(deleteBtn);
    sticker.appendChild(copyBtn);
    sticker.appendChild(lockBtn);

   function startInteraction(e) {
    if (e.target.closest('.delete-btn') || e.target.closest('.copy-btn') || e.target.closest('.lock-btn')) {
        return;
    }

    if (bucketMode && (!e.touches || e.touches.length < 2)) {
        return;
    }

    activeSticker = sticker;
    deselectAllStickers();
    sticker.classList.add('selected');
    saveState();

    if (e.touches && e.touches.length === 2) {
        // Two-finger gesture (resizing)
        e.preventDefault(); 
        const touch1 = e.touches[0];
        const touch2 = e.touches[1];
        initialPinchDistance = Math.hypot(touch2.clientX - touch1.clientX, touch2.clientY - touch1.clientY);
        initialStickerWidth = sticker.offsetWidth;
        initialStickerHeight = sticker.offsetHeight;
        initialRect = sticker.getBoundingClientRect();
        
        document.addEventListener('touchmove', handleMove, { passive: false });
    } else if (e.touches && e.touches.length === 1) {
        // Single-finger gesture (dragging)
        const touch = e.touches[0];
        initialX = touch.clientX;
        initialY = touch.clientY;
        offsetX = sticker.offsetLeft;
        offsetY = sticker.offsetTop;
        
        document.addEventListener('touchmove', handleMove, { passive: false });
    } else {
        // Mouse interaction (dragging)
        initialX = e.clientX;
        initialY = e.clientY;
        offsetX = sticker.offsetLeft;
        offsetY = sticker.offsetTop;
        
        document.addEventListener('mousemove', handleMove);
    }

    document.addEventListener('mouseup', handleEnd);
    document.addEventListener('touchend', handleEnd);
}

function handleMove(e) {
    if (!activeSticker) return;

    if (e.touches && e.touches.length === 2) {
        e.preventDefault();
        
        const touch1 = e.touches[0];
        const touch2 = e.touches[1];
        const currentPinchDistance = Math.hypot(touch2.clientX - touch1.clientX, touch2.clientY - touch1.clientY);
        
        const scaleFactor = currentPinchDistance / initialPinchDistance;
        const newWidth = initialStickerWidth * scaleFactor;
        const newHeight = initialStickerHeight * scaleFactor;
        const minSize = 30;

        if (newWidth >= minSize) {
            const isShrinking = newWidth < initialStickerWidth;
            const canvasRect = canvas.getBoundingClientRect();
            let adjustedLeft = initialRect.left;
            let adjustedTop = initialRect.top;

            if (isShrinking) {
                const widthDiff = initialStickerWidth - newWidth;
                const heightDiff = initialStickerHeight - newHeight;
                adjustedLeft = initialRect.left + widthDiff / 2;
                adjustedTop = initialRect.top + heightDiff / 2;

                if (adjustedLeft < canvasRect.left) adjustedLeft = canvasRect.left;
                if (adjustedTop < canvasRect.top) adjustedTop = canvasRect.top;
                if (adjustedLeft + newWidth > canvasRect.right) adjustedLeft = canvasRect.right - newWidth;
                if (adjustedTop + newHeight > canvasRect.bottom) adjustedTop = canvasRect.bottom - newHeight;
            } else {
                const widthDiff = newWidth - initialStickerWidth;
                const heightDiff = newHeight - initialStickerHeight;
                adjustedLeft = initialRect.left - widthDiff / 2;
                adjustedTop = initialRect.top - heightDiff / 2;
            }

            activeSticker.style.width = `${newWidth}px`;
            activeSticker.style.height = `${newHeight}px`;
            activeSticker.style.left = `${adjustedLeft - canvasRect.left}px`;
            activeSticker.style.top = `${adjustedTop - canvasRect.top}px`;
        }
    } else if (!bucketMode && (!e.touches || e.touches.length === 1)) {
        const clientX = e.touches ? e.touches[0].clientX : e.clientX;
        const clientY = e.touches ? e.touches[0].clientY : e.clientY;
        
        // Directly calculate the new position based on the move event
        const dx = clientX - initialX;
        const dy = clientY - initialY;
        
        activeSticker.style.left = `${offsetX + dx}px`;
        activeSticker.style.top = `${offsetY + dy}px`;
    }
}

function handleEnd() {
    // Remove event listeners
    document.removeEventListener('mousemove', handleMove);
    document.removeEventListener('mouseup', handleEnd);
    document.removeEventListener('touchmove', handleMove);
    document.removeEventListener('touchend', handleEnd);

    // Remove the .selected class from the active sticker
    if (activeSticker) {
        activeSticker.classList.remove('selected');
    }

    // Reset state variables
    activeSticker = null;
    initialRect = null;
    initialTouchDistance = 0;
    initialStickerWidth = 0;
    initialStickerHeight = 0;
    
    saveState();
}
    // --- Event Listeners ---
    sticker.addEventListener('mousedown', startInteraction);
    sticker.addEventListener('touchstart', startInteraction);

    sticker.addEventListener('wheel', (e) => {
        // Desktop Resizing Logic
        e.preventDefault();
        saveState();
        const parent = sticker;
        const delta = Math.sign(e.deltaY);
        const initialRect = parent.getBoundingClientRect();
        const initialWidth = initialRect.width;
        const initialHeight = initialRect.height;
        const newSize = initialWidth + (delta * 10);
        const minSize = 30;

        if (newSize >= minSize) {
            const newHeight = newSize / (initialWidth / initialHeight);
            const canvasRect = canvas.getBoundingClientRect();
            let adjustedLeft = initialRect.left;
            let adjustedTop = initialRect.top;
            const isShrinking = newSize < initialWidth;

            if (isShrinking) {
                adjustedLeft = initialRect.left + (initialWidth / 2) - (newSize / 2);
                adjustedTop = initialRect.top + (initialHeight / 2) - (newHeight / 2);

                if (adjustedLeft < canvasRect.left) adjustedLeft = canvasRect.left;
                if (adjustedTop < canvasRect.top) adjustedTop = canvasRect.top;
                if (adjustedLeft + newSize > canvasRect.right) adjustedLeft = canvasRect.right - newSize;
                if (adjustedTop + newHeight > canvasRect.bottom) adjustedTop = canvasRect.bottom - newHeight;
            } else {
                adjustedLeft = initialRect.left - (newSize - initialWidth) / 2;
                adjustedTop = initialRect.top - (newHeight - initialHeight) / 2;
            }

            parent.style.width = `${newSize}px`;
            parent.style.height = `${newHeight}px`;
            parent.style.left = `${adjustedLeft - canvasRect.left}px`;
            parent.style.top = `${adjustedTop - canvasRect.top}px`;
            saveState();
        }
    });

    stickerImg.addEventListener('click', (e) => {
        if (bucketMode && selectedColor) {
            e.stopPropagation();
            const rect = sticker.getBoundingClientRect();
            const clickX = Math.floor((e.clientX - rect.left) * (stickerImg.naturalWidth / rect.width));
            const clickY = Math.floor((e.clientY - rect.top) * (stickerImg.naturalHeight / rect.height));
            recolorSticker(stickerImg, selectedColor, clickX, clickY);
        }
    });

    const updateButtonSizes = () => {
        const btnSize = sticker.offsetWidth * 0.2;
        [deleteBtn, copyBtn, lockBtn].forEach(btn => {
            btn.style.width = btnSize + 'px';
            btn.style.height = btnSize + 'px';
        });
        deleteBtn.style.top = deleteBtn.style.right = `${btnSize * 0.25}px`;
        copyBtn.style.top = copyBtn.style.left = `${btnSize * 0.25}px`;
    };

    updateButtonSizes();
    const observer = new ResizeObserver(updateButtonSizes);
    observer.observe(sticker);
    canvas.appendChild(sticker);

    if (window.lucide) {
        lucide.createIcons();
    }

    if (!suppressSave && !isRestoring) {
        saveState();
    }

    return sticker;
}
  


        function updateUndoButton() {
            undoBtn.disabled = history.length <= 1;
        }
        
     
        
        undoBtn.addEventListener('click', () => {
    if (history.length > 1) {
        const lastState = history.pop();
        redoStack.push(lastState); // 👈 save for redo
        loadState(history[history.length - 1]);
        updateUndoRedoButtons();
    }
});

redoBtn.addEventListener('click', () => {
    if (redoStack.length > 0) {
        const nextState = redoStack.pop();
        history.push(nextState);
        loadState(nextState);
        updateUndoRedoButtons();
    }
});

function updateUndoRedoButtons() {
    undoBtn.disabled = history.length <= 1;
    redoBtn.disabled = redoStack.length === 0;
}

 function addOrReplaceSticker(newUrl) {
            const unlockedSticker = document.querySelector('.sticker:not(.locked)');
            const stickerSize = 120;
            const canvasWidth = canvas.offsetWidth;
            const canvasHeight = canvas.offsetHeight;
            const centerX = (canvasWidth / 2) - (stickerSize / 2);
            const centerY = (canvasHeight / 2) - (stickerSize / 2);

            if (unlockedSticker) {
                unlockedSticker.querySelector('img').src = newUrl;
            } else {
                addSticker(newUrl, centerX, centerY, stickerSize);
            }
            saveState();
        }


     
        // MODIFIED: This function now correctly handles replacing the sticker and centering it
   addStickerBtn.addEventListener('click', () => {
            const allUrls = stickerGroups.flatMap(group => group.urls);
            const randomUrl = allUrls[Math.floor(Math.random() * allUrls.length)];
            const unlockedSticker = document.querySelector('.sticker:not(.locked)');

            if (unlockedSticker) {
                unlockedSticker.querySelector('img').src = randomUrl;
            } else {
                const stickerSize = 120;
                const canvasWidth = canvas.offsetWidth;
                const canvasHeight = canvas.offsetHeight;
                const centerX = (canvasWidth / 2) - (stickerSize / 2);
                const centerY = (canvasHeight / 2) - (stickerSize / 2);
                addSticker(randomUrl, centerX, centerY, stickerSize);
            }
            saveState();
        });

        window.addEventListener('load', () => {
            if (window.lucide) {
                lucide.createIcons();
            }
            updateCanvasDrop();
        });
        
        let isDragging = false;
        let startX;
        let scrollLeft;
        let isSwiping = false; 
        let initialTap = { clientX: 0 };

        function addSwipeFunctionality() {
         

            const handleStart = (e) => {
                isDragging = true;
                startX = e.type.includes('mouse') ? e.pageX - paletteContainer.offsetLeft : e.touches[0].clientX;
                scrollLeft = paletteContainer.scrollLeft;
                initialTap.clientX = e.type.includes('mouse') ? e.clientX : e.touches[0].clientX;
            };

            const handleMove = (e) => {
                if (!isDragging) return;
                e.preventDefault();
                const x = e.type.includes('mouse') ? e.pageX - paletteContainer.offsetLeft : e.touches[0].clientX;
                const walk = (x - startX) * 1.5; 
                paletteContainer.scrollLeft = scrollLeft - walk;
                if (Math.abs(e.clientX - initialTap.clientX) > 10) {
                    isSwiping = true;
                }
            };

            const handleEnd = () => {
                isDragging = false;
                setTimeout(() => {
                    isSwiping = false;
                }, 100);
            };

            [paletteContainer, palette].forEach(element => {
                element.addEventListener('mousedown', handleStart);
                element.addEventListener('mousemove', handleMove);
                element.addEventListener('mouseup', handleEnd);
                element.addEventListener('mouseleave', handleEnd);

                element.addEventListener('touchstart', handleStart);
                element.addEventListener('touchmove', handleMove, { passive: false });
                element.addEventListener('touchend', handleEnd);
            });
        }

  

        function hideOverlays() {
            groupOverlayContainer.style.display = 'none';
            stickerOverlayContainer.style.display = 'none';
        }

       function showGroupOverlay() {
  hideOverlays();
  groupOverlayContainer.innerHTML = '';

  // add close button
  const closeBtn = document.createElement('button');
  closeBtn.textContent = '✕';
  closeBtn.classList.add('close-btn');
  closeBtn.addEventListener('click', hideOverlays);
  groupOverlayContainer.appendChild(closeBtn);

  // add group icons
  stickerGroups.forEach(group => {
    const groupIcon = document.createElement('img');
    groupIcon.src = group.urls[0];
    groupIcon.classList.add('overlay-icon');
    groupIcon.title = group.name;

    groupIcon.addEventListener('click', () => {
      showStickerOverlay(group.urls);
    });

    groupOverlayContainer.appendChild(groupIcon);
  });

  // finally: show overlay
  groupOverlayContainer.style.display = 'grid';
}

        function updateCanvasDrop() {
            const canvas = document.getElementById('canvas-container');
            canvas.removeEventListener('drop', handleCanvasDrop); 
            canvas.addEventListener('drop', handleCanvasDrop); 
        }

        function handleCanvasDrop(e) {
            e.preventDefault();
            const data = e.dataTransfer.getData('application/json');
            if (data) {
                const { url, width } = JSON.parse(data);
                const rect = canvas.getBoundingClientRect();
                const x = e.clientX - rect.left - (width / 2);
                const y = e.clientY - rect.top - (width / 2);
                saveState();
                addSticker(url, x, y, width);
            }
        }

        let activeTouchSticker = null;
        let touchOffsetX = 0;
        let touchOffsetY = 0;
        
     function showStickerOverlay(urls) {
  hideOverlays();
  stickerOverlayContainer.innerHTML = '';

  // add close button
  const closeBtn = document.createElement('button');
  closeBtn.textContent = '✕';
  closeBtn.classList.add('close-btn');
  closeBtn.addEventListener('click', hideOverlays);
  stickerOverlayContainer.appendChild(closeBtn);

  // add stickers
  urls.forEach(url => {
    const sticker = document.createElement('img');
    sticker.src = url;
    sticker.classList.add('overlay-sticker');
    sticker.addEventListener('click', () => {
      addOrReplaceSticker(url);
      hideOverlays();
    });
    stickerOverlayContainer.appendChild(sticker);
  });

  // finally: show the overlay
  stickerOverlayContainer.style.display = 'grid';
}

        stickerPickerBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            if (groupOverlayContainer.style.display === 'grid') {
                hideOverlays();
            } else {
                showGroupOverlay();
            }
        });

        document.addEventListener('click', (e) => {
            if (!groupOverlayContainer.contains(e.target) && !stickerOverlayContainer.contains(e.target) && !stickerPickerBtn.contains(e.target)) {
                hideOverlays();
            }
        });

        canvas.removeEventListener('dragover', (e) => {
            e.preventDefault();
        });

        canvas.removeEventListener('drop', (e) => {
            e.preventDefault();
            const data = e.dataTransfer.getData('application/json');
            if (data) {
                const { url, width } = JSON.parse(data);
                const rect = canvas.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                saveState();
                addSticker(url, x, y, width);
            }
        });

        addSwipeFunctionality();
        populateColorPalette();
        saveState();
      
      document.addEventListener("contextmenu", function(e) {
  if (e.target.tagName === "IMG" && e.target.classList.contains("protected")) {
    e.preventDefault();
  }
}, false);
      
    </script>
</body>
</html>
