<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sticker Canvas</title>
    <style>
      
      img.protected {
  -webkit-touch-callout: none; /* disable "Save Image" on iOS Safari */
  -webkit-user-select: none;   /* prevent text/image selection */
  -webkit-user-drag: none;     /* prevent dragging image to new tab */
  user-select: none;
}
      
  .sticker-btn {
    position: absolute;
    width: 20%;
    height: 20%;
    border-radius: 50%;
    background-color: #c2bebeff;
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 101;
    padding: 0;
    outline: none;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.2s ease, visibility 0.2s ease, transform 0.2s, background-color 0.2s;
}

/* Show buttons on hover or selected sticker */
.sticker:hover > .sticker-btn,
.sticker.selected > .sticker-btn {
    opacity: 1;
    visibility: visible;
}

/* Specific button positions */
.delete-btn {
    top: 5%;
    right: 5%;
}

.copy-btn {
    top: 5%;
    left: 5%;
}

.group-btn:hover {
    background-color: #2be7d8; /* A subtle hover color */
    transform: scale(1.1);
    box-shadow: 0 2px 6px rgba(0,0,0,0.3);
}

.group-btn {
    bottom: 5%;
    right: 5%;
}

/* Hover effects */
.sticker-btn:hover {
    transform: scale(1.1);
   
}

.sticker.locked .lock-btn {
    background-color: #ff9933; /* Override to orange when locked */
}


/* SVG sizing inside buttons */
.sticker-btn svg {
    width: 60%;
    height: 60%;
}

body {
    margin: 0;
    padding: 0;
    font-family: 'Inter', sans-serif;
    display: flex;
    flex-direction: column;
    align-items: center;
  
    box-sizing: border-box;
    overflow-x: hidden;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

#canvas-container {
    width: 90%;
    max-width: 600px;
    height: 80vh;
    background-color: #ffffff;
    border: 1px solid #e0e0e0;
    position: relative;
    margin-top: 10px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    border-radius: 16px;
    touch-action: none;
}
      
      @media (max-width: 768px) {
    #canvas-container {
        /* On mobile, make the height 50% of the screen's height */
  
        /* You can also make it take the full width for more space */
        width: 100%;
    }
}

.sticker {
    position: absolute;
    height: auto;
    cursor: grab;
    user-select: none;
    box-sizing: border-box;
    touch-action: none;
}

.sticker img {
    width: 100%;
    height: 100%;
    object-fit: contain;
}

.sticker:active {
    cursor: grabbing;
    z-index: 100;
}

.sticker.locked {
    cursor: grab;
}

.sticker.locked:active {
    cursor: grabbing;
}

.sticker:focus {
    outline: none;
}

/* Base styles for buttons, with transitions for smooth fading */
.copy-btn,
.group-btn,
.delete-btn,
.lock-btn {
    position: absolute;
    width: 20%;
    height: 20%;
    border-radius: 50%;
    background-color: #c2bebeff;
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 101;
    padding: 0;
    outline: none;
    -webkit-tap-highlight-color: transparent;

    /* These are the crucial lines for hiding and transitioning */
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.2s ease, visibility 0.2s ease, transform 0.2s, background-color 0.2s;
}

/* Specific button positions */
.delete-btn {
    top: 5%;
    right: 5%;
}

.copy-btn {
    top: 5%;
    left: 5%;
}


.group-btn svg {
    width: 16px;
    height: 16px;
}

/* Show buttons on hover or when the sticker has the 'selected' class */
.sticker:hover > .delete-btn,
.sticker:hover > .copy-btn,
.sticker:hover > .lock-btn,
.sticker.selected > .delete-btn,
.sticker.selected > .copy-btn,
.sticker.selected > .lock-btn {
    opacity: 1;
    visibility: visible;
}

/* Hover effects for buttons */
.copy-btn:hover {
    background-color: #6aa84fff;
    transform: scale(1.1);
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
}

.delete-btn:hover {
    background-color: #f26262ff;
    transform: scale(1.1);
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
}

.lock-btn:hover {
    transform: scale(1.1);
   
    
}



/* Bucket mode-specific overrides */
.bucket-active .sticker {
    border: none !important;
    transition: none !important;
}

.bucket-active .sticker .delete-btn,
.bucket-active .sticker .copy-btn,
.bucket-active .sticker .lock-btn,
.bucket-active .sticker .group-btn {
    display: none !important;
}

.bucket-active .sticker:active,
.bucket-active .sticker:hover {
    cursor: crosshair;
}

/* ... (rest of your CSS) ... */

/* Remaining CSS from your provided code */
.controls {
    display: flex;
    gap: 10px;
    align-items: center;
}

.ghost-sticker {
    position: fixed;
    pointer-events: none;
    z-index: 1000;
    opacity: 0.7;
    width: 100px;
    height: auto;
    transform: translate(-50%, -50%);
}

button {
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    border: none;
    background: none;
    cursor: pointer;
    color: #333;
    transition: transform 0.2s, color 0.2s;
    outline: none;
    -webkit-tap-highlight-color: transparent;
}

button:focus,
button:active {
    outline: 0 !important;
    box-shadow: none !important;
}

button:hover {
    color: #000;
    transform: scale(1.1);
}

button.active {
    border-radius: 50%;
    background-color: #e0e0e0;
    transform: scale(1.05);
}

.icon {
    width: 1.4em;
    height: 1.4em;
    stroke: currentColor;
}

.color-palette-container {
    width: 90%;
    max-width: 600px;
    overflow-x: scroll;
    -webkit-overflow-scrolling: touch;
    scrollbar-width: none;
    -ms-overflow-style: none;
    touch-action: pan-y;
}

.color-palette-container::-webkit-scrollbar {
    display: none;
}

.color-palette {
    display: flex;
    flex-wrap: nowrap;
    gap: 8px;
    margin-top: 5px;
    margin-bottom: 5px;
    padding: 3px;
    width: max-content;
}

.color-swatch {
    width: 25px;
    height: 25px;
    border-radius: 50%;
    cursor: pointer;
    border: 2px solid transparent;
    transition: transform 0.2s, border-color 0.2s;
    flex-shrink: 0;
    outline: 0 !important;
    box-shadow: none !important;
    -webkit-tap-highlight-color: transparent;
    touch-action: none;
}

.color-swatch.active {
    transform: scale(1.2);
    border-color: #000000;
}

#sticker-palette-container {
    display: none;
}

.overlay {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: rgba(255, 255, 255, 0.95);
    border: 1px solid #ccc;
    border-radius: 8px;
    padding: 10px;
    display: none;
    z-index: 200;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    width: 80%;
   
    overflow-y: auto;
    grid-template-columns: repeat(5, 1fr);
    gap: 10px;
}


.overlay.active {
    display: block;
}

.overlay-grid {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    gap: 10px;
    overflow-y: auto;
    height: calc(100% - 40px);
}

.overlay-icon {
    width: 100%;
    height: auto;
    aspect-ratio: 1/1;
    object-fit: contain;
    cursor: pointer;
    border-radius: 8px;
    transition: transform 0.2s;
}

.overlay-icon:hover {
    transform: scale(1.05);
}

.overlay-sticker {
    width: 100%;
    height: auto;
    aspect-ratio: 1/1;
    object-fit: contain;
    cursor: pointer;
    border: 1px solid transparent;
    transition: transform 0.2s;
}

.overlay-sticker:hover {
    transform: scale(1.1);
}

.copy-btn-icon {
    width: 100%;
    height: 100%;
    fill: white;
    stroke: white;
}

.lock-btn-icon {
    width: 60%;
    height: 60%;
    fill: white;
    stroke: white;
}

.delete-btn-icon {
    width: 100%;
    height: 100%;
    fill: white;
    stroke: white;
}


.copy-btn:hover {
    background-color: #6aa84fff;
    transform: scale(1.1);
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
}

.delete-btn:hover {
    background-color: #f26262ff;
    transform: scale(1.1);
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
}

.pulse-effect {
  animation: pulse 0.5s ease-in-out;
}

@keyframes pulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.1);
  }
  100% {
    transform: scale(1);
  }
}
#sticker-overlay-container {
    /* Main overlay styles */
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90vw;
    max-width: 500px;
    background-color: #fff;
    border-radius: 16px;
    box-shadow: 0 8px 30px rgba(0,0,0,0.15);
    padding: 0; /* Remove padding here, add it to the content wrapper */
    z-index: 300;
    
    /* Crucial for centering and stacking header/content */
    display: none; /* Hide by default */
    flex-direction: column; 
  
}

/* Other CSS remains the same */

.overlay-stickers-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(40px, 1fr));
    gap: 15px;
    padding: 10px;
      overflow-y: auto;
}

.overlay-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    background: white;
    border-bottom: 1px solid #ccc;
    flex-shrink: 0;
}


.close-btn {
    position: absolute;
   
    
    color: #555;
    background: none;
    border: none;
    padding: 0;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
}


.close-btn {
    right: 0;
}

.overlay-close-btn:hover {
    transform: scale(1.1);
}

.overlay-title {
    flex-grow: 1;
    text-align: center;
    /* This is the key change: remove the default margin from the title */
    margin: 0;
    font-size: 16px; /* Adjust font size as needed */
    font-weight: 600;
}

    </style>

    <script src="https://unpkg.com/lucide@latest"></script>
</head>
<body>
  


    <div id="canvas-container"></div>
    <div id="overlay-container"></div>

  <div class="controls">
  
   <button id="spin-sticker-btn" title="Spin Random">
  <i data-lucide="dice-6" class="icon"></i>
</button>
    
        <button id="add-sticker-btn" title="Add Random">
            <i data-lucide="plus" class="icon"></i>
        </button>

        <button id="sticker-picker-btn" title="Choose Sticker">
            <i data-lucide="sticker" class="icon"></i>
        </button>

        <button id="undo-btn" title="Undo">
            <i data-lucide="undo-2" class="icon"></i>
        </button>

        <button id="redo-btn" title="Redo">
            <i data-lucide="redo-2" class="icon"></i>
        </button>
        
         <button id="new-btn" title="Neu">
            <i data-lucide="file-plus-2" class="icon"></i>
        </button>

     

    </div>
  
  
    <div class="color-palette-container">
        <div class="color-palette" id="color-palette"></div>
    </div>
        <div id="sticker-overlay-container"></div>

    <div id="group-overlay-container" class="overlay"></div>

    <script>
             const stickerGroups = [
         
{
name: "Día de los Muertos",
urls: [

"https://static.wixstatic.com/media/990059_03a221fd165d4a89b5124370626486ad~mv2.png",
"https://static.wixstatic.com/media/990059_682d393f5d77435da4ab7096708cb8d7~mv2.png",
"https://static.wixstatic.com/media/990059_4349efbaa2d24be8b017e957daad4a9e~mv2.png",
"https://static.wixstatic.com/media/990059_49720d322ef24087999ba4d482275662~mv2.png",
"https://static.wixstatic.com/media/990059_b18489e8975a47d5a487241d0d9f35f0~mv2.png",
"https://static.wixstatic.com/media/990059_a8d0533c108f494aa845b9ff80c4fc84~mv2.png",
"https://static.wixstatic.com/media/990059_dba27be6d625437e966be5841737db29~mv2.png",
"https://static.wixstatic.com/media/990059_e8c8d6ac987448cb8889c4f597c014fb~mv2.png",
"https://static.wixstatic.com/media/990059_23c7997d627c400da2a4f931d2df4a51~mv2.png",
"https://static.wixstatic.com/media/990059_e0c4743c307045e9aabf7b57f68b4b7e~mv2.png",
"https://static.wixstatic.com/media/990059_5adc058fc36e4080b7cee077a0174f59~mv2.png",
"https://static.wixstatic.com/media/990059_f2b8533239eb42cdaa89579bef97fd42~mv2.png",
"https://static.wixstatic.com/media/990059_0a066802fe8f4113acf9d74073af28f3~mv2.png",
"https://static.wixstatic.com/media/990059_46267e59e16f4d6b9b0985f4546c58f0~mv2.png",
"https://static.wixstatic.com/media/990059_a22468d7506a4094b48e9709f436d886~mv2.png",
"https://static.wixstatic.com/media/990059_4f26d9e09d3541108934a89f95419ef8~mv2.png",
"https://static.wixstatic.com/media/990059_ddd1138a462a4214b3f011f6f070e4ff~mv2.png",
"https://static.wixstatic.com/media/990059_b2e189bef2084da5b2cc54fae201da06~mv2.png",
"https://static.wixstatic.com/media/990059_f31737e926ba42d48db52abd305e88f8~mv2.png",
"https://static.wixstatic.com/media/990059_28a8ca536ea84c9c8179e5ef06f8b0ad~mv2.png",
"https://static.wixstatic.com/media/990059_7ee0ac7365db45ee9fba4bad3bf804dc~mv2.png",
"https://static.wixstatic.com/media/990059_7190e1e630b34197bee6f5925a073b07~mv2.png",
"https://static.wixstatic.com/media/990059_d5099b5806d1487eb7f6f37a0dab8ee1~mv2.png",
"https://static.wixstatic.com/media/990059_7779fdbeca784abf975cdd9c90297fa7~mv2.png",
"https://static.wixstatic.com/media/990059_45c15098a4cd468bb58cd67bb0ec8ddd~mv2.png",
"https://static.wixstatic.com/media/990059_079cbe0471204f59bc373fca7ed5bb8a~mv2.png",
"https://static.wixstatic.com/media/990059_034576676e974d128a6af3b901050979~mv2.png",
"https://static.wixstatic.com/media/990059_7c98bbc20aab4bccafb8729ce192c67f~mv2.png",
"https://static.wixstatic.com/media/990059_bc3de2f513594c86917b0e2326efcf8a~mv2.png",
"https://static.wixstatic.com/media/990059_79a921a872224dc7b6d04de5c55bda2b~mv2.png",
"https://static.wixstatic.com/media/990059_5f395576e10d4fbf8c7379f7ea89d6d4~mv2.png",
"https://static.wixstatic.com/media/990059_d0a92839ce0049c1aa89b97943d394d1~mv2.png",
"https://static.wixstatic.com/media/990059_08ef2737f12c4b31b89ea2a1651eb6e1~mv2.png",
"https://static.wixstatic.com/media/990059_281fd072e0e04f4e8cf1569188b8a30a~mv2.png",
"https://static.wixstatic.com/media/990059_395b8ec40a6945579ff1a493ab9483ac~mv2.png"

]
},

{
name: "Zulu",
urls: [

"https://static.wixstatic.com/media/990059_ebcddfd98c1e4dc0b62ae280d13400d4~mv2.png",
"https://static.wixstatic.com/media/990059_fb28597b3e934901b24ea56c70cd251e~mv2.png",
"https://static.wixstatic.com/media/990059_4dc9f12ccdc444f6b513c3ef52daee78~mv2.png",
"https://static.wixstatic.com/media/990059_e40835c13c4a44e0a14736238061a772~mv2.png",
"https://static.wixstatic.com/media/990059_0a9b16bed516447094cc67917789195d~mv2.png",
"https://static.wixstatic.com/media/990059_b52f919a40d24c8b9a34ab71888ca857~mv2.png",
"https://static.wixstatic.com/media/990059_15b6a3bc8e84440d9583d1b83e3d598c~mv2.png",
"https://static.wixstatic.com/media/990059_0bfcc3bb23bc4c8b9b37acdaf3e6b2d6~mv2.png",
"https://static.wixstatic.com/media/990059_8ebfac4726aa43f48c2374d7fb6bc70c~mv2.png",
"https://static.wixstatic.com/media/990059_5e9a398270f24cca981a1b7a98b25e65~mv2.png",
"https://static.wixstatic.com/media/990059_b6f2f99e235444e98295484404827f3b~mv2.png",
"https://static.wixstatic.com/media/990059_0376999057424754a2b98167ec6a6f99~mv2.png",
"https://static.wixstatic.com/media/990059_b5a6a1789b6f4edf80a187e580181b68~mv2.png",
"https://static.wixstatic.com/media/990059_8f8f53abd6bb49e8977b51ca7a72a6d8~mv2.png",
"https://static.wixstatic.com/media/990059_5263a42c53764f85810b51e49509a481~mv2.png",
"https://static.wixstatic.com/media/990059_9626fa28ca104b3981ac427f911bd124~mv2.png",
"https://static.wixstatic.com/media/990059_c6d1ba9e3e59474d9e4613104727c664~mv2.png",
"https://static.wixstatic.com/media/990059_02fad7d56aa34422a2f2f5009d79c6ee~mv2.png",
"https://static.wixstatic.com/media/990059_e5f3629b5b2a4fb58b3fcb6d66db0656~mv2.png",
"https://static.wixstatic.com/media/990059_ce84e83c7cf64054ab9a3d14a8727eee~mv2.png",
"https://static.wixstatic.com/media/990059_70703e8f4eb2400bb3a2794a9d2b30a1~mv2.png",
"https://static.wixstatic.com/media/990059_7bb16089e07b4a87824ee66326eec83d~mv2.png",
"https://static.wixstatic.com/media/990059_3741222f3ad044869262fc8a3de0f2a9~mv2.png",
"https://static.wixstatic.com/media/990059_b5ea812823a1417880ed7957c8d869ff~mv2.png",
"https://static.wixstatic.com/media/990059_c82cda1fbd024e73bf3ebc202ca98f1e~mv2.png",
"https://static.wixstatic.com/media/990059_dea51e1b23aa4d37961a76d4167be966~mv2.png",
"https://static.wixstatic.com/media/990059_82ddb672dfca4aaaa506708a8e81136f~mv2.png",
"https://static.wixstatic.com/media/990059_b9cd82b4f836457e84aaf7bdf6855909~mv2.png",
"https://static.wixstatic.com/media/990059_b1a74d918acf41c0ba210ea84572f089~mv2.png",
"https://static.wixstatic.com/media/990059_e7c337369b8f440ca612b1d4092b78e2~mv2.png",
"https://static.wixstatic.com/media/990059_bf7b64bb50804119ab5b14b9e1c7c6ce~mv2.png",
"https://static.wixstatic.com/media/990059_5d7ef870b2f4406c8601f64d5b4e2d0c~mv2.png",
"https://static.wixstatic.com/media/990059_f7d42b9e0fd7488ba09fd62a84a03cbc~mv2.png",
"https://static.wixstatic.com/media/990059_3580839d05684e54a4ee289c790e30ea~mv2.png",
"https://static.wixstatic.com/media/990059_a7766ba179fc42728328c6e273d3dcd0~mv2.png"

]
},
            
        ];

const spinBtn = document.getElementById("spin-sticker-btn");

        const canvas = document.getElementById('canvas-container');
        const addStickerBtn = document.getElementById('add-sticker-btn');
        const undoBtn = document.getElementById('undo-btn');
        const redoBtn = document.getElementById('redo-btn');
        const swatch = document.querySelector('.color-swatch');
        const colorPicker = document.getElementById('color-picker');
                const newBtn = document.getElementById('new-btn');


        const colorPalette = document.getElementById('color-palette');
        const history = [];

        const stickerPickerBtn = document.getElementById('sticker-picker-btn');
        const groupOverlayContainer = document.getElementById('group-overlay-container');
        const stickerOverlayContainer = document.getElementById('sticker-overlay-container');

        let bucketMode = false;
        let activeSticker = null;
        let activePaletteSticker = null;
        let selectedColor = null;
        let isRestoring = false;
        let redoStack = [];

        let initialX, initialY, offsetX, offsetY;
        let initialTouchDistance = 0;
        let initialStickerWidth = 0;
        let initialStickerHeight = 0;

        let initialCenter = {
            x: 0,
            y: 0
        };
        let firstStickerAdded = false;

       const colors = [
    // Skin tones
    '#8d5524', '#c68642', '#e0ac69', '#f1c27d', '#ffdbac',

    // Reds
    '#FF0000', '#FF6347', '#D2691E', '#CD5C5C', '#800020', // burgundy added

    // Oranges & Yellows
    '#FFA500', '#FF8C00', '#FFD700', '#FFFF00', '#FFC04C', '#a67c00', 
    '#FF7F50', // coral
    '#DAA520', // goldenrod
    '#C2B280', // sand beige

    // Greens
    '#008000', '#3CB371', '#9ACD32', '#ADFF2F',
    '#013220', // deep forest green
    '#808000', // olive green

    // Blues
    '#0000FF', '#4169E1', '#1E90FF', '#87CEFA',
    '#000080', // navy
    '#008080', // teal
    '#40E0D0', // turquoise

    // Purples
    '#800080', '#4B0082', '#BA55D3', '#DA70D6',

    // Pinks & Browns
    '#FFC0CB', '#FF69B4', '#FA8072', '#A52A2A', '#8B4513',

    // Grays & Neutrals
    '#C0C0C0', '#808080', 
    '#A9A9A9', // dark gray / stone gray

    // Brights
    '#ff71ce', '#01cdfe', '#05ffa1', '#b967ff', '#fffb96',

    // Pastels
    '#ffb3ba', '#ffdfba', '#ffffba', '#baffc9', '#bae1ff',
    '#ffdef2', '#f2e2ff', '#e2eeff', '#ddfffc', '#ffffe3'
];


     
        function setBucketMode(enabled) {
            bucketMode = enabled;
            if (bucketMode) {
                document.body.classList.add('bucket-active');
                canvas.style.cursor = 'crosshair';
                document.querySelectorAll('.color-swatch').forEach(swatch => {
                    swatch.draggable = false;
                });
            } else {
                document.body.classList.remove('bucket-active');
                canvas.style.cursor = 'default';
                document.querySelectorAll('.color-swatch').forEach(swatch => {
                    swatch.draggable = true;
                });
            }
        }

function saveState() {
    if (isRestoring) return;
    const stickersOnCanvas = document.querySelectorAll('#canvas-container .sticker');
    const currentState = { stickers: [] };

    stickersOnCanvas.forEach(sticker => {
        const stickerImg = sticker.querySelector('img');
        if (stickerImg) {
            currentState.stickers.push({
                url: stickerImg.src,
                x: sticker.offsetLeft,
                y: sticker.offsetTop,
                width: sticker.offsetWidth,
                height: sticker.offsetHeight,
                locked: sticker.classList.contains('locked'),
                // ✅ Add the group name here
                groupName: sticker.dataset.group 
            });
        }
    });

    const prevState = history[history.length - 1];
    if (JSON.stringify(prevState) !== JSON.stringify(currentState)) {
        history.push(currentState);
    }

    redoStack = [];
    updateUndoRedoButtons();
}

function loadState(state) {
    isRestoring = true;
    canvas.innerHTML = '';
    state.stickers.forEach(data => {
        // ✅ Change 'groupName' to 'group' to match the addSticker function's parameter name
        const newSticker = addSticker(data.url, data.x, data.y, data.width, data.height, {
            suppressSave: true,
            group: data.groupName 
        });
        if (data.locked) {
            newSticker.classList.add('locked');
        }
    });
    isRestoring = false;
    updateUndoRedoButtons();
}
        function deselectAllStickers() {
            document.querySelectorAll('.sticker').forEach(s => {
                s.classList.remove('selected');
            });
        }

        function getTouchDistance(touches) {
            const dx = touches[0].clientX - touches[1].clientX;
            const dy = touches[0].clientY - touches[1].clientY;
            return Math.sqrt(dx * dx + dy * dy);
        }

   
 function getRandomStickerUrlFromGroups() {
    if (!stickerGroups || stickerGroups.length === 0) {
        console.log("⚠️ No stickerGroups available");
        return null;
    }

    // First, flatten the groups into a single array of objects
    const allStickersWithGroups = stickerGroups.flatMap(group =>
        group.urls.map(url => ({ url: url, group: group.name }))
    );

    if (allStickersWithGroups.length === 0) {
        console.log("⚠️ No stickers in groups");
        return null;
    }

    // Now, select a random object from the new flattened array
    const randomIndex = Math.floor(Math.random() * allStickersWithGroups.length);
    const chosenSticker = allStickersWithGroups[randomIndex];

    // Return the object containing both url and group
    return chosenSticker;
}

spinBtn.addEventListener("click", () => {
    console.log("🎰 Spin button clicked");

    const allStickers = document.querySelectorAll('.sticker');
    let targetStickerDiv = null;

    // Check if there are any stickers on the canvas
    if (allStickers.length === 0) {
        // If the canvas is empty, add a new random sticker
        console.log("ℹ️ Canvas is empty, adding a new sticker.");
        const randomStickerData = getRandomStickerUrlFromGroups();
        if (randomStickerData) {
            addSticker(randomStickerData.url, 120, 120, 120, 120, { 
                group: randomStickerData.group, 
                letter: randomStickerData.letter 
            });
            targetStickerDiv = document.querySelector('.sticker'); // Select the newly added sticker
        }
    } else {
        // If stickers exist, find the first unlocked one
        targetStickerDiv = document.querySelector('.sticker:not(.locked)');
        
        // If all stickers are locked, add a new unlocked one
        if (!targetStickerDiv) {
            console.log("ℹ️ All stickers are locked, adding a new one.");
            const randomStickerData = getRandomStickerUrlFromGroups();
            if (randomStickerData) {
                addSticker(randomStickerData.url, 120, 120, 120, 120, { 
                    group: randomStickerData.group, 
                    letter: randomStickerData.letter 
                });
                targetStickerDiv = document.querySelector('.sticker:not(.locked)');
            }
        }
    }
    
    // Check one more time to ensure a target sticker exists before spinning
    if (!targetStickerDiv) {
        console.warn("⚠️ No unlocked sticker found and couldn't create one. Aborting spin.");
        return;
    }
    
    // Now perform the spin logic on the 'targetStickerDiv'
    const stickerImg = targetStickerDiv.querySelector('img');
    const stickerSize = targetStickerDiv.offsetWidth;
    const canvasWidth = canvas.offsetWidth;
    const canvasHeight = canvas.offsetHeight;
    const centerX = (canvasWidth / 2) - (stickerSize / 2);
    const centerY = (canvasHeight / 2) - (stickerSize / 2);
    
    // Move the sticker to the center of the canvas before spinning
    targetStickerDiv.style.left = `${centerX}px`;
    targetStickerDiv.style.top = `${centerY}px`;
    
    let spinCount = 0;
    const maxSpins = 15 + Math.floor(Math.random() * 10);
    const spinInterval = setInterval(() => {
        const nextStickerData = getRandomStickerUrlFromGroups();
        if (nextStickerData) {
            stickerImg.src = nextStickerData.url;
            targetStickerDiv.dataset.group = nextStickerData.group;
            targetStickerDiv.dataset.letter = nextStickerData.letter;
        }

        spinCount++;
        if (spinCount >= maxSpins) {
            clearInterval(spinInterval);
            targetStickerDiv.classList.add('pulse-effect');
            saveState();
        }
    }, 100);
});

function addSticker(url, x, y, width = 200, height = 200, opts = {}) {
    const { suppressSave = false, group } = opts;

    const sticker = document.createElement('div');
    const groupName = group || 'default';
    sticker.dataset.group = groupName;
    console.log('[addSticker] Creating sticker with group:', groupName);

    sticker.classList.add('sticker');
    sticker.style.width = width + 'px';
    sticker.style.height = height + 'px';

    const stickerImg = document.createElement('img');
    stickerImg.crossOrigin = "Anonymous";
    stickerImg.src = url;
    stickerImg.draggable = false;
    stickerImg.classList.add("protected");
    sticker.appendChild(stickerImg);

    if (x !== undefined && y !== undefined) {
        sticker.style.left = `${x}px`;
        sticker.style.top = `${y}px`;
    }

    // --- Interaction and Event Listener Variables ---
    let activeSticker = null;
    let initialX, initialY, offsetX, offsetY;
    let initialPinchDistance = 0;
    let initialStickerWidth = 0;
    let initialStickerHeight = 0;
    let initialRect = null;

    // --- Interaction Buttons and Handlers ---
    const copyBtn = document.createElement('div');
    copyBtn.classList.add('copy-btn');
    copyBtn.innerHTML = `<svg class="copy-btn-icon" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
<line x1="12" y1="8" x2="12" y2="16" />
<line x1="8" y1="12" x2="16" y2="12" />
</svg>`;
    copyBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        const stickerWidth = sticker.offsetWidth;
        const stickerHeight = sticker.offsetHeight;
        let newX = parseInt(sticker.style.left) + 10;
        let newY = parseInt(sticker.style.top) + 10;

        function isOverlapping(x, y) {
            const stickers = document.querySelectorAll('.sticker');
            return Array.from(stickers).some(s => {
                const sx = parseInt(s.style.left);
                const sy = parseInt(s.style.top);
                const sw = s.offsetWidth;
                const sh = s.offsetHeight;
                return !(x + stickerWidth < sx || x > sx + sw || y + stickerHeight < sy || y > sy + sh);
            });
        }
        const step = 10;
        let attempts = 0;
        while (isOverlapping(newX, newY) && attempts < 100) {
            newX += step;
            newY += step;
            if (newX + stickerWidth > canvas.offsetWidth) newX = step;
            if (newY + stickerHeight > canvas.offsetHeight) newY = step;
            attempts++;
        }
        saveState();
addSticker(
    stickerImg.src,
    newX,
    newY,
    sticker.offsetWidth,
    sticker.offsetHeight,
    { group: sticker.dataset.group }
);   
 });

    const deleteBtn = document.createElement('div');
    deleteBtn.classList.add('delete-btn');
    deleteBtn.innerHTML = `<svg class="delete-btn-icon" viewBox="0 0 24 24">
<line x1="5" y1="12" x2="19" y2="12" stroke="white" stroke-width="1" />
</svg>`;
    deleteBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        saveState();
        sticker.remove();
    });

    const lockBtn = document.createElement('div');
    lockBtn.classList.add('lock-btn');
    lockBtn.innerHTML = `<svg class="lock-btn-icon" data-lucide="lock" viewBox="0 0 24 24">
<rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
<path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
</svg>`;
lockBtn.addEventListener('click', (e) => {
    // Prevent the click event from bubbling up and affecting the canvas or sticker
    e.stopPropagation();

    // Find the closest parent element with the class 'sticker'
    const sticker = e.target.closest('.sticker');

    if (sticker) {
        // This line toggles the 'locked' class on the sticker.
        sticker.classList.toggle('locked');
        
        // This is a good practice to ensure the sticker is no longer "selected"
        // if it was, which helps manage button visibility after the lock/unlock action.
        sticker.classList.remove('selected');

        // Save the state of the canvas after the change
        saveState();
    }
});

    sticker.appendChild(deleteBtn);
    sticker.appendChild(copyBtn);
    sticker.appendChild(lockBtn);

const groupBtn = document.createElement('div');
groupBtn.classList.add('sticker-btn', 'group-btn');
groupBtn.innerHTML = `
<svg class="group-btn-icon" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
  <path d="M4 6h16M4 12h16M4 18h16"/>
</svg>`;


// On click, open overlay with this sticker's group
groupBtn.addEventListener('click', (e) => {
    e.stopPropagation();
    const stickerGroup = sticker.dataset.group;
    const group = stickerGroups.find(g => g.name === stickerGroup);
    if (group) {
        // Pass both the URLs and the group name
        showStickerOverlay(group.urls, group.name); 
    }
});

sticker.appendChild(groupBtn);

   function startInteraction(e) {
 if (e.target.closest('.delete-btn, .copy-btn, .lock-btn, .group-btn')) return;

    if (bucketMode && (!e.touches || e.touches.length < 2)) {
        return;
    }

    activeSticker = sticker;
    deselectAllStickers();
    sticker.classList.add('selected');
    saveState();

    if (e.touches && e.touches.length === 2) {
        // Two-finger gesture (resizing)
        e.preventDefault(); 
        const touch1 = e.touches[0];
        const touch2 = e.touches[1];
        initialPinchDistance = Math.hypot(touch2.clientX - touch1.clientX, touch2.clientY - touch1.clientY);
        initialStickerWidth = sticker.offsetWidth;
        initialStickerHeight = sticker.offsetHeight;
        initialRect = sticker.getBoundingClientRect();
        
        document.addEventListener('touchmove', handleMove, { passive: false });
    } else if (e.touches && e.touches.length === 1) {
        // Single-finger gesture (dragging)
        const touch = e.touches[0];
        initialX = touch.clientX;
        initialY = touch.clientY;
        offsetX = sticker.offsetLeft;
        offsetY = sticker.offsetTop;
        
        document.addEventListener('touchmove', handleMove, { passive: false });
    } else {
        // Mouse interaction (dragging)
        initialX = e.clientX;
        initialY = e.clientY;
        offsetX = sticker.offsetLeft;
        offsetY = sticker.offsetTop;
        
        document.addEventListener('mousemove', handleMove);
    }

    document.addEventListener('mouseup', handleEnd);
    document.addEventListener('touchend', handleEnd);
}

function handleMove(e) {
    if (!activeSticker) return;

    if (e.touches && e.touches.length === 2) {
        e.preventDefault();
        
        const touch1 = e.touches[0];
        const touch2 = e.touches[1];
        const currentPinchDistance = Math.hypot(touch2.clientX - touch1.clientX, touch2.clientY - touch1.clientY);
        
        const scaleFactor = currentPinchDistance / initialPinchDistance;
        const newWidth = initialStickerWidth * scaleFactor;
        const newHeight = initialStickerHeight * scaleFactor;
        const minSize = 30;

        if (newWidth >= minSize) {
            const isShrinking = newWidth < initialStickerWidth;
            const canvasRect = canvas.getBoundingClientRect();
            let adjustedLeft = initialRect.left;
            let adjustedTop = initialRect.top;

            if (isShrinking) {
                const widthDiff = initialStickerWidth - newWidth;
                const heightDiff = initialStickerHeight - newHeight;
                adjustedLeft = initialRect.left + widthDiff / 2;
                adjustedTop = initialRect.top + heightDiff / 2;

                if (adjustedLeft < canvasRect.left) adjustedLeft = canvasRect.left;
                if (adjustedTop < canvasRect.top) adjustedTop = canvasRect.top;
                if (adjustedLeft + newWidth > canvasRect.right) adjustedLeft = canvasRect.right - newWidth;
                if (adjustedTop + newHeight > canvasRect.bottom) adjustedTop = canvasRect.bottom - newHeight;
            } else {
                const widthDiff = newWidth - initialStickerWidth;
                const heightDiff = newHeight - initialStickerHeight;
                adjustedLeft = initialRect.left - widthDiff / 2;
                adjustedTop = initialRect.top - heightDiff / 2;
            }

            activeSticker.style.width = `${newWidth}px`;
            activeSticker.style.height = `${newHeight}px`;
            activeSticker.style.left = `${adjustedLeft - canvasRect.left}px`;
            activeSticker.style.top = `${adjustedTop - canvasRect.top}px`;
        }
    } else if (!bucketMode && (!e.touches || e.touches.length === 1)) {
        const clientX = e.touches ? e.touches[0].clientX : e.clientX;
        const clientY = e.touches ? e.touches[0].clientY : e.clientY;
        
        // Directly calculate the new position based on the move event
        const dx = clientX - initialX;
        const dy = clientY - initialY;
        
        activeSticker.style.left = `${offsetX + dx}px`;
        activeSticker.style.top = `${offsetY + dy}px`;
    }
}

function handleEnd() {
    // Remove event listeners
    document.removeEventListener('mousemove', handleMove);
    document.removeEventListener('mouseup', handleEnd);
    document.removeEventListener('touchmove', handleMove);
    document.removeEventListener('touchend', handleEnd);

    // Remove the .selected class from the active sticker
    if (activeSticker) {
        activeSticker.classList.remove('selected');
    }

    // Reset state variables
    activeSticker = null;
    initialRect = null;
    initialTouchDistance = 0;
    initialStickerWidth = 0;
    initialStickerHeight = 0;
    
    saveState();
}

    // --- Event Listeners ---
    sticker.addEventListener('mousedown', startInteraction);
    sticker.addEventListener('touchstart', startInteraction);

    sticker.addEventListener('wheel', (e) => {
        // Desktop Resizing Logic
        e.preventDefault();
        saveState();
        const parent = sticker;
        const delta = Math.sign(e.deltaY);
        const initialRect = parent.getBoundingClientRect();
        const initialWidth = initialRect.width;
        const initialHeight = initialRect.height;
        const newSize = initialWidth + (delta * 10);
        const minSize = 30;

        if (newSize >= minSize) {
            const newHeight = newSize / (initialWidth / initialHeight);
            const canvasRect = canvas.getBoundingClientRect();
            let adjustedLeft = initialRect.left;
            let adjustedTop = initialRect.top;
            const isShrinking = newSize < initialWidth;

            if (isShrinking) {
                adjustedLeft = initialRect.left + (initialWidth / 2) - (newSize / 2);
                adjustedTop = initialRect.top + (initialHeight / 2) - (newHeight / 2);

                if (adjustedLeft < canvasRect.left) adjustedLeft = canvasRect.left;
                if (adjustedTop < canvasRect.top) adjustedTop = canvasRect.top;
                if (adjustedLeft + newSize > canvasRect.right) adjustedLeft = canvasRect.right - newSize;
                if (adjustedTop + newHeight > canvasRect.bottom) adjustedTop = canvasRect.bottom - newHeight;
            } else {
                adjustedLeft = initialRect.left - (newSize - initialWidth) / 2;
                adjustedTop = initialRect.top - (newHeight - initialHeight) / 2;
            }

            parent.style.width = `${newSize}px`;
            parent.style.height = `${newHeight}px`;
            parent.style.left = `${adjustedLeft - canvasRect.left}px`;
            parent.style.top = `${adjustedTop - canvasRect.top}px`;
            saveState();
        }
    });

    stickerImg.addEventListener('click', (e) => {
        if (bucketMode && selectedColor) {
            e.stopPropagation();
            const rect = sticker.getBoundingClientRect();
            const clickX = Math.floor((e.clientX - rect.left) * (stickerImg.naturalWidth / rect.width));
            const clickY = Math.floor((e.clientY - rect.top) * (stickerImg.naturalHeight / rect.height));
            recolorSticker(stickerImg, selectedColor, clickX, clickY);
        }
    });

    const updateButtonSizes = () => {
        const btnSize = sticker.offsetWidth * 0.2;
        [deleteBtn, copyBtn, lockBtn, groupBtn].forEach(btn => {
            btn.style.width = btnSize + 'px';
            btn.style.height = btnSize + 'px';
        });
        deleteBtn.style.top = deleteBtn.style.right = `${btnSize * 0.25}px`;
        copyBtn.style.top = copyBtn.style.left = `${btnSize * 0.25}px`;
         lockBtn.style.bottom = lockBtn.style.left = `${btnSize * 0.25}px`;
        groupBtn.style.bottom = groupBtn.style.right = `${btnSize * 0.25}px`;
    };

    updateButtonSizes();
    const observer = new ResizeObserver(updateButtonSizes);
    observer.observe(sticker);
    canvas.appendChild(sticker);

    if (window.lucide) {
        lucide.createIcons();
    }

    if (!suppressSave && !isRestoring) {
        saveState();
    }

    return sticker;
}

     
    
        function hexToRgb(hex) {
            hex = hex.replace(/^#/, "");
            const bigint = parseInt(hex, 16);
            return [(bigint >> 16) & 255, (bigint >> 8) & 255, bigint & 255];
        }

  
        function recolorSticker(stickerImg, fillColor, clickX, clickY) {
    const canvasEl = document.createElement("canvas");
    const ctx = canvasEl.getContext("2d", { willReadFrequently: true });
    canvasEl.width = stickerImg.naturalWidth;
    canvasEl.height = stickerImg.naturalHeight;
    ctx.drawImage(stickerImg, 0, 0);

    const imgData = ctx.getImageData(0, 0, canvasEl.width, canvasEl.height);
    const data = imgData.data;
    const { width, height } = canvasEl;


    // --- Inlined helper functions for performance ---
    const blackThreshold = 30;
    const tolerance = 30;

    const startIndex = (clickY * width + clickX) * 4;
    const targetColor = [
        data[startIndex],
        data[startIndex + 1],
        data[startIndex + 2],
        data[startIndex + 3]
    ];
    
    // Early exit if the clicked pixel is a border
    if (targetColor[3] > 0 && targetColor[0] < blackThreshold && targetColor[1] < blackThreshold && targetColor[2] < blackThreshold) {
        return; 
    }

    const visited = new Uint8Array(width * height);
    let touchesEdge = false;

    const stack = [[clickX, clickY]];

    // --- OPTIMIZATION 1: Run synchronously in a single loop ---
    while (stack.length) {
        let [x, y] = stack.pop();

        let left = x;
        while (left >= 0 && !visited[y * width + left] && isFillable(left, y)) {
            left--;
        }
        left++;

        let right = x;
        while (right < width && !visited[y * width + right] && isFillable(right, y)) {
            right++;
        }
        right--;

        // Fill the span
        for (let i = left; i <= right; i++) {
            const idx = y * width + i;
            visited[idx] = 1;
            const dataIndex = idx * 4;

            if (isEraser) {
                data[dataIndex + 3] = 0;
            } else {
                data[dataIndex] = r;
                data[dataIndex + 1] = g;
                data[dataIndex + 2] = b;
                data[dataIndex + 3] = 255;
            }

            if (i === 0 || i === width - 1 || y === 0 || y === height - 1) {
                touchesEdge = true;
            }
        }

        // --- OPTIMIZATION 2: Efficiently find and add new scanlines ---
        scan(y - 1, left, right); // Scan row above
        scan(y + 1, left, right); // Scan row below
    }

    // Helper to check if a pixel should be filled
    function isFillable(px, py) {
        if (px < 0 || px >= width || py < 0 || py >= height) return false;
        
        const idx = (py * width + px) * 4;
        const R = data[idx];
        const G = data[idx + 1];
        const B = data[idx + 2];
        const A = data[idx + 3];

        // Check if it's a border pixel
        if (A > 0 && R < blackThreshold && G < blackThreshold && B < blackThreshold) {
            return false;
        }

        // Check if it matches the target color
        return (
            Math.abs(R - targetColor[0]) <= tolerance &&
            Math.abs(G - targetColor[1]) <= tolerance &&
            Math.abs(B - targetColor[2]) <= tolerance &&
            Math.abs(A - targetColor[3]) <= tolerance
        );
    }
    
    // Helper to find new spans to add to the stack
    function scan(y, lx, rx) {
        if (y < 0 || y >= height) return;
        for (let x = lx; x <= rx; x++) {
            if (!visited[y * width + x] && isFillable(x, y)) {
                // We found a new, uncolored span. Push it and skip the rest of this span.
                stack.push([x, y]);
                // Fast-forward past the rest of this colored span
                while (x <= rx && isFillable(x, y)) {
                    x++;
                }
            }
        }
    }

    if (!touchesEdge) {
        ctx.putImageData(imgData, 0, 0);
        stickerImg.src = canvasEl.toDataURL();
       saveState(); 
    }
}


        function updateUndoRedoButtons() {
            undoBtn.disabled = history.length <= 1;
            redoBtn.disabled = redoStack.length === 0;
        }


        undoBtn.addEventListener('click', () => {
            if (history.length > 1) {
                const lastState = history.pop();
                redoStack.push(lastState); // 👈 save for redo
                loadState(history[history.length - 1]);
                updateUndoRedoButtons();
            }
        });

        redoBtn.addEventListener('click', () => {
            if (redoStack.length > 0) {
                const nextState = redoStack.pop();
                history.push(nextState);
                loadState(nextState);
                updateUndoRedoButtons();
            }
        });

function addOrReplaceSticker(newUrl, groupName = null) {
    const unlockedSticker = document.querySelector('.sticker:not(.locked)');
    const stickerSize = 120;
    const canvasWidth = canvas.offsetWidth;
    const canvasHeight = canvas.offsetHeight;
    const centerX = (canvasWidth / 2) - (stickerSize / 2);
    const centerY = (canvasHeight / 2) - (stickerSize / 2);

    if (unlockedSticker) {
        const stickerImg = unlockedSticker.querySelector('img');
        stickerImg.src = newUrl;

        unlockedSticker.style.width = `${stickerSize}px`;
        unlockedSticker.style.height = `${stickerSize}px`;
        unlockedSticker.style.left = `${centerX}px`;
        unlockedSticker.style.top = `${centerY}px`;

        // ✅ Keep existing group or assign new one
        if (groupName) {
            unlockedSticker.dataset.group = groupName;
        } else if (!unlockedSticker.dataset.group) {
            unlockedSticker.dataset.group = stickerGroups[0]?.name || 'default';
        }

        stickerImg.onload = () => {
            unlockedSticker.style.opacity = '1';
        };

        console.log('[addOrReplaceSticker] Replaced sticker group:', unlockedSticker.dataset.group);
    } else {
        const newGroup = groupName || stickerGroups[0]?.name || 'default';
        addSticker(newUrl, centerX, centerY, stickerSize, stickerSize, { group: newGroup });
        console.log('[addOrReplaceSticker] Created new sticker with group:', newGroup);
    }

    saveState();
}

addStickerBtn.addEventListener('click', () => {
    // Find a random group first
    const randomGroup = stickerGroups[Math.floor(Math.random() * stickerGroups.length)];
    // Find a random URL from that group
    const randomUrl = randomGroup.urls[Math.floor(Math.random() * randomGroup.urls.length)];

    // Pass both the URL AND the group name to the function
    addOrReplaceSticker(randomUrl, randomGroup.name);
});

    newBtn.addEventListener('click', () => {
    // Clear the canvas
    canvas.innerHTML = '';
    
    // Add the empty state to the history
    // This allows the user to undo the "new" action.
    saveState();
    
    // Reset any other relevant flags
    firstStickerAdded = false;
});
        

window.addEventListener('load', () => {
    if (window.lucide) {
        lucide.createIcons();
    }
    updateCanvasDrop();
    const allStickers = document.querySelectorAll('.sticker');
    if (allStickers.length === 0) {
        const randomStickerData = getRandomStickerUrlFromGroups();
        if (randomStickerData) {
            // Pass the URL from the object to the function
            addOrReplaceSticker(randomStickerData.url, randomStickerData.group);
        }
    }
});

        let isDragging = false;
        let startX;
        let scrollLeft;
        let isSwiping = false;
        let initialTap = {
            clientX: 0
        };

        function addSwipeFunctionality() {
            const paletteContainer = document.querySelector('.color-palette-container');
            const palette = document.querySelector('.color-palette');

            const handleStart = (e) => {
                isDragging = true;
                startX = e.type.includes('mouse') ? e.pageX - paletteContainer.offsetLeft : e.touches[0].clientX;
                scrollLeft = paletteContainer.scrollLeft;
                initialTap.clientX = e.type.includes('mouse') ? e.clientX : e.touches[0].clientX;
            };

            const handleMove = (e) => {
                if (!isDragging) return;
                e.preventDefault();
                const x = e.type.includes('mouse') ? e.pageX - paletteContainer.offsetLeft : e.touches[0].clientX;
                const walk = (x - startX) * 1.5;
                paletteContainer.scrollLeft = scrollLeft - walk;
                if (Math.abs(e.clientX - initialTap.clientX) > 10) {
                    isSwiping = true;
                }
            };

            const handleEnd = () => {
                isDragging = false;
                setTimeout(() => {
                    isSwiping = false;
                }, 100);
            };

            [paletteContainer, palette].forEach(element => {
                element.addEventListener('mousedown', handleStart);
                element.addEventListener('mousemove', handleMove);
                element.addEventListener('mouseup', handleEnd);
                element.addEventListener('mouseleave', handleEnd);

                element.addEventListener('touchstart', handleStart);
                element.addEventListener('touchmove', handleMove, {
                    passive: false
                });
                element.addEventListener('touchend', handleEnd);
            });
        }

        function populateColorPalette() {
            colorPalette.innerHTML = '';
            colors.forEach(color => {
                const swatch = document.createElement('div');
                swatch.classList.add('color-swatch');
                swatch.style.backgroundColor = color;
                if (color === selectedColor) {
                    swatch.classList.add('active');
                }
                swatch.addEventListener('click', (e) => {
                    if (isSwiping) {
                        return;
                    }
                    const wasActive = swatch.classList.contains('active');

                    document.querySelectorAll('.color-swatch').forEach(s => s.classList.remove('active'));

                    if (!wasActive) {
                        swatch.classList.add('active');
                        selectedColor = color;
                        setBucketMode(true);
                    } else {
                        selectedColor = null;
                        setBucketMode(false);
                    }
                });
                colorPalette.appendChild(swatch);
            });
        }

        function hideOverlays() {

            groupOverlayContainer.style.display = 'none';
            stickerOverlayContainer.style.display = 'none';
        }

       function showGroupOverlay() {
    hideOverlays();
    groupOverlayContainer.innerHTML = '';

    // add close button
    const closeBtn = document.createElement('button');
    closeBtn.textContent = '✕';
    closeBtn.classList.add('close-btn');
    closeBtn.addEventListener('click', hideOverlays);
    groupOverlayContainer.appendChild(closeBtn);

    // add group icons
    stickerGroups.forEach(group => {
        const groupIcon = document.createElement('img');
        groupIcon.src = group.urls[0];
        groupIcon.classList.add('overlay-icon');
        groupIcon.title = group.name;

        groupIcon.addEventListener('click', () => {
            // ✅ Pass both the URLs and the group name to the next function
            showStickerOverlay(group.urls, group.name);
        });

        groupOverlayContainer.appendChild(groupIcon);
    });

    // finally: show overlay
    groupOverlayContainer.style.display = 'grid';
}

        function updateCanvasDrop() {
            const canvas = document.getElementById('canvas-container');
            canvas.removeEventListener('dragover', (e) => {
                e.preventDefault();
            });
            canvas.removeEventListener('drop', handleCanvasDrop);
            canvas.addEventListener('drop', handleCanvasDrop);
        }

        function handleCanvasDrop(e) {
            e.preventDefault();
            const data = e.dataTransfer.getData('application/json');
            if (data) {
                const {
                    url,
                    width
                } = JSON.parse(data);
                const rect = canvas.getBoundingClientRect();
                const x = e.clientX - rect.left - (width / 2);
                const y = e.clientY - rect.top - (width / 2);
                saveState();
                addSticker(url, x, y, width);
            }
        }

        let activeTouchSticker = null;
        let touchOffsetX = 0;
        let touchOffsetY = 0;

function showStickerOverlay(urls, groupName) {
    hideOverlays();
    stickerOverlayContainer.innerHTML = '';
 
    // Create the header
    const header = document.createElement('div');
    header.classList.add('overlay-header');
    
    const title = document.createElement('h2');
    title.textContent = groupName;
    title.classList.add('overlay-title');
    header.appendChild(title);
 
    const closeBtn = document.createElement('button');
    closeBtn.textContent = '✕';
    closeBtn.classList.add('close-btn');
    closeBtn.addEventListener('click', hideOverlays);
    header.appendChild(closeBtn);
 
    // Create the sticker grid wrapper
    const contentWrapper = document.createElement('div');
    contentWrapper.classList.add('overlay-stickers-grid');
 
    urls.forEach(url => {
        const sticker = document.createElement('img');
        sticker.src = url;
        sticker.classList.add('overlay-sticker');

  // ✅ Add the contextmenu event listener here
    sticker.addEventListener('contextmenu', (e) => {
        e.preventDefault();
    });

        sticker.addEventListener('click', () => {
            const group = stickerGroups.find(g => g.urls.includes(url));
            addOrReplaceSticker(url, group ? group.name : null);
            hideOverlays();
        });
        contentWrapper.appendChild(sticker);
    });
 
    // Append children to the main container
    stickerOverlayContainer.appendChild(header);
    stickerOverlayContainer.appendChild(contentWrapper);
 
    // Finally: show the overlay with a flex display
    stickerOverlayContainer.style.display = 'flex'; // <-- This is the fix!
}

        stickerPickerBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            if (groupOverlayContainer.style.display === 'grid') {
                hideOverlays();
            } else {
                showGroupOverlay();
            }
        });

        document.addEventListener('click', (e) => {
            if (!groupOverlayContainer.contains(e.target) && !stickerOverlayContainer.contains(e.target) && !stickerPickerBtn.contains(e.target)) {
                hideOverlays();
            }
        });

        canvas.addEventListener('dragover', (e) => {
            e.preventDefault();
        });

        canvas.addEventListener('drop', (e) => {
            e.preventDefault();
            const data = e.dataTransfer.getData('application/json');
            if (data) {
                const {
                    url,
                    width
                } = JSON.parse(data);
                const rect = canvas.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                saveState();
                addSticker(url, x, y, width);
            }
        });

        addSwipeFunctionality();
        saveState();
      
document.addEventListener("contextmenu", function(e) {
  if (e.target.tagName === "IMG" && e.target.classList.contains("protected")) {
    e.preventDefault();
  }
}, false);

        
    </script>
</body>
</html>
