<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Drawing Pad</title>
    <!-- Inter font -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap">
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        @media (max-width: 640px) {
            #canvas-container {
                display: none;
            }
            #mobile-warning {
                display: block;
            }
        }
    </style>
</head>
<body class="bg-blue-50 transition-colors duration-500">

<div class="flex flex-col items-start justify-start min-h-screen p-4">

    <!-- Mobile warning -->
    <div id="mobile-warning" class="hidden text-center max-w-sm mx-auto p-6 bg-yellow-100 text-yellow-800 border border-yellow-300 rounded-lg shadow-md">
        <h2 class="text-xl font-bold mb-2">Notice</h2>
        <p>This drawing application is best viewed and used on a desktop or tablet.</p>
    </div>

    <div id="drawing-app-container" class="w-full max-w-4xl mx-auto p-6 bg-white rounded-2xl shadow-xl space-y-6">
        <h1 class="text-3xl sm:text-4xl font-extrabold text-center text-gray-800 mb-2">Simple Drawing Pad</h1>

        <!-- Canvas container -->
        <div id="canvas-container" class="relative w-full flex justify-center items-center rounded-xl overflow-hidden shadow-inner border-4 border-dashed border-gray-400 p-2">
            
            <!-- Controls -->
            <div class="absolute top-4 left-4 z-10">
                <div class="flex flex-wrap items-center gap-2">

                    <!-- Tools -->
                    <div class="flex items-center space-x-2">
                        <button id="tool-pen" class="focus:outline-none ring-2 ring-blue-500 rounded">
                            <svg id="pen-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="black" class="w-6 h-6">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"/>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m15 5 4 4"/>
                            </svg>
                        </button>
                        <button id="tool-eraser" class="focus:outline-none rounded">
                            <svg id="eraser-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="black" class="w-6 h-6">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 2a2 2 0 0 0-2 2v2H6a4 4 0 0 0-4 4v4h16v-4a4 4 0 0 0-4-4h-2V4a2 2 0 0 0-2-2zM4 14v4a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-4"/>
                            </svg>
                        </button>
                    </div>
                    
                    <!-- Undo -->
                    <button id="undo-btn" class="focus:outline-none disabled:opacity-50">
                        <svg id="undo-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="black" class="w-6 h-6">
                            <polyline points="15 14 10 9 15 4"/>
                            <path d="M20 20h-7a4 4 0 0 1-4-4V4"/>
                        </svg>
                    </button>
                    
                    <!-- Actions -->
                    <div class="flex items-center space-x-2">
                        <button id="toggle-background" class="px-3 py-1 bg-indigo-500 text-white font-semibold rounded-full shadow-md hover:bg-indigo-600 text-sm">
                            <svg id="toggle-icon-sun" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="white" class="w-4 h-4">
                                <circle cx="12" cy="12" r="4"/>
                                <path d="M12 2v2M12 20v2M4 12H2M20 12h2M18.36 5.64l-1.42 1.42M6.08 17.92l-1.42 1.42M18.36 18.36l-1.42-1.42M6.08 6.08l-1.42-1.42"/>
                            </svg>
                            <svg id="toggle-icon-moon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="white" class="w-4 h-4 hidden">
                                <path d="M12 3a9 9 0 0 1 10 9 7 7 0 0 0-7 7c-.6-1.5-.9-3-.9-4.5a.9.9 0 0 0-.9-.9c-1.5 0-3-.3-4.5-.9 0-2.3 1-4.4 2.6-5.8"/>
                            </svg>
                        </button>
                        <button id="clear-canvas">
                            <svg id="new-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="black" class="w-6 h-6">
                                <path d="M3.05 11a9 9 0 1 1 .5 4.9L2.5 22h.5l3.25-3.25A9 9 0 0 1 3.05 11z"/>
                                <path d="M12 2v10"/>
                            </svg>
                        </button>
                        <button id="save-btn">
                            <svg id="save-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="black" class="w-6 h-6">
                                <path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"/>
                                <polyline points="17 21 17 13 7 13 7 21"/>
                                <polyline points="7 3 7 8 15 8"/>
                            </svg>
                        </button>
                    </div>

                </div>
            </div>
            
            <canvas id="drawing-canvas" class="w-full h-[60vh] bg-white cursor-crosshair"></canvas>
        </div>
    </div>
</div>

<script>
const canvas = document.getElementById("drawing-canvas");
const ctx = canvas.getContext("2d");

// Tools & UI
const penToolBtn = document.getElementById("tool-pen");
const eraserToolBtn = document.getElementById("tool-eraser");
const undoBtn = document.getElementById("undo-btn");
const clearBtn = document.getElementById("clear-canvas");
const saveBtn = document.getElementById("save-btn");
const toggleBgBtn = document.getElementById("toggle-background");
const toggleIconSun = document.getElementById("toggle-icon-sun");
const toggleIconMoon = document.getElementById("toggle-icon-moon");

// State
let isDrawing = false;
let lastX = 0, lastY = 0;
let isWhiteBackground = true;
let currentTool = "pen";
let penWidth = 5, eraserWidth = 20;
let drawingHistory = [];
let historyIndex = -1;

// Resize canvas to container
function resizeCanvas() {
    const container = canvas.parentElement;
    const temp = document.createElement("canvas");
    temp.width = canvas.width;
    temp.height = canvas.height;
    temp.getContext("2d").drawImage(canvas, 0, 0);

    canvas.width = container.clientWidth;
    canvas.height = container.clientHeight;

    redraw();
    ctx.drawImage(temp, 0, 0);
}

window.addEventListener("resize", resizeCanvas);
window.addEventListener("load", () => {
    resizeCanvas();
    setActiveTool("pen");
    saveState(); // initial blank state
});

// History
function saveState() {
    const temp = document.createElement("canvas");
    temp.width = canvas.width;
    temp.height = canvas.height;
    temp.getContext("2d").drawImage(canvas, 0, 0);

    drawingHistory = drawingHistory.slice(0, historyIndex + 1);
    drawingHistory.push(temp.toDataURL());
    historyIndex = drawingHistory.length - 1;
    updateUndoButton();
}

function redraw() {
    ctx.fillStyle = isWhiteBackground ? "white" : "black";
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    if (historyIndex >= 0) {
        const img = new Image();
        img.onload = () => ctx.drawImage(img, 0, 0);
        img.src = drawingHistory[historyIndex];
    }
}

function undo() {
    if (historyIndex > 0) {
        historyIndex--;
        redraw();
    }
}

function updateUndoButton() {
    undoBtn.disabled = historyIndex <= 0;
}

// Drawing
function drawLine(x, y) {
    ctx.strokeStyle = currentTool === "pen" ? (isWhiteBackground ? "black" : "white") : (isWhiteBackground ? "white" : "black");
    ctx.lineWidth = currentTool === "pen" ? penWidth : eraserWidth;
    ctx.lineCap = "round";

    ctx.beginPath();
    ctx.moveTo(lastX, lastY);
    ctx.lineTo(x, y);
    ctx.stroke();

    [lastX, lastY] = [x, y];
}

// Mouse
canvas.addEventListener("mousedown", e => {
    isDrawing = true;
    [lastX, lastY] = [e.offsetX, e.offsetY];
});
canvas.addEventListener("mousemove", e => { if (isDrawing) drawLine(e.offsetX, e.offsetY); });
canvas.addEventListener("mouseup", () => { if (isDrawing) { isDrawing = false; saveState(); } });
canvas.addEventListener("mouseout", () => isDrawing = false);

// Touch
canvas.addEventListener("touchstart", e => {
    const rect = canvas.getBoundingClientRect();
    isDrawing = true;
    lastX = e.touches[0].clientX - rect.left;
    lastY = e.touches[0].clientY - rect.top;
    e.preventDefault();
});
canvas.addEventListener("touchmove", e => {
    if (!isDrawing) return;
    const rect = canvas.getBoundingClientRect();
    drawLine(e.touches[0].clientX - rect.left, e.touches[0].clientY - rect.top);
    e.preventDefault();
});
canvas.addEventListener("touchend", () => { if (isDrawing) { isDrawing = false; saveState(); } });

// UI
function setActiveTool(tool) {
    currentTool = tool;
    if (tool === "pen") {
        penToolBtn.classList.add("ring-2", "ring-blue-500");
        eraserToolBtn.classList.remove("ring-2", "ring-blue-500");
    } else {
        eraserToolBtn.classList.add("ring-2", "ring-blue-500");
        penToolBtn.classList.remove("ring-2", "ring-blue-500");
    }
}

toggleBgBtn.addEventListener("click", () => {
    isWhiteBackground = !isWhiteBackground;
    toggleIconSun.classList.toggle("hidden", !isWhiteBackground);
    toggleIconMoon.classList.toggle("hidden", isWhiteBackground);
    redraw();
});

penToolBtn.addEventListener("click", () => setActiveTool("pen"));
eraserToolBtn.addEventListener("click", () => setActiveTool("eraser"));
undoBtn.addEventListener("click", undo);

clearBtn.addEventListener("click", () => {
    drawingHistory = [];
    historyIndex = -1;
    redraw();
    saveState();
});

saveBtn.addEventListener("click", () => {
    const link = document.createElement("a");
    link.download = "my-drawing.png";
    link.href = canvas.toDataURL("image/png");
    link.click();
});
</script>
</body>
</html>
