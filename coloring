<!DOCTYPE html>
<html>
<head>
  <style>
    /* New simplified styling */
    body {
      margin: 0;
      padding: 0;
      font-family: sans-serif;
      background-color: #f0f0f0;
      display: flex;
      flex-direction: column;
      align-items: center;
      min-height: 100vh;
      box-sizing: border-box;
    }

    /* Simple, clean canvas styles */
    #canvas-container {
      width: 90%;
      max-width: 800px;
      height: 500px;
      background-color: #ffffff;
      border: 1px solid #e0e0e0;
      position: relative;
      margin-top: 20px;
      overflow: hidden;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      border-radius: 8px;
    }

    /* NEW: This styles the parent div container */
    .sticker {
      position: absolute;
      width: 100px;
      height: auto;
      cursor: grab;
      user-select: none;
      transition: transform 0.1s ease-in-out;
      border: 1px dashed transparent;
      box-sizing: border-box;
    }

    /* NEW: This styles the image inside the sticker container */
    .sticker img {
      width: 100%;
      height: 100%;
      object-fit: contain;
    }

    .sticker:hover, .sticker:focus {
      outline: none;
    }
    
    .sticker:active {
      cursor: grabbing;
      z-index: 100;
    }
    
    /* New styles for the delete button */
    .delete-btn {
      position: absolute;
      top: 5px;
      right: 5px;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background-color: #b4b1b1d7; /* Red background */
      color: white;
      text-align: center;
      line-height: 20px;
      cursor: pointer;
      display: none; /* Hide by default */
      z-index: 101;
      padding: 4px;
    }
    
    .sticker:hover > .delete-btn {
      display: flex; /* Show on sticker hover */
      align-items: center;
      justify-content: center;
    }

    .delete-btn-icon {
        width: 50px;
        height: 50px;
        fill: white;
        stroke: white;
    }

    .controls {
      margin-top: 20px;
      display: flex;
      gap: 10px;
    }

    .bucket-active .sticker {
  border: none !important;
  transition: none !important;
}

.bucket-active .sticker .delete-btn {
  display: none !important;
}

.bucket-active .sticker:active,
.bucket-active .sticker:hover {
  cursor: crosshair;
}


    /* Icon button styles */
    button {
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      border: none;
      border-radius: 50%;
      background-color: #007bff;
      color: white;
      cursor: pointer;
      transition: background-color 0.3s, transform 0.2s;
    }

    button:hover {
      background-color: #0056b3;
      transform: scale(1.05);
    }
    
    .icon {
      width: 1.2em;
      height: 1.2em;
      fill: none;
      stroke: currentColor;
    }

    #sticker-palette-container {
      width: 90%;
      max-width: 800px;
      margin-top: 20px;
      padding: 10px;
      background-color: #f8f8f8;
      border: 1px solid #ddd;
      border-radius: 8px;
      box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
      display: flex;
      flex-wrap: wrap;
      justify-content: flex-start;
      gap: 10px;
      position: relative;
    }

    .palette-sticker {
      width: 60px;
      height: 60px;
      object-fit: contain;
      cursor: pointer;
      border: 2px solid transparent;
      transition: border-color 0.2s, transform 0.2s;
    }

    .palette-sticker:hover {
      border-color: #007bff;
      transform: scale(1.1);
    }

    #overlay-container {
      position: absolute;
      background-color: rgba(255, 255, 255, 0.95);
      border: 1px solid #ccc;
      border-radius: 8px;
      padding: 10px;
      display: none;
      z-index: 200;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
      
      display: none;
      grid-template-columns: repeat(5, 1fr);
      gap: 5px;
      width: 250px;
    }

    .overlay-sticker {
      width: 100%;
      height: auto;
      aspect-ratio: 1/1;
      object-fit: contain;
      cursor: grab;
      border: 1px solid transparent;
    }
    </style>
  <script src="https://unpkg.com/lucide@latest"></script>
</head>
<body>
  <div class="controls">
    <button id="add-sticker-btn" title="Add Random">
      <i data-lucide="dices" class="icon"></i>
    </button>

   <input type="color" id="color-picker" title="Pick Fill Color" value="#ff0000" />
<button id="bucket-btn" title="Fill Sticker">
  <i data-lucide="paint-bucket" class="icon"></i>
</button>

    <button id="undo-btn" title="Undo">
      <i data-lucide="rotate-ccw" class="icon"></i>
    </button>
    
    <button id="new-btn" title="New Canvas">
      <i data-lucide="plus-circle" class="icon"></i>
    </button>
  </div>
  <div id="canvas-container"></div>
  
  <h3>Choose a Sticker</h3>
  <div id="sticker-palette-container">
    </div>

  <div id="overlay-container"></div>


  <script>
    const stickerGroups = [
      {
        name: "Alpaca",
        urls: [
          "https://static.wixstatic.com/media/990059_b8e966fff23243baaeffda0903b26ae5~mv2.png",
          "https://static.wixstatic.com/media/990059_de180b020be54f9197ee9da700034b23~mv2.png",
          "https://static.wixstatic.com/media/990059_4a8de8e19a9c45439f68e5ffdcc115d2~mv2.png",
          "https://static.wixstatic.com/media/990059_43ecc7762e064417811a87e307b7907f~mv2.png",
          "https://static.wixstatic.com/media/990059_41dc4f48b83446c0b73a62e0956da286~mv2.png",
          "https://static.wixstatic.com/media/990059_3738e3eb9e9545e09b320de9cf2f3ac6~mv2.png",
          "https://static.wixstatic.com/media/990059_bd8a968f55534bfa89713e93a9dfc806~mv2.png",
          "https://static.wixstatic.com/media/990059_ffbd6892bad64ea6ac268f8fe539e1fe~mv2.png",
          "https://static.wixstatic.com/media/990059_2ee1b55de8434492bfe9e2603bbdfae4~mv2.png",
          "https://static.wixstatic.com/media/990059_11df952adf7649be8fc5cf072305e867~mv2.png",
          "https://static.wixstatic.com/media/990059_80d8ebf3215f4306900b0c9555ad019f~mv2.png",
          "https://static.wixstatic.com/media/990059_037002d97a114b2c8eeddd6606ee5c39~mv2.png",
          "https://static.wixstatic.com/media/990059_04d0262ad52b4c7c8a44c136a362b7d5~mv2.png",
          "https://static.wixstatic.com/media/990059_2c4f2b959e474833b61b6f5218b73967~mv2.png",
          "https://static.wixstatic.com/media/990059_448fbb1d78584097907eb1b312f330c3~mv2.png",
          "https://static.wixstatic.com/media/990059_e3133404efe44eaf9f33ef1c0e2ccde9~mv2.png",
          "https://static.wixstatic.com/media/990059_fef1e3bea9814e1b93118cbb3abb066c~mv2.png",
          "https://static.wixstatic.com/media/990059_b1ed01d0d9b54f5ca211e2975213fd5f~mv2.png",
          "https://static.wixstatic.com/media/990059_a5715995827641ffba7291c75bf8f9d3~mv2.png",
          "https://static.wixstatic.com/media/990059_a0b03b03435c4da38095c71bda978915~mv2.png",
          "https://static.wixstatic.com/media/990059_eaf18884725f4652bb2b16c25a424673~mv2.png",
          "https://static.wixstatic.com/media/990059_16d71393320b45249789d860719c902c~mv2.png"
        ]
      },
      {
        name: "80s Wrestler",
        urls: [
          "https://static.wixstatic.com/media/990059_d48da8238dca4caca0d318ae804ff1ac~mv2.png"
        ]
      }
    ];

    const canvas = document.getElementById('canvas-container');
    const addStickerBtn = document.getElementById('add-sticker-btn');
    const undoBtn = document.getElementById('undo-btn');
    const newBtn = document.getElementById('new-btn');
    const paletteContainer = document.getElementById('sticker-palette-container');
    const overlayContainer = document.getElementById('overlay-container');

    const colorHistory = [];

   const colorPicker = document.getElementById('color-picker');
const bucketBtn = document.getElementById('bucket-btn');
let bucketMode = false;

    let activeSticker = null;
    let initialX, initialY, offsetX, offsetY;
    const history = [];

    let activePaletteSticker = null;

    // --- Function to save the current canvas state to the history ---
    function saveState() {
  const stickersOnCanvas = document.querySelectorAll('#canvas-container .sticker');
  const currentState = {
    stickers: []
  };

  stickersOnCanvas.forEach(sticker => {
    const stickerImg = sticker.querySelector('img');
    if (stickerImg) {
      currentState.stickers.push({
        url: stickerImg.src,          // store the current image data (even recolored)
        x: sticker.offsetLeft,
        y: sticker.offsetTop,
        width: sticker.offsetWidth,
        height: sticker.offsetHeight
      });
    }
  });

  history.push(currentState);
  updateUndoButton();
}


    // --- Function to re-render the canvas from a saved state ---
 function loadState(state) {
  canvas.innerHTML = '';

  state.stickers.forEach(data => {
    const sticker = addSticker(data.url, data.x, data.y);
    sticker.style.width = `${data.width}px`;
    sticker.style.height = `${data.height}px`;
  });
}


    // --- Function to create and add a sticker to the canvas ---
    function addSticker(url, x, y) {
  const sticker = document.createElement('div');
  sticker.classList.add('sticker');
  
  const stickerImg = document.createElement('img');
  stickerImg.crossOrigin = "Anonymous";
stickerImg.src = url;
  stickerImg.draggable = false;

  sticker.appendChild(stickerImg);

  // --- Bucket tool handler ---
  stickerImg.addEventListener('click', (e) => {
    if (bucketMode) {
      const rect = e.target.getBoundingClientRect();
      const clickX = Math.floor((e.clientX - rect.left) * (stickerImg.naturalWidth / rect.width));
      const clickY = Math.floor((e.clientY - rect.top) * (stickerImg.naturalHeight / rect.height));
      recolorSticker(stickerImg, colorPicker.value, clickX, clickY);
      e.stopPropagation();
      saveState();
    }
  });

  // --- Delete button setup (your existing code) ---
  const deleteBtn = document.createElement('div');
  deleteBtn.classList.add('delete-btn');
  deleteBtn.innerHTML = `
    <svg class="delete-btn-icon" viewBox="0 0 24 24">
      <line x1="15" y1="9" x2="9" y2="15"></line>
      <line x1="9" y1="9" x2="15" y2="15"></line>
    </svg>
  `;
  deleteBtn.addEventListener('click', (e) => {
    e.stopPropagation();
    sticker.remove();
    saveState();
  });
  sticker.appendChild(deleteBtn);

  // --- Positioning ---
  let finalX = x ?? Math.floor(Math.random() * (canvas.offsetWidth - 100));
  let finalY = y ?? Math.floor(Math.random() * (canvas.offsetHeight - 100));

  sticker.style.left = `${finalX}px`;
  sticker.style.top = `${finalY}px`;

  // --- Drag/Resize listeners (your existing code) ---
stickerImg.addEventListener('mousedown', (e) => {
  if (!bucketMode) {
    startDrag(e);
  }
});  addResizeListener(stickerImg);

  canvas.appendChild(sticker);
  saveState();
  return sticker;
}

    
    // --- Function to populate the sticker palette with main groups ---
    function populatePalette() {
      stickerGroups.forEach(group => {
        const paletteSticker = document.createElement('img');
        paletteSticker.src = group.urls[0];
        paletteSticker.classList.add('palette-sticker');
        
        paletteSticker.dataset.group = group.name;

        paletteSticker.addEventListener('click', (e) => {
          if (activePaletteSticker === paletteSticker) {
            hideOverlay();
          } else {
            hideOverlay();
            showOverlay(e, group.urls);
            activePaletteSticker = paletteSticker;
          }
        });
        
        // Add drag/drop functionality for the main image
        paletteSticker.draggable = true;
        paletteSticker.addEventListener('dragstart', (e) => {
          e.dataTransfer.setData('text/plain', group.urls[0]);
          hideOverlay();
        });
        paletteContainer.appendChild(paletteSticker);
      });
    }
    
    // --- Hide overlay function ---
    function hideOverlay() {
      overlayContainer.style.display = 'none';
      activePaletteSticker = null;
    }

    // --- Overlay functions ---
    let activeGroupURLs = [];
    
    function showOverlay(e, urls) {
      activeGroupURLs = urls;

      overlayContainer.innerHTML = '';
      
      urls.forEach(url => {
        const overlaySticker = document.createElement('img');
        overlaySticker.src = url;
        overlaySticker.classList.add('overlay-sticker');
        
        overlaySticker.draggable = true;
        overlaySticker.addEventListener('dragstart', (e) => {
          e.stopPropagation();
          e.dataTransfer.setData('text/plain', url);
        });
        overlaySticker.addEventListener('click', (e) => {
          e.stopPropagation();
          addSticker(url);
        });
        
        overlayContainer.appendChild(overlaySticker);
      });

      const rect = e.target.getBoundingClientRect();
const paletteRect = paletteContainer.getBoundingClientRect();

const { right, bottom } = rect;

if (right + 260 < window.innerWidth) {
  overlayContainer.style.left = `${rect.right - paletteRect.left + 10}px`;
} else {
  overlayContainer.style.left = `${rect.left - paletteRect.left - 260}px`;
}

// keep your vertical positioning check
if (bottom + overlayContainer.offsetHeight < window.innerHeight) {
  overlayContainer.style.top = `${rect.top - paletteRect.top}px`;
} else {
  overlayContainer.style.top = `${rect.top - paletteRect.top - overlayContainer.offsetHeight}px`;
}
      
      overlayContainer.style.display = 'grid';
    }
    
    document.addEventListener('click', (e) => {
      if (!paletteContainer.contains(e.target) && !overlayContainer.contains(e.target)) {
        hideOverlay();
      }
    });

    // --- Drag-and-Drop event listeners for the canvas ---
    canvas.addEventListener('dragover', (e) => {
      e.preventDefault();
    });

    canvas.addEventListener('drop', (e) => {
      e.preventDefault();
      const url = e.dataTransfer.getData('text/plain');
      if (url) {
        const rect = canvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        addSticker(url, x, y);
      }
    });

  function addResizeListener(stickerImg) {
  stickerImg.addEventListener('wheel', (e) => {
    e.preventDefault();
    const delta = Math.sign(e.deltaY);
    const parent = stickerImg.parentElement;
    const newSize = parent.offsetWidth + (delta * 10);
    const minSize = 30, maxSize = 400;
    if (newSize >= minSize && newSize <= maxSize) {
      parent.style.width = `${newSize}px`;
      parent.style.height = 'auto';
    }
  });
}

function hexToRgb(hex) {
  hex = hex.replace(/^#/, "");
  const bigint = parseInt(hex, 16);
  return [(bigint >> 16) & 255, (bigint >> 8) & 255, bigint & 255];
}

function recolorSticker(stickerImg, fillColor, clickX, clickY) {
  // Save current state of this sticker before changing
  colorHistory.push({
    sticker: stickerImg,
    prevSrc: stickerImg.src
  });
  updateUndoButton();  // enable undo button

  const canvasEl = document.createElement("canvas");
  const ctx = canvasEl.getContext("2d");

  canvasEl.width = stickerImg.naturalWidth;
  canvasEl.height = stickerImg.naturalHeight;
  ctx.drawImage(stickerImg, 0, 0);

  const imgData = ctx.getImageData(0, 0, canvasEl.width, canvasEl.height);
  const data = imgData.data;

  const stack = [[clickX, clickY]];
  const [r, g, b] = hexToRgb(fillColor);
  const visited = new Set();

  while (stack.length) {
    const [x, y] = stack.pop();
    const i = ((y * canvasEl.width) + x) * 4;
    const key = `${x},${y}`;
    if (visited.has(key) || x < 0 || x >= canvasEl.width || y < 0 || y >= canvasEl.height) continue;
    visited.add(key);

    // never recolor black
    const isBlack = (data[i] === 0 && data[i+1] === 0 && data[i+2] === 0 && data[i+3] > 0);
    if (isBlack) continue;

    data[i] = r;
    data[i+1] = g;
    data[i+2] = b;
    data[i+3] = 255;

    stack.push([x+1, y]);
    stack.push([x-1, y]);
    stack.push([x, y+1]);
    stack.push([x, y-1]);
  }

  ctx.putImageData(imgData, 0, 0);
  stickerImg.src = canvasEl.toDataURL();
}

    // --- Dragging functions for stickers on the canvas ---
    function startDrag(e) {
      
      e.preventDefault();
      activeSticker = e.target;
      initialX = e.clientX;
      initialY = e.clientY;
      offsetX = activeSticker.parentElement.offsetLeft;
      offsetY = activeSticker.parentElement.offsetTop;
      
      document.addEventListener('mousemove', dragSticker);
      document.addEventListener('mouseup', stopDrag);
    }

    function dragSticker(e) {
      if (!activeSticker) return;
      const newX = offsetX + (e.clientX - initialX);
      const newY = offsetY + (e.clientY - initialY);
      const maxX = canvas.offsetWidth - activeSticker.parentElement.offsetWidth;
      const maxY = canvas.offsetHeight - activeSticker.parentElement.offsetHeight;
      activeSticker.parentElement.style.left = `${Math.min(Math.max(0, newX), maxX)}px`;
      activeSticker.parentElement.style.top = `${Math.min(Math.max(0, newY), maxY)}px`;
    }

    function stopDrag() {
       if (bucketMode) {
     return;
   }
      document.removeEventListener('mousemove', dragSticker);
      document.removeEventListener('mouseup', stopDrag);
      activeSticker = null;
    }

    // --- New: Undo and New button event listeners ---
  function updateUndoButton() {
  undoBtn.disabled = colorHistory.length === 0;
}

    undoBtn.addEventListener('click', () => {
  if (colorHistory.length > 0) {
    const last = colorHistory.pop();
    last.sticker.src = last.prevSrc;  // restore old image
  }
  updateUndoButton();
});


    newBtn.addEventListener('click', () => {
      canvas.innerHTML = '';
      history.splice(1);
      updateUndoButton();
    });
    
    // --- Initial function calls ---
    addStickerBtn.addEventListener('click', () => {
      const allUrls = stickerGroups.flatMap(group => group.urls);
      const randomUrl = allUrls[Math.floor(Math.random() * allUrls.length)];
      addSticker(randomUrl);
    });
    
    populatePalette();
    saveState();
    
      // New: Manually create icons after the page has loaded
    window.addEventListener('load', () => {
      if (window.lucide) {
        lucide.createIcons();
      }
    });


    // Toggle bucket mode
bucketBtn.addEventListener('click', () => {
  bucketMode = !bucketMode;
  bucketBtn.style.backgroundColor = bucketMode ? "#28a745" : "#007bff";
  
  if (bucketMode) {
    document.body.classList.add('bucket-active');
    canvas.style.cursor = 'crosshair';
  } else {
    document.body.classList.remove('bucket-active');
    canvas.style.cursor = 'default';
  }
});
    
  </script>
  
</body>
</html>
