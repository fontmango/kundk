<!DOCTYPE html>
<html>
<head>
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: sans-serif;
      background-color: #f0f0f0;
      display: flex;
      flex-direction: column;
      align-items: center;
      min-height: 100vh;
      box-sizing: border-box;
    }

    #canvas-container {
      width: 90%;
      height: 500px;
      background-color: #ffffff;
      border: 1px solid #e0e0e0;
      position: relative;
      margin-top: 20px;
      overflow: hidden;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      border-radius: 8px;
    }

    .sticker {
      position: absolute;
      width: 100px;
      height: auto;
      cursor: grab;
      user-select: none;
      transition: transform 0.1s ease-in-out;
      border: 1px dashed transparent;
      box-sizing: border-box;

    }

    .sticker img {
      width: 100%;
      height: 100%;
      object-fit: contain;
    }

    .sticker:active {
      cursor: grabbing;
      z-index: 100;
    }
    
      .sticker:hover, .sticker:focus {
      outline: none;
    }
    


   /* Show on hover of the parent sticker */
.sticker:hover > .delete-btn {
  display: flex; 
  align-items: center;
  justify-content: center;
}

/* Hover effect for the button itself */
.delete-btn:hover {
  background-color: #ff4444; /* brighter red */
  transform: scale(1.1);      /* slightly enlarge */
  box-shadow: 0 2px 6px rgba(0,0,0,0.3); /* subtle shadow */
}
    

  
    .controls {
      margin-top: 20px;
      display: flex;
      gap: 15px;
      align-items: center;
    }
    
    
    .bucket-active .sticker {
  border: none !important;
  transition: none !important;
}

.bucket-active .sticker .delete-btn{
  display: none !important;
}

.bucket-active .copy-btn{
display: none !important;
}

.bucket-active .sticker:active,
.bucket-active .sticker:hover {
  cursor: crosshair;
}

    /* Neutral icon buttons (no background) */
    button {
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      border: none;
      background: none;
      cursor: pointer;
      color: #333;
      transition: transform 0.2s, color 0.2s;
    }
    button:hover {
      color: #000;
      transform: scale(1.1);
    }
   button.active {
  border-radius: 50%;
  outline: none;
  box-shadow: 0 0 0 2px #000; /* "offset outline" effect */
}

    .icon {
      width: 1.4em;
      height: 1.4em;
      stroke: currentColor;
    }

    /* Circular color wheel */
    #color-picker {
      -webkit-appearance: none;
      border: none;
      width: 50px;
      height: 50px;
      border-radius: 50%;
      padding: 0;
      cursor: pointer;
      overflow: hidden;
      background: conic-gradient(
        red, yellow, lime, cyan, blue, magenta, red
      );
    }
    
    #color-picker::-webkit-color-swatch-wrapper {
      padding: 0;
      border-radius: 50%;
    }
    #color-picker::-webkit-color-swatch {
      border: none;
      border-radius: 50%;
    }

    #sticker-palette-container {
      width: 90%;
      margin-top: 5px;
      padding: 5px;
      background-color: #f8f8f8;
      border: 1px solid #ddd;
      border-radius: 8px;
      box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
      display: flex;
      flex-wrap: wrap;
    }

    .palette-sticker {
      width: 60px;
      height: 60px;
      object-fit: contain;
      cursor: pointer;
      border: 2px solid transparent;
      transition: border-color 0.2s, transform 0.2s;
    }
    .palette-sticker:hover {
      transform: scale(1.1);
     
    }
    
     #overlay-container {
      position: absolute;
      background-color: rgba(255, 255, 255, 0.95);
      border: 1px solid #ccc;
      border-radius: 8px;
      padding: 10px;
      display: none;
      z-index: 200;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
      
      display: none;
      grid-template-columns: repeat(5, 1fr);
      gap: 5px;
      width: 250px;
    }

    .overlay-sticker {
      width: 100%;
      height: auto;
      aspect-ratio: 1/1;
      object-fit: contain;
      cursor: grab;
      border: 1px solid transparent;
    }

     .overlay-sticker:hover {
      transform: scale(1.1);
      
    }
    
    
 #color-picker {
  -webkit-appearance: none;
  border: none;
  width: 20px;   /* smaller width */
  height: 20px;  /* smaller height */
  padding: 0;
  cursor: pointer;
  overflow: hidden;
}


.color-wrapper {
  width: 40px;        /* same as buttons */
  height: 40px;       /* same as buttons */
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  overflow: hidden;
  cursor: pointer;
  padding: 0;
}



.copy-btn-icon {
  width: 40%;
  height: 40%;
  fill: white;
  stroke: white;
}

.delete-btn-icon {
        width: 80px;
        height: 80px;
        fill: white;
        stroke: white;
    }
    
   .delete-btn {
  position: absolute;
  top: 5%;       /* closer to the top */
  right: 5%;     /* closer to the right */
  width: 20%;    /* proportional to sticker size */
  height: 20%;   /* proportional to sticker size */
  border-radius: 50%;
  background-color: #c2bebeff;
  color: white;
  display: none;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 101;
  font-size: 0.6em; /* scales the icon/text inside */
  padding: 0;        /* remove extra padding */
}

.copy-btn {
  position: absolute;
  top: 5%;       /* close to top */
  left: 5%;      /* close to left */
  width: 20%;    /* proportional to sticker size */
  height: 20%;   /* proportional to sticker size */
  border-radius: 50%;
  background-color: #c2bebeff;  /* different color for copy */
  color: white;
  display: none;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 101;
  font-size: 0.6em;
  padding: 0;
}

.sticker:hover > .copy-btn {
  display: flex; 
  align-items: center;
  justify-content: center;
}

.copy-btn:hover {
  background-color: #6aa84fff; /* darker on hover */
  transform: scale(1.1);
  box-shadow: 0 2px 6px rgba(0,0,0,0.3);
}


    
  </style>
  <script src="https://unpkg.com/lucide@latest"></script>
</head>
<body>
  <div class="controls">
    <button id="add-sticker-btn" title="Add Random">
      <i data-lucide="dices" class="icon"></i>
    </button>
    
    
 <div class="color-wrapper">
    <input type="color" id="color-picker" value="#ff0000" />
  </div> 

    <button id="bucket-btn" title="Fill Sticker">
      <i data-lucide="paint-bucket" class="icon"></i>
    </button>

    <button id="undo-btn" title="Undo">
      <i data-lucide="rotate-ccw" class="icon"></i>
    </button>
    
    <button id="new-btn" title="New Canvas">
      <i data-lucide="plus-circle" class="icon"></i>
    </button>
  </div>
  
  
  <div id="canvas-container"></div>
  
  <h3>Sticker ausw√§hlen</h3>
  <div id="sticker-palette-container">
    </div>

  <div id="overlay-container"></div>


  <script>
     const stickerGroups = [
      {
        name: "Alpaca",
        urls: [
          
          "https://static.wixstatic.com/media/990059_caaa5e6cda52435fbb7c5d44baf532b6~mv2.png",
          "https://static.wixstatic.com/media/990059_91c06e8d3bd0444696cf64ff35870d79~mv2.png",
          "https://static.wixstatic.com/media/990059_2f5de7bfb37b4edf9375460f2befe73d~mv2.png",
          "https://static.wixstatic.com/media/990059_2a29f33d7ef34280b86e7786af3971d1~mv2.png",
          "https://static.wixstatic.com/media/990059_95ffdb66d7d94ad99e0471a5103defec~mv2.png"
        ]
      },
      {
        name: "80s Wrestler",
        urls: [
          "https://static.wixstatic.com/media/990059_bdb2912772b543748423fcdcd14a5511~mv2.png",
          "https://static.wixstatic.com/media/990059_33fe8d1256f64f36bb515900f04f14a6~mv2.png",
          "https://static.wixstatic.com/media/990059_7786535a11d5461f9f3a82b686538dba~mv2.png"
        ]
      },
      {
        name: "80s Wrestler",
        urls: [
          "https://static.wixstatic.com/media/990059_d6bcc1676fd3430eaf87ee52bd938f3e~mv2.png",
          "https://static.wixstatic.com/media/990059_f3aa94e6bc0744be95006181e96ad12a~mv2.png",
          "https://static.wixstatic.com/media/990059_5127ca4c3b29451993df63ba61a14a0e~mv2.png",
          "https://static.wixstatic.com/media/990059_db0d99e95a304512b01c4065e318203f~mv2.png",
          "https://static.wixstatic.com/media/990059_0ab8fd84c6984427ac56ae3bce1dc9f1~mv2.png"
        ]
      },
      {
        name: "80s Wrestler",
        urls: [
          "https://static.wixstatic.com/media/990059_de40a3950aae4e5c8191652fefdb5495~mv2.png",
          "https://static.wixstatic.com/media/990059_800432b2864848e29281d7afe4860948~mv2.png",
          "https://static.wixstatic.com/media/990059_0a91613ae02d453590976ff5c7886ff7~mv2.png",
          "https://static.wixstatic.com/media/990059_54a50408c4d74952af04f951d18e88cc~mv2.png",
          "https://static.wixstatic.com/media/990059_96e920f530ab41258853992df641afab~mv2.png"
        ]
      }
      
      
    ];

    const canvas = document.getElementById('canvas-container');
    const addStickerBtn = document.getElementById('add-sticker-btn');
    const undoBtn = document.getElementById('undo-btn');
    const newBtn = document.getElementById('new-btn');
    const paletteContainer = document.getElementById('sticker-palette-container');
    const overlayContainer = document.getElementById('overlay-container');

    const colorHistory = [];
    
      const colorPicker = document.getElementById("color-picker");
    const colorIcon = document.getElementById("color-icon");
    
    

const bucketBtn = document.getElementById('bucket-btn');
let bucketMode = false;

    let activeSticker = null;
    let initialX, initialY, offsetX, offsetY;
    const history = [];

    let activePaletteSticker = null;
    
  
    // --- Function to save the current canvas state to the history ---
    function saveState() {
  const stickersOnCanvas = document.querySelectorAll('#canvas-container .sticker');
  const currentState = {
    stickers: []
  };

  stickersOnCanvas.forEach(sticker => {
    const stickerImg = sticker.querySelector('img');
    if (stickerImg) {
      currentState.stickers.push({
        url: stickerImg.src,          // store the current image data (even recolored)
        x: sticker.offsetLeft,
        y: sticker.offsetTop,
        width: sticker.offsetWidth,
        height: sticker.offsetHeight
      });
    }
  });

  history.push(currentState);
  updateUndoButton();
}


    // --- Function to re-render the canvas from a saved state ---
 function loadState(state) {
  canvas.innerHTML = '';

  state.stickers.forEach(data => {
    const sticker = addSticker(data.url, data.x, data.y);
    sticker.style.width = `${data.width}px`;
    sticker.style.height = `${data.height}px`;
  });
}


function addSticker(url, x, y, width = 100) { // width can now be set per sticker
  const sticker = document.createElement('div');
  sticker.classList.add('sticker');
  sticker.style.width = width + 'px';
  sticker.style.height = 'auto'; // maintain aspect ratio

  const stickerImg = document.createElement('img');
  stickerImg.crossOrigin = "Anonymous";
  stickerImg.src = url;
  stickerImg.draggable = false;
  sticker.appendChild(stickerImg);

  // --- Bucket tool handler ---
  stickerImg.addEventListener('click', (e) => {
    if (bucketMode) {
      const rect = e.target.getBoundingClientRect();
      const clickX = Math.floor((e.clientX - rect.left) * (stickerImg.naturalWidth / rect.width));
      const clickY = Math.floor((e.clientY - rect.top) * (stickerImg.naturalHeight / rect.height));
      recolorSticker(stickerImg, colorPicker.value, clickX, clickY);
      e.stopPropagation();
      saveState();
    }
  });


  // --- Copy button setup ---
const copyBtn = document.createElement('div');
copyBtn.classList.add('copy-btn');
copyBtn.innerHTML = `
  <svg class="copy-btn-icon" viewBox="0 0 24 24" width="50%" height="50%" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <rect x="6" y="4" width="12" height="16" rx="2" ry="2" stroke="lightgray"></rect>
    <rect x="4" y="6" width="12" height="16" rx="2" ry="2" stroke="currentColor"></rect>
  </svg>
`;

copyBtn.addEventListener('click', (e) => {
  e.stopPropagation();

  const stickerWidth = sticker.offsetWidth;
  const stickerHeight = sticker.offsetHeight;

  // Start offset relative to the original
  let newX = parseInt(sticker.style.left) + 10;
  let newY = parseInt(sticker.style.top) + 10;

  // Function to check if new position would overlap any existing sticker
  function isOverlapping(x, y) {
    const stickers = document.querySelectorAll('.sticker');
    return Array.from(stickers).some(s => {
      const sx = parseInt(s.style.left);
      const sy = parseInt(s.style.top);
      const sw = s.offsetWidth;
      const sh = s.offsetHeight;

      return !(x + stickerWidth < sx || x > sx + sw || y + stickerHeight < sy || y > sy + sh);
    });
  }

  // Try to find a free spot by moving down/right until no overlap
  const step = 10;
  let attempts = 0;
  while (isOverlapping(newX, newY) && attempts < 100) {
    newX += step;
    newY += step;

    // Wrap around if exceeding canvas
    if (newX + stickerWidth > canvas.offsetWidth) newX = step;
    if (newY + stickerHeight > canvas.offsetHeight) newY = step;

    attempts++;
  }

  addSticker(stickerImg.src, newX, newY);
});

  // --- Delete button ---
  const deleteBtn = document.createElement('div');
  deleteBtn.classList.add('delete-btn');
  deleteBtn.innerHTML = `
    <svg class="delete-btn-icon" viewBox="0 0 24 24">
      <line x1="15" y1="9" x2="9" y2="15"></line>
      <line x1="9" y1="9" x2="15" y2="15"></line>
    </svg>
  `;
  deleteBtn.addEventListener('click', (e) => {
    e.stopPropagation();
    sticker.remove();
    saveState();
  });
  sticker.appendChild(deleteBtn);
  sticker.appendChild(copyBtn);


  // --- Random non-overlapping positioning ---
  let finalX = x;
  let finalY = y;

  const canvasRect = canvas.getBoundingClientRect();

  if (finalX === undefined || finalY === undefined) {
    let tries = 0;
    let overlap;

    do {
      overlap = false;
      finalX = Math.floor(Math.random() * (canvas.offsetWidth - width));
      finalY = Math.floor(Math.random() * (canvas.offsetHeight - width)); // approximate square

      document.querySelectorAll('.sticker').forEach(existing => {
        const rect = existing.getBoundingClientRect();
        const ex = rect.left - canvasRect.left;
        const ey = rect.top - canvasRect.top;
        const ew = rect.width;
        const eh = rect.height;

        if (
          finalX < ex + ew &&
          finalX + width > ex &&
          finalY < ey + eh &&
          finalY + width > ey
        ) {
          overlap = true;
        }
      });

      tries++;
      if (tries > 200) break; // safety for crowded canvas
    } while (overlap);
  }

  sticker.style.left = `${finalX}px`;
  sticker.style.top = `${finalY}px`;

  // --- Drag/Resize listeners ---
  stickerImg.addEventListener('mousedown', (e) => {
    if (!bucketMode) startDrag(e);
  });
  addResizeListener(stickerImg);

  // --- Delete button scaling ---
  function updateDeleteBtn() {
    const btnSize = sticker.offsetWidth * 0.2; // 20% of sticker width
    deleteBtn.style.width = btnSize + 'px';
    deleteBtn.style.height = btnSize + 'px';
    deleteBtn.style.top = btnSize * 0.25 + 'px'; // small offset from top
    deleteBtn.style.right = btnSize * 0.25 + 'px';
    deleteBtn.style.borderRadius = '50%';
    deleteBtn.style.fontSize = btnSize * 0.5 + 'px';
  }

  // Initial update
  updateDeleteBtn();

  // Update if sticker is resized
  const observer = new ResizeObserver(updateDeleteBtn);
  observer.observe(sticker);

  canvas.appendChild(sticker);
  saveState();
  return sticker;
}

    
    // --- Function to populate the sticker palette with main groups ---
    function populatePalette() {
      stickerGroups.forEach(group => {
        const paletteSticker = document.createElement('img');
        paletteSticker.src = group.urls[0];
        paletteSticker.classList.add('palette-sticker');
        
        paletteSticker.dataset.group = group.name;

        paletteSticker.addEventListener('click', (e) => {
          if (activePaletteSticker === paletteSticker) {
            hideOverlay();
          } else {
            hideOverlay();
            showOverlay(e, group.urls);
            activePaletteSticker = paletteSticker;
          }
        });
        
        // Add drag/drop functionality for the main image
        paletteSticker.draggable = true;
        paletteSticker.addEventListener('dragstart', (e) => {
          e.dataTransfer.setData('text/plain', group.urls[0]);
          hideOverlay();
        });
        paletteContainer.appendChild(paletteSticker);
      });
    }
    
    // --- Hide overlay function ---
    function hideOverlay() {
      overlayContainer.style.display = 'none';
      activePaletteSticker = null;
    }

    // --- Overlay functions ---
    let activeGroupURLs = [];
    
    function showOverlay(e, urls) {
      activeGroupURLs = urls;

      overlayContainer.innerHTML = '';
      
      urls.forEach(url => {
        const overlaySticker = document.createElement('img');
        overlaySticker.src = url;
        overlaySticker.classList.add('overlay-sticker');
        
        overlaySticker.draggable = true;
        overlaySticker.addEventListener('dragstart', (e) => {
          e.stopPropagation();
          e.dataTransfer.setData('text/plain', url);
        });
        overlaySticker.addEventListener('click', (e) => {
          e.stopPropagation();
          addSticker(url);
        });
        
        overlayContainer.appendChild(overlaySticker);
      });

      const rect = e.target.getBoundingClientRect();
const paletteRect = paletteContainer.getBoundingClientRect();

const { right, bottom } = rect;

if (right + 260 < window.innerWidth) {
  overlayContainer.style.left = `${rect.right - paletteRect.left + 10}px`;
} else {
  overlayContainer.style.left = `${rect.left - paletteRect.left - 260}px`;
}

// keep your vertical positioning check
if (bottom + overlayContainer.offsetHeight < window.innerHeight) {
  overlayContainer.style.top = `${rect.top - paletteRect.top}px`;
} else {
  overlayContainer.style.top = `${rect.top - paletteRect.top - overlayContainer.offsetHeight}px`;
}
      
      overlayContainer.style.display = 'grid';
    }
    
    document.addEventListener('click', (e) => {
      if (!paletteContainer.contains(e.target) && !overlayContainer.contains(e.target)) {
        hideOverlay();
      }
    });

    // --- Drag-and-Drop event listeners for the canvas ---
    canvas.addEventListener('dragover', (e) => {
      e.preventDefault();
    });

    canvas.addEventListener('drop', (e) => {
      e.preventDefault();
      const url = e.dataTransfer.getData('text/plain');
      if (url) {
        const rect = canvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        addSticker(url, x, y);
      }
    });

  function addResizeListener(stickerImg) {
  stickerImg.addEventListener('wheel', (e) => {
    e.preventDefault();
    const delta = Math.sign(e.deltaY);
    const parent = stickerImg.parentElement;
    const newSize = parent.offsetWidth + (delta * 10);
    const minSize = 30, maxSize = 400;
    if (newSize >= minSize && newSize <= maxSize) {
      parent.style.width = `${newSize}px`;
      parent.style.height = 'auto';
    }
  });
}

function hexToRgb(hex) {
  hex = hex.replace(/^#/, "");
  const bigint = parseInt(hex, 16);
  return [(bigint >> 16) & 255, (bigint >> 8) & 255, bigint & 255];
}

function recolorSticker(stickerImg, fillColor, clickX, clickY) {
  // Save current state before changing
  colorHistory.push({
    sticker: stickerImg,
    prevSrc: stickerImg.src
  });
  updateUndoButton();

  const canvasEl = document.createElement("canvas");
  const ctx = canvasEl.getContext("2d");
  canvasEl.width = stickerImg.naturalWidth;
  canvasEl.height = stickerImg.naturalHeight;
  ctx.drawImage(stickerImg, 0, 0);

  const imgData = ctx.getImageData(0, 0, canvasEl.width, canvasEl.height);
  const data = imgData.data;

  const [r, g, b] = hexToRgb(fillColor);

  const startIndex = ((clickY * canvasEl.width) + clickX) * 4;
  const startR = data[startIndex];
  const startG = data[startIndex + 1];
  const startB = data[startIndex + 2];
  const startA = data[startIndex + 3];

  // helper: is black outline pixel?
  const isBlack = (r, g, b, a) => (r === 0 && g === 0 && b === 0 && a > 0);

  // If clicked on black outline ‚Üí search for nearby transparent pixel
  if (isBlack(startR, startG, startB, startA)) {
    let found = false;
    const offsets = [[1,0],[-1,0],[0,1],[0,-1]];
    for (const [dx, dy] of offsets) {
      const nx = clickX + dx;
      const ny = clickY + dy;
      if (nx < 0 || ny < 0 || nx >= canvasEl.width || ny >= canvasEl.height) continue;
      const ni = ((ny * canvasEl.width) + nx) * 4;
      if (data[ni+3] === 0) {
        clickX = nx; clickY = ny;
        found = true;
        break;
      }
    }
    if (!found) return; // nothing to fill
  }

  // Flood fill to detect region
  const stack = [[clickX, clickY]];
  const visited = new Set();
  let touchesEdge = false;

  while (stack.length) {
    const [x, y] = stack.pop();
    if (x < 0 || y < 0 || x >= canvasEl.width || y >= canvasEl.height) {
      touchesEdge = true;
      continue;
    }
    const i = ((y * canvasEl.width) + x) * 4;
    const key = `${x},${y}`;
    if (visited.has(key)) continue;
    visited.add(key);

    if (isBlack(data[i], data[i+1], data[i+2], data[i+3])) continue;

    // Candidate region pixel (transparent or colored)
    stack.push([x+1, y]);
    stack.push([x-1, y]);
    stack.push([x, y+1]);
    stack.push([x, y-1]);
  }

  // If region touches border ‚Üí it's outside background ‚Üí skip
  if (touchesEdge) return;

  // Otherwise fill all visited pixels
  for (const key of visited) {
    const [x, y] = key.split(",").map(Number);
    const i = ((y * canvasEl.width) + x) * 4;
    data[i] = r;
    data[i+1] = g;
    data[i+2] = b;
    data[i+3] = 255;
  }

  ctx.putImageData(imgData, 0, 0);
  stickerImg.src = canvasEl.toDataURL();
}

    // --- Dragging functions for stickers on the canvas ---
    function startDrag(e) {
      
      e.preventDefault();
      activeSticker = e.target;
      initialX = e.clientX;
      initialY = e.clientY;
      offsetX = activeSticker.parentElement.offsetLeft;
      offsetY = activeSticker.parentElement.offsetTop;
      
      document.addEventListener('mousemove', dragSticker);
      document.addEventListener('mouseup', stopDrag);
    }

    function dragSticker(e) {
      if (!activeSticker) return;
      const newX = offsetX + (e.clientX - initialX);
      const newY = offsetY + (e.clientY - initialY);
      const maxX = canvas.offsetWidth - activeSticker.parentElement.offsetWidth;
      const maxY = canvas.offsetHeight - activeSticker.parentElement.offsetHeight;
      activeSticker.parentElement.style.left = `${Math.min(Math.max(0, newX), maxX)}px`;
      activeSticker.parentElement.style.top = `${Math.min(Math.max(0, newY), maxY)}px`;
    }

    function stopDrag() {
       if (bucketMode) {
     return;
   }
      document.removeEventListener('mousemove', dragSticker);
      document.removeEventListener('mouseup', stopDrag);
      activeSticker = null;
    }

    // --- New: Undo and New button event listeners ---
  function updateUndoButton() {
  undoBtn.disabled = colorHistory.length === 0;
}

    undoBtn.addEventListener('click', () => {
  if (colorHistory.length > 0) {
    const last = colorHistory.pop();
    last.sticker.src = last.prevSrc;  // restore old image
  }
  updateUndoButton();
});


    newBtn.addEventListener('click', () => {
      canvas.innerHTML = '';
      history.splice(1);
      updateUndoButton();
    });
    
    // --- Initial function calls ---
    addStickerBtn.addEventListener('click', () => {
      const allUrls = stickerGroups.flatMap(group => group.urls);
      const randomUrl = allUrls[Math.floor(Math.random() * allUrls.length)];
      addSticker(randomUrl);
    });
    
    populatePalette();
    saveState();
    
      // New: Manually create icons after the page has loaded
    window.addEventListener('load', () => {
      if (window.lucide) {
        lucide.createIcons();
      }
    });


  bucketBtn.addEventListener("click", () => {
      bucketMode = !bucketMode;
      bucketBtn.classList.toggle("active", bucketMode);
       if (bucketMode) {
    document.body.classList.add('bucket-active');
    canvas.style.cursor = 'crosshair';
  } else {
    document.body.classList.remove('bucket-active');
    canvas.style.cursor = 'default';
  }
    });

colorIcon.style.stroke = colorPicker.value;

    
  </script>
  
</body>
</html>
