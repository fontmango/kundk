<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sticker Canvas</title>
    <style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        body {
            margin: 0;
            padding: 0;
            font-family: 'Inter', sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            height: 100vh;
            box-sizing: border-box;
            overflow-x: hidden;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        #canvas-container {
            width: 90%;
            max-width: 600px;
            height: 80vh;
            background-color: #ffffff;
            border: 1px solid #e0e0e0;
            position: relative;
            margin-top: 10px;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            border-radius: 16px;
            touch-action: none;
        }

        .sticker {
            position: absolute;
            height: auto;
            cursor: grab;
            user-select: none;
            transition: transform 0.1s ease-in-out;
            box-sizing: border-box;
            touch-action: none;
        }

        .sticker img {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }

        .sticker:active {
            cursor: grabbing;
            z-index: 100;
        }

        .sticker.locked {
            cursor: grab;
        }

        .sticker.locked:active {
            cursor: grabbing;
        }

        .sticker:focus {
            outline: none;
        }

        .sticker:hover > .delete-btn,
        .sticker:hover > .copy-btn,
        .sticker:hover > .lock-btn {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .sticker.selected > .delete-btn,
        .sticker.selected > .copy-btn,
        .sticker.selected > .lock-btn {
            display: flex;
        }

        .controls {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .bucket-active .sticker {
            border: none !important;
            transition: none !important;
        }

        .bucket-active .sticker .delete-btn,
        .bucket-active .sticker .copy-btn,
        .bucket-active .sticker .lock-btn {
            display: none !important;
        }

        .bucket-active .sticker:active,
        .bucket-active .sticker:hover {
            cursor: crosshair;
        }

        .ghost-sticker {
            position: fixed;
            pointer-events: none;
            z-index: 1000;
            opacity: 0.7;
            width: 100px;
            height: auto;
            transform: translate(-50%, -50%);
        }

        button {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            border: none;
            background: none;
            cursor: pointer;
            color: #333;
            transition: transform 0.2s, color 0.2s;
            outline: none;
            -webkit-tap-highlight-color: transparent;
        }

        button:focus, button:active {
            outline: 0 !important;
            box-shadow: none !important;
        }

        button:hover {
            color: #000;
            transform: scale(1.1);
        }

        button.active {
            border-radius: 50%;
            background-color: #e0e0e0;
            transform: scale(1.05);
        }

        .icon {
            width: 1.4em;
            height: 1.4em;
            stroke: currentColor;
        }

        .color-palette-container {
            width: 90%;
            max-width: 600px;
            overflow-x: scroll;
            -webkit-overflow-scrolling: touch;
            scrollbar-width: none;
            -ms-overflow-style: none;
            touch-action: pan-y;
        }

        .color-palette-container::-webkit-scrollbar {
            display: none;
        }

        .color-palette {
            display: flex;
            flex-wrap: nowrap;
            gap: 8px;
            margin-top: 5px;
            margin-bottom: 5px;
            padding: 3px;
            width: max-content;
        }

 .color-swatch {
            width: 25px;
            height: 25px;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid transparent;
            transition: transform 0.2s, border-color 0.2s;
            flex-shrink: 0;
            outline: 0 !important;
            box-shadow: none !important;
            -webkit-tap-highlight-color: transparent;
            touch-action: none;
        }

        @keyframes circle-pulse {
            0% {
                transform: scale(1.2) rotate(0deg);
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
            }
            50% {
                transform: scale(1.3) rotate(180deg);
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.4);
            }
            100% {
                transform: scale(1.2) rotate(360deg);
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
            }
        }

        .color-swatch.active {
            animation: circle-pulse 1s ease-in-out infinite;
        }

        #sticker-palette-container {
            display: none;
        }

        /* Overlay box (popup wrapper) */
        .overlay {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(255, 255, 255, 0.95);
            border: 1px solid #ccc;
            border-radius: 8px;
            padding: 10px;
            display: none;
            /* <- start hidden */
            z-index: 200;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            width: 80%;
            height: 90%;
            overflow-y: auto;

            /* grid layout for children */
            display: none;
            /* important: no grid by default */
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
        }

        .close-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background: rgba(0, 0, 0, 0.6);
            color: white;
            border: none;
            border-radius: 50%;
            width: 32px;
            height: 32px;
            font-size: 18px;
            cursor: pointer;
            z-index: 300;
        }

        .close-btn:hover {
            transform: scale(1.1);
        }

        /* Show overlay */
        .overlay.active {
            display: block;
        }

        /* Content inside overlay (grid of groups or stickers) */
        .overlay-grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 10px;
            overflow-y: auto;
            height: calc(100% - 40px);
            /* leave space for close button */
        }

        /* Group icons */
        .overlay-icon {
            width: 100%;
            height: auto;
            aspect-ratio: 1/1;
            object-fit: contain;
            cursor: pointer;
            border-radius: 8px;
            transition: transform 0.2s;
        }

        .overlay-icon:hover {
            transform: scale(1.05);
        }

        /* Stickers */
        .overlay-sticker {
            width: 100%;
            height: auto;
            aspect-ratio: 1/1;
            object-fit: contain;
            cursor: pointer;
            border: 1px solid transparent;
            transition: transform 0.2s;
        }

        .overlay-sticker:hover {
            transform: scale(1.1);
        }

        .copy-btn-icon {
            width: 100%;
            height: 100%;
            fill: white;
            stroke: white;
        }

        .lock-btn-icon {
            width: 60%;
            height: 60%;
            fill: white;
            stroke: white;
        }

        .delete-btn:focus,
        .copy-btn:focus,
        .lock-btn:focus,
        .delete-btn:active,
        .copy-btn:active,
        .lock-btn:active {
            outline: none;
            box-shadow: none;
        }

        .delete-btn-icon {
            width: 100%;
            height: 100%;
            fill: white;
            stroke: white;
        }

        .delete-btn {
            position: absolute;
            top: 5%;
            right: 5%;
            width: 20%;
            height: 20%;
            border-radius: 50%;
            background-color: #c2bebeff;
            color: white;
            display: none;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 101;
            padding: 0;
            transition: transform 0.2s, background-color 0.2s;
            outline: none;
            -webkit-tap-highlight-color: transparent;
        }

        .copy-btn {
            position: absolute;
            top: 5%;
            left: 5%;
            width: 20%;
            height: 20%;
            border-radius: 50%;
            background-color: #c2bebeff;
            color: white;
            display: none;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 101;
            padding: 0;
            transition: transform 0.2s, background-color 0.2s;
            outline: none;
            -webkit-tap-highlight-color: transparent;
        }

        .lock-btn {
            position: absolute;
            bottom: 5%;
            left: 50%;
            transform: translateX(-50%);
            width: 20%;
            height: 20%;
            border-radius: 50%;
            background-color: #c2bebeff;
            color: white;
            display: none;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 101;
            padding: 0;
            transition: transform 0.2s, background-color 0.2s;
            outline: none;
            -webkit-tap-highlight-color: transparent;
        }

        .lock-btn:hover {
            transform: scale(1.1) translateX(-50%);
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }

        .sticker.locked .lock-btn {
            background-color: #ff9933; /* Orange when locked */
            transform: scale(1.1) translateX(-50%);
        }

        .copy-btn:hover {
            background-color: #6aa84fff;
            transform: scale(1.1);
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }

        .delete-btn:hover {
            background-color: #f26262ff;
            transform: scale(1.1);
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }
    </style>

    <script src="https://unpkg.com/lucide@latest"></script>
</head>
<body>
    <div class="controls">
        <button id="add-sticker-btn" title="Add Random">
            <i data-lucide="shuffle" class="icon"></i>
        </button>

        <button id="sticker-picker-btn" title="Choose Sticker">
            <i data-lucide="sticker" class="icon"></i>
        </button>

        <button id="undo-btn" title="Undo">
            <i data-lucide="undo-2" class="icon"></i>
        </button>

        <button id="redo-btn" title="Redo">
            <i data-lucide="redo-2" class="icon"></i>
        </button>

        <button id="eraser-btn" title="Erase">
            <i data-lucide="eraser" class="icon"></i>
        </button>

    </div>

    <div class="color-palette-container">
        <div class="color-palette" id="color-palette"></div>
    </div>

    <div id="canvas-container"></div>

    <div id="group-overlay-container" class="overlay"></div>
    <div id="sticker-overlay-container" class="overlay"></div>

    <script>
          const stickerGroups = [
            {
                
                name: "Vikings",
                urls: [
                    "https://static.wixstatic.com/media/990059_195242b424cb450ea78b93e9de392511~mv2.png",
                    "https://static.wixstatic.com/media/990059_e5529716f6f64f77a4d7c250ab6cfb5a~mv2.png",
                    "https://static.wixstatic.com/media/990059_4636b8e42e674dccbb6117391652f10b~mv2.png",
                    "https://static.wixstatic.com/media/990059_b4c7121418e14667bfdf79aecfea0524~mv2.png",
                    "https://static.wixstatic.com/media/990059_c5244cbdc1014a0292d36824ce277bba~mv2.png",
                    "https://static.wixstatic.com/media/990059_82d1bde23b3f45709690e3b032b39f7a~mv2.png",
                    "https://static.wixstatic.com/media/990059_63d7cd18bf4245d687839909ceb3671c~mv2.png",
                    "https://static.wixstatic.com/media/990059_04487087ffd9403184e0562a09da9952~mv2.png",
                    "https://static.wixstatic.com/media/990059_0abecd8111674041bda6a9bc58a0325d~mv2.png",
                    "https://static.wixstatic.com/media/990059_3d5f1cfd966b460a9fc708fbadc23342~mv2.png",
                    "https://static.wixstatic.com/media/990059_1e7bdf5f8a9c415d940ecabe8aa515f8~mv2.png",
                    "https://static.wixstatic.com/media/990059_f7bda5bccf6143b59cf118b96fe8d5c3~mv2.png",
                    "https://static.wixstatic.com/media/990059_17382f604e5240cd9b192d1c408d177c~mv2.png",
                    "https://static.wixstatic.com/media/990059_8050e711279440069ebb11be47552624~mv2.png",
                    "https://static.wixstatic.com/media/990059_9280b10abb8f4b439280d80e2d654a00~mv2.png",
                    "https://static.wixstatic.com/media/990059_e69156957edb46ceb444911d6268d580~mv2.png",
                    "https://static.wixstatic.com/media/990059_818add1171f44d7b8fb14cc7324bf1ba~mv2.png",
                    "https://static.wixstatic.com/media/990059_c0876d74524a4a3890c8acc306d6c5b9~mv2.png",
                    "https://static.wixstatic.com/media/990059_4c2a3c3d1f4d44c88bd245577c12d89e~mv2.png",
                    "https://static.wixstatic.com/media/990059_6a6b1c7017c242bcb387edf0250492f9~mv2.png",
                    "https://static.wixstatic.com/media/990059_87363ab578ea485fb48b3ba8865da3c5~mv2.png",
                    "https://static.wixstatic.com/media/990059_786e79df55c3459680a241c123d7edc8~mv2.png",
                    "https://static.wixstatic.com/media/990059_75f54e8faf5f49aa9a6f554647c0a942~mv2.png",
                    "https://static.wixstatic.com/media/990059_70b398a8aea848cf92a090ffae357819~mv2.png",
                    "https://static.wixstatic.com/media/990059_393bb80861a1442cad28cfc4fd11a3b9~mv2.png",
                    "https://static.wixstatic.com/media/990059_4c090a4740134396a9d2650a86431677~mv2.png",
                    "https://static.wixstatic.com/media/990059_1148bbb54d724dc2beb5cebc69c78d04~mv2.png",
                    "https://static.wixstatic.com/media/990059_74b3de5669834b7e9cd434ee592a38a1~mv2.png",
                    "https://static.wixstatic.com/media/990059_30092f18c74c4b1e9ebd8c362ab02b31~mv2.png",
                    "https://static.wixstatic.com/media/990059_033520b5d83f401bbfafd972bb74e29f~mv2.png",
                    "https://static.wixstatic.com/media/990059_95ffdb66d7d94ad99e0471a5103defec~mv2.png",
                    "https://static.wixstatic.com/media/990059_2a29f33d7ef34280b86e7786af3971d1~mv2.png",
                    "https://static.wixstatic.com/media/990059_2f5de7bfb37b4edf9375460f2befe73d~mv2.png",
                    "https://static.wixstatic.com/media/990059_91c06e8d3bd0444696cf64ff35870d79~mv2.png",
                    "https://static.wixstatic.com/media/990059_caaa5e6cda52435fbb7c5d44baf532b6~mv2.png"

                ]
            },

             {        
            name: "Axolotl",
                    urls: [
                    "https://static.wixstatic.com/media/990059_05060e38c4154aff9a528594d88be741~mv2.png",
                    "https://static.wixstatic.com/media/990059_0aad71dddd5d453c9968c93e6f389207~mv2.png",
                    "https://static.wixstatic.com/media/990059_2cdfa6cb22764564abfe44022de23042~mv2.png",
                    "https://static.wixstatic.com/media/990059_b24b42c1b1764b16921c3662e14bd27f~mv2.png",
                    "https://static.wixstatic.com/media/990059_c8014075dcbb499a8ce35539758e5ac4~mv2.png",
                    "https://static.wixstatic.com/media/990059_977fbe4daa794d42a19b3d745f360bc1~mv2.png",
                    "https://static.wixstatic.com/media/990059_dfe7434392994df1a2ae863cf886e93a~mv2.png",
                    "https://static.wixstatic.com/media/990059_098854f7f52840d9b8bc501e3be80bab~mv2.png",
                    "https://static.wixstatic.com/media/990059_148751e9242148cc8d04ec90c2e7087c~mv2.png",
                    "https://static.wixstatic.com/media/990059_dddff335b2c0453ca56720ab19a472d4~mv2.png",
                    "https://static.wixstatic.com/media/990059_6ae18c2eef3a4dc8a9920051da3284f8~mv2.png",
                    "https://static.wixstatic.com/media/990059_299d03ced8e34651a9fba332c275471d~mv2.png",
                    "https://static.wixstatic.com/media/990059_e8af05f7acaf4640ab2f2957cb6c085f~mv2.png",
                    "https://static.wixstatic.com/media/990059_1f8fc998e11940cdb6d0038dfc618cb5~mv2.png",
                    "https://static.wixstatic.com/media/990059_f06d1e4746044821873f542239e3945a~mv2.png",
                    "https://static.wixstatic.com/media/990059_0d54dcc3726542da808a39b6e82ad48f~mv2.png",
                    "https://static.wixstatic.com/media/990059_635b2665d9984185abcb2ec7f3ed078c~mv2.png",
                    "https://static.wixstatic.com/media/990059_13e89fc85ec744478ed3f4b7daf1b7e8~mv2.png",
                    "https://static.wixstatic.com/media/990059_7c0c995adc424cc2aae20e36cffc5e9c~mv2.png",
                    "https://static.wixstatic.com/media/990059_d7a65ff7535b4c6eab4fe38639517be1~mv2.png",
                    "https://static.wixstatic.com/media/990059_1b43610b447b4aef9a836451afed057e~mv2.png",
                    "https://static.wixstatic.com/media/990059_3f476689813740ca9fe930f6d4d78a69~mv2.png",
                    "https://static.wixstatic.com/media/990059_3d57b97f9a754cac9416e7ae18897c06~mv2.png",
                    "https://static.wixstatic.com/media/990059_490f38cae0a347c2940b410116ad7411~mv2.png",
                    "https://static.wixstatic.com/media/990059_34ec2c45f4454c1fb529335aa7e3a817~mv2.png",
                    "https://static.wixstatic.com/media/990059_bfc05b12bd5642458a82acc6fe592714~mv2.png",
                    "https://static.wixstatic.com/media/990059_6dc14ab81cad4c60ace34ecbd07aa59f~mv2.png",
                    "https://static.wixstatic.com/media/990059_373210328de242bc9a5253e6d34abbff~mv2.png",
                    "https://static.wixstatic.com/media/990059_46f8033a1d124986bc0cd336046fed65~mv2.png",
                    "https://static.wixstatic.com/media/990059_1b13499c1ca043b8b602bd3df6f8d158~mv2.png",
                    "https://static.wixstatic.com/media/990059_1a86097c50584da69ea9b478a6a32b13~mv2.png",
                    "https://static.wixstatic.com/media/990059_3241ca0106634225996b5c0720a5ebd8~mv2.png",
                    "https://static.wixstatic.com/media/990059_997f7df22aa34ceaa20158f04a5bb691~mv2.png",
                    "https://static.wixstatic.com/media/990059_cb2a614ad61f462fbb647f061638967d~mv2.png",
                    "https://static.wixstatic.com/media/990059_80f65b27d9124304bc617aaedf8f9b4a~mv2.png"

                    ]
            },
           {
                name: "Cactus",
                urls: [
                "https://static.wixstatic.com/media/990059_d76586ef59324d9a85ca9ab432a7d7eb~mv2.png",
                "https://static.wixstatic.com/media/990059_205c19c9983f476f9a0aaa1363d145e6~mv2.png",
                "https://static.wixstatic.com/media/990059_aa1517e851b74defbda2311301ca0cba~mv2.png",
                "https://static.wixstatic.com/media/990059_397c6a0dfa764e4a9a44baa4781a310e~mv2.png",
                "https://static.wixstatic.com/media/990059_9db161ae358d49648c258644fa93e9c3~mv2.png",
                "https://static.wixstatic.com/media/990059_d69d1f72dbfb43eb980afe2f29a2e8c9~mv2.png",
                "https://static.wixstatic.com/media/990059_50123e97a1c149d39c3efffb439c73e4~mv2.png",
                "https://static.wixstatic.com/media/990059_a641dd06f62548979628c54a6238f162~mv2.png",
                "https://static.wixstatic.com/media/990059_b5f3a66128e24918ab7bb62730495146~mv2.png",
                "https://static.wixstatic.com/media/990059_865b6380073c4b52a0d362bd218a1960~mv2.png",
                "https://static.wixstatic.com/media/990059_2c733e157a3942d88afc16de11b90528~mv2.png",
                "https://static.wixstatic.com/media/990059_3bcaf2587d7543a0b75a1148d6d340cb~mv2.png",
                "https://static.wixstatic.com/media/990059_d450b700fde74f99b9047d2d38d1a5b3~mv2.png",
                "https://static.wixstatic.com/media/990059_de4de20370d940b284270dc2867713b6~mv2.png",
                "https://static.wixstatic.com/media/990059_1f4121ece0f14173b8a66be5f54752d7~mv2.png",
                "https://static.wixstatic.com/media/990059_3016b56477b94524ab09c2e97ecfb8b9~mv2.png",
                "https://static.wixstatic.com/media/990059_97328a17c90243bea4f338b18884432b~mv2.png",
                "https://static.wixstatic.com/media/990059_d0e12209d3b8445588522ca241b75c1f~mv2.png",
                "https://static.wixstatic.com/media/990059_2382e8ce720d4220acbad29058827115~mv2.png",
                "https://static.wixstatic.com/media/990059_1b21edfbec4746a888a3d1978b0d0634~mv2.png",
                "https://static.wixstatic.com/media/990059_9cd1c38f8523484eb6de2f81d3c3a57d~mv2.png",
                "https://static.wixstatic.com/media/990059_25f2b1efc54f43d8a73dce25dbd85bd0~mv2.png",
                "https://static.wixstatic.com/media/990059_430a5cbe98f040f491ec40d43da3278c~mv2.png",
                "https://static.wixstatic.com/media/990059_1d7ae173047045608fe8b3c3be368046~mv2.png",
                "https://static.wixstatic.com/media/990059_e2099eefb2504d98af3785eca38e199e~mv2.png",
                "https://static.wixstatic.com/media/990059_909b9dde80a44408b40ce9b8398fcc41~mv2.png",
                "https://static.wixstatic.com/media/990059_74e1f1fb01ac4d1ead4106099f365fa8~mv2.png",
                "https://static.wixstatic.com/media/990059_196e79379a924ba9bd8349b3bf36cba5~mv2.png",
                "https://static.wixstatic.com/media/990059_c918d0dcd20f46db9c6809235be9eaff~mv2.png",
                "https://static.wixstatic.com/media/990059_fd1dbbe81fa64fac88b307533e2b6ad5~mv2.png",
                "https://static.wixstatic.com/media/990059_2db465c8541a4f909215b0c2b70bd5d3~mv2.png",
                "https://static.wixstatic.com/media/990059_67461d4f19ab471db24cd80fb72fe5cc~mv2.png",
                "https://static.wixstatic.com/media/990059_a7660e45eab6489c985077a255103b8e~mv2.png",
                "https://static.wixstatic.com/media/990059_d745900a1031472b8769e8cba06a7c3f~mv2.png",
                "https://static.wixstatic.com/media/990059_4e29f4fcf2644c4999613d6fa797b215~mv2.png",
                ]
                },
                {
                name: "Carrot",
                urls: [
                "https://static.wixstatic.com/media/990059_f4ab7a2a7f0d4f83b6380024bd207009~mv2.png",
                "https://static.wixstatic.com/media/990059_4e8bfdc0a4734e55b182ee556673f7e1~mv2.png",
                "https://static.wixstatic.com/media/990059_60afc6299c8d4a278ab7e1c56addc92f~mv2.png",
                "https://static.wixstatic.com/media/990059_dcc18cc05a6442f4b361ca98db336b15~mv2.png",
                "https://static.wixstatic.com/media/990059_24c533454a6246129978d4c1efda60bb~mv2.png",
                "https://static.wixstatic.com/media/990059_9cca88f4f766445faa9597c92f0be6b3~mv2.png",
                "https://static.wixstatic.com/media/990059_d75bf0b3adb541798323fdfc28c9ef00~mv2.png",
                "https://static.wixstatic.com/media/990059_586f92ccb1ec44dd93daeae5030eb812~mv2.png",
                "https://static.wixstatic.com/media/990059_53701ccd3ba647b48d245a6a6c429061~mv2.png",
                "https://static.wixstatic.com/media/990059_35ed0f1ba488459695b9b85b000d2370~mv2.png",
                "https://static.wixstatic.com/media/990059_090c1ece33204cb5968d4ba47284fe8d~mv2.png",
                "https://static.wixstatic.com/media/990059_328e05e032b2487a9bed73c3db51e85d~mv2.png",
                "https://static.wixstatic.com/media/990059_2ef347e78f684d56bf1d10690e2767d2~mv2.png",
                "https://static.wixstatic.com/media/990059_93d988413e734be3950f65445549ab0b~mv2.png",
                "https://static.wixstatic.com/media/990059_e657f4e0c4a84bdf889a4bb50d5e478a~mv2.png",
                "https://static.wixstatic.com/media/990059_0712986d016944a4b1fe4c908c9ee379~mv2.png",
                "https://static.wixstatic.com/media/990059_831be5e7663e459cb7a2f939a8398dc3~mv2.png",
                "https://static.wixstatic.com/media/990059_e71dbfc5b9be4ca987e5c22e24f880a0~mv2.png",
                "https://static.wixstatic.com/media/990059_0b5c1c7c068d44e79f0e50332fa451dd~mv2.png",
                "https://static.wixstatic.com/media/990059_3bc037e10af944dca121729c560f5ca3~mv2.png",
                "https://static.wixstatic.com/media/990059_7cfbfecb15a1491fb21ae16c50fdd4dd~mv2.png",
                "https://static.wixstatic.com/media/990059_e5dc9d251c294f9ead128a42bbcc5d3b~mv2.png",
                "https://static.wixstatic.com/media/990059_70c74bf614f140838c130d5764fa0257~mv2.png",
                "https://static.wixstatic.com/media/990059_341b0a1ac73c426fb7327ffbd9d8cd83~mv2.png",
                "https://static.wixstatic.com/media/990059_ec3eb99178d84137ad443e3a9eccfa7a~mv2.png",
                "https://static.wixstatic.com/media/990059_124a342715994546a2ae4e32d924eaad~mv2.png",
                "https://static.wixstatic.com/media/990059_16d83f65390444b085c9e13b9acecfb0~mv2.png",
                "https://static.wixstatic.com/media/990059_d07c72345f444193a975af63cbddbd21~mv2.png",
                "https://static.wixstatic.com/media/990059_3963217226664d5e8ebe0eb83c616d17~mv2.png",
                "https://static.wixstatic.com/media/990059_4653a8ccdca34e729b303a7b2da4e1c8~mv2.png",
                "https://static.wixstatic.com/media/990059_86ed905e22d64b86a5c5de02e040ffbe~mv2.png",
                "https://static.wixstatic.com/media/990059_7bc563645d6549e180514c24e9d3b581~mv2.png",
                "https://static.wixstatic.com/media/990059_ddd7e521489a447c8814b91949095e9e~mv2.png",
                "https://static.wixstatic.com/media/990059_39ad562bf47341dc9b30b0c3f2701b4f~mv2.png",
                "https://static.wixstatic.com/media/990059_d54fd310397b4712aedfd8c8197f6335~mv2.png"

                ]
                },

                {
                    name: "dumpling",
                    urls: [
                    "https://static.wixstatic.com/media/990059_f14c8ceb1a994ec98a3ae9083bf50e2a~mv2.png",
                    "https://static.wixstatic.com/media/990059_c6d1d446774746dca8f4ba7e815f5024~mv2.png",
                    "https://static.wixstatic.com/media/990059_fd71e8914ebb4a938638b1c178723393~mv2.png",
                    "https://static.wixstatic.com/media/990059_29e1612004684d74b8f51934d59548b4~mv2.png",
                    "https://static.wixstatic.com/media/990059_7749e102af384ac1bf175a91ad9753f0~mv2.png",
                    "https://static.wixstatic.com/media/990059_4db4b46f4c5e482da0847194bf92651e~mv2.png",
                    "https://static.wixstatic.com/media/990059_f353d9d6ed5041dea052476778cddbb2~mv2.png",
                    "https://static.wixstatic.com/media/990059_fc012dd57fa448428fae012749b74461~mv2.png",
                    "https://static.wixstatic.com/media/990059_e164e7f73d4a4dfe89df0d6ee2837fb4~mv2.png",
                    "https://static.wixstatic.com/media/990059_e35cd518b40640f895f7e86712f3e4ba~mv2.png",
                    "https://static.wixstatic.com/media/990059_579bc0a455f045deb92be7ea029fea9a~mv2.png",
                    "https://static.wixstatic.com/media/990059_c756896061fc47c09a2a53ee54593d40~mv2.png",
                    "https://static.wixstatic.com/media/990059_e4a09ff60f954c8181c49ca338f4df09~mv2.png",
                    "https://static.wixstatic.com/media/990059_a57efb259eea42cc8e3ab376a739c390~mv2.png",
                    "https://static.wixstatic.com/media/990059_a92889fc71434747916135382b1fdc07~mv2.png",
                    "https://static.wixstatic.com/media/990059_4d0035b0faa448b882274621175128a0~mv2.png",
                    "https://static.wixstatic.com/media/990059_bc89b210800148818a062b1cb94b3686~mv2.png",
                    "https://static.wixstatic.com/media/990059_66268224446d4fe38781df61b51b9fa8~mv2.png",
                    "https://static.wixstatic.com/media/990059_8fec9151a5164263a2927abbd8c6dc63~mv2.png",
                    "https://static.wixstatic.com/media/990059_5c12b0723d85461e8bc5cf1c0b7a8f47~mv2.png",
                    "https://static.wixstatic.com/media/990059_3cb10ae4c08949f981f0d506062e440d~mv2.png",
                    "https://static.wixstatic.com/media/990059_1fc4ae021cb0481d92ba6bd90385af75~mv2.png",
                    "https://static.wixstatic.com/media/990059_49d4ce1d24194e6bb7656418b883e8a7~mv2.png",
                    "https://static.wixstatic.com/media/990059_a4f72598dc654b3eb41fbec682c2f728~mv2.png",
                    "https://static.wixstatic.com/media/990059_3ab1f40e7c6a42c4b2b8c94bc962ece9~mv2.png",
                    "https://static.wixstatic.com/media/990059_ff41845dddfd4c8f98edce2e324fa9d5~mv2.png",
                    "https://static.wixstatic.com/media/990059_7675ab4b76bf4f4294ae784138412564~mv2.png",
                    "https://static.wixstatic.com/media/990059_70363d7f967e4ff1a2a305d0ccb30bfa~mv2.png",
                    "https://static.wixstatic.com/media/990059_4cd005763cbb4285ae23ee736381c735~mv2.png",
                    "https://static.wixstatic.com/media/990059_1a34d9180dfa4430807e2a71d0b35c32~mv2.png",
                    "https://static.wixstatic.com/media/990059_9a52c55c5dee4947ac04cc25bb00e232~mv2.png",
                    "https://static.wixstatic.com/media/990059_61aab69bfeb044fd943df8cfd856e543~mv2.png",
                    "https://static.wixstatic.com/media/990059_fe5dbd1cf4bb43349596aedcf17c3172~mv2.png",
                    "https://static.wixstatic.com/media/990059_8354b4448bea4871bde20f72994e71bc~mv2.png",
                    "https://static.wixstatic.com/media/990059_6cc416fa35ac4c7aacd1ebde07e3ca27~mv2.png"
                    ]
                    },

                    {
                    name: "fox",
                    urls: [

                    "https://static.wixstatic.com/media/990059_0cb3048c0b254c3090c8a079bc3eba81~mv2.png",
                    "https://static.wixstatic.com/media/990059_85b0ef79a34940f9952e9f830fd20951~mv2.png",
                    "https://static.wixstatic.com/media/990059_de25546fed7844bf995c8fda1d90d865~mv2.png",
                    "https://static.wixstatic.com/media/990059_67db3d9ea82f43098003f2e2f6ad67b1~mv2.png",
                    "https://static.wixstatic.com/media/990059_bb317504649f4601958591c8b9cf74a7~mv2.png",
                    "https://static.wixstatic.com/media/990059_7c07047b8e324c1f8d4d41b2374263e5~mv2.png",
                    "https://static.wixstatic.com/media/990059_b730db7787f24761899f6dfd9a10e061~mv2.png",
                    "https://static.wixstatic.com/media/990059_081dadb37bab4af9b4639f9bac7dc8a9~mv2.png",
                    "https://static.wixstatic.com/media/990059_28651f361fe64faaaf76f0080b9be6ed~mv2.png",
                    "https://static.wixstatic.com/media/990059_cbdfbb4ae3ce470985411fd65065a185~mv2.png",
                    "https://static.wixstatic.com/media/990059_a7cc60bf9ab548cb8340e00ad233acb7~mv2.png",
                    "https://static.wixstatic.com/media/990059_8e12be41db13422e9b7ff3433cd578c7~mv2.png",
                    "https://static.wixstatic.com/media/990059_0d672486e1264659883bfce7cffc42fb~mv2.png",
                    "https://static.wixstatic.com/media/990059_ff2c29f8e2434b5880ebf8b5ac039f77~mv2.png",
                    "https://static.wixstatic.com/media/990059_8fcf5f74980f4fdda76b130a036ebd00~mv2.png",
                    "https://static.wixstatic.com/media/990059_8f8b57917f824a94ac15111931fab861~mv2.png",
                    "https://static.wixstatic.com/media/990059_fc88df339d344e46ba42786051cb7830~mv2.png",
                    "https://static.wixstatic.com/media/990059_08d5eb5dfcb44cd2be8692bb02ff34ac~mv2.png",
                    "https://static.wixstatic.com/media/990059_29482e38b2dc4cde96191a05fd652d6b~mv2.png",
                    "https://static.wixstatic.com/media/990059_a25fb7c1413349358458a0fdb6ceae5a~mv2.png",
                    "https://static.wixstatic.com/media/990059_08d93695a2684616ad69037b44f8aaca~mv2.png",
                    "https://static.wixstatic.com/media/990059_bf92b153ce2b4188b25d712f8ccb08ad~mv2.png",
                    "https://static.wixstatic.com/media/990059_07e7ce3a74cd4834a0682458832d518e~mv2.png",
                    "https://static.wixstatic.com/media/990059_31f9053c43a6433081fe8ec8a5bdde70~mv2.png",
                    "https://static.wixstatic.com/media/990059_dc6c976192804347b668effb0430ae9e~mv2.png",
                    "https://static.wixstatic.com/media/990059_40891431fe2a4e94b2478d10e8b0502e~mv2.png",
                    "https://static.wixstatic.com/media/990059_799d33dad8924eefbf9260d43eaf13f6~mv2.png",
                    "https://static.wixstatic.com/media/990059_f3a14de50c4c41ad928d17c58a2c05cf~mv2.png",
                    "https://static.wixstatic.com/media/990059_75d6e87a2a5e47bfa0adda9d4f88ee65~mv2.png",
                    "https://static.wixstatic.com/media/990059_73ad025c3f88450d82f9115e14d63c32~mv2.png",
                    "https://static.wixstatic.com/media/990059_f321d4cbb4a04a12836af476eaf41664~mv2.png",
                    "https://static.wixstatic.com/media/990059_d9c34c65c92347378ff4b4da0e8fb474~mv2.png",
                    "https://static.wixstatic.com/media/990059_6933571bc8a74465a6fcf440518a2023~mv2.png",
                    "https://static.wixstatic.com/media/990059_456400428ce44bb9a478bcfb69938905~mv2.png",
                    "https://static.wixstatic.com/media/990059_2ca6750db86c46bc83f1ca81b966c80b~mv2.png"

                    ]
                    },
        ];


        const canvas = document.getElementById('canvas-container');
        const addStickerBtn = document.getElementById('add-sticker-btn');
        const undoBtn = document.getElementById('undo-btn');
        const redoBtn = document.getElementById('redo-btn');
        const swatch = document.querySelector('.color-swatch');
        const colorPicker = document.getElementById('color-picker');

        const colorPalette = document.getElementById('color-palette');
        const history = [];
        const eraserBtn = document.getElementById('eraser-btn');

        const stickerPickerBtn = document.getElementById('sticker-picker-btn');
        const groupOverlayContainer = document.getElementById('group-overlay-container');
        const stickerOverlayContainer = document.getElementById('sticker-overlay-container');

        let bucketMode = false;
        let activeSticker = null;
        let activePaletteSticker = null;
        let selectedColor = null;
        let isRestoring = false;
        let redoStack = [];

        let initialX, initialY, offsetX, offsetY;
        let initialTouchDistance = 0;
        let initialStickerWidth = 0;
        let initialStickerHeight = 0;

        let initialCenter = {
            x: 0,
            y: 0
        };
        let firstStickerAdded = false;

        const colors = [
            '#8d5524', '#c68642', '#e0ac69', '#f1c27d', '#ffdbac',
            // Reds
            '#FF0000', '#FF4500', '#FF6347', '#D2691E', '#CD5C5C',

            // Oranges & Yellows
            '#FFA500', '#FF8C00', '#FFD700', '#FFFF00', '#FFC04C',

            // Greens
            '#008000', '#228B22', '#3CB371', '#9ACD32', '#ADFF2F',

            // Blues
            '#0000FF', '#0000CD', '#4169E1', '#1E90FF', '#87CEFA',

            // Purples
            '#800080', '#4B0082', '#9932CC', '#BA55D3', '#DA70D6',

            // Pinks & Browns
            '#FFC0CB', '#FF69B4', '#FA8072', '#A52A2A', '#8B4513',

            '#C0C0C0', '#808080',
        ];

        // This is the special "erase" object that will be used by the eraser button.
        const transparentColor = {
            type: 'erase'
        };

        function setBucketMode(enabled) {
            bucketMode = enabled;
            if (bucketMode) {
                document.body.classList.add('bucket-active');
                canvas.style.cursor = 'crosshair';
                document.querySelectorAll('.color-swatch').forEach(swatch => {
                    swatch.draggable = false;
                });
            } else {
                document.body.classList.remove('bucket-active');
                canvas.style.cursor = 'default';
                document.querySelectorAll('.color-swatch').forEach(swatch => {
                    swatch.draggable = true;
                });
            }
        }

        function saveState() {
            if (isRestoring) return;
            const stickersOnCanvas = document.querySelectorAll('#canvas-container .sticker');
            const currentState = {
                stickers: []
            };

            stickersOnCanvas.forEach(sticker => {
                const stickerImg = sticker.querySelector('img');
                if (stickerImg) {
                    currentState.stickers.push({
                        url: stickerImg.src,
                        x: sticker.offsetLeft,
                        y: sticker.offsetTop,
                        width: sticker.offsetWidth,
                        height: sticker.offsetHeight,
                        locked: sticker.classList.contains('locked')
                    });
                }
            });

            const prevState = history[history.length - 1];
            if (JSON.stringify(prevState) !== JSON.stringify(currentState)) {
                history.push(currentState);
            }

            redoStack = [];
            updateUndoRedoButtons();

        }

        function loadState(state) {
            isRestoring = true;
            canvas.innerHTML = '';
            state.stickers.forEach(data => {
                const newSticker = addSticker(data.url, data.x, data.y, data.width, data.height, {
                    suppressSave: true
                });
                if (data.locked) {
                    newSticker.classList.add('locked');
                }
            });
            isRestoring = false;
            updateUndoRedoButtons();
        }

        function deselectAllStickers() {
            document.querySelectorAll('.sticker').forEach(s => {
                s.classList.remove('selected');
            });
        }

        function getTouchDistance(touches) {
            const dx = touches[0].clientX - touches[1].clientX;
            const dy = touches[0].clientY - touches[1].clientY;
            return Math.sqrt(dx * dx + dy * dy);
        }

        function addSticker(url, x, y, width = 200, height = 200, opts = {}) {
            const {
                suppressSave = false
            } = opts;
            const sticker = document.createElement('div');
            sticker.classList.add('sticker');
            sticker.style.width = width + 'px';
            sticker.style.height = 'auto';

            const stickerImg = document.createElement('img');
            stickerImg.crossOrigin = "Anonymous";
            stickerImg.src = url;
            stickerImg.draggable = false;
            sticker.appendChild(stickerImg);

            sticker.addEventListener('click', (e) => {
                if (bucketMode && selectedColor) {
                    e.stopPropagation();
                    const rect = sticker.getBoundingClientRect();
                    const clickX = Math.floor((e.clientX - rect.left) * (stickerImg.naturalWidth / rect.width));
                    const clickY = Math.floor((e.clientY - rect.top) * (stickerImg.naturalHeight / rect.height));
                    recolorSticker(stickerImg, selectedColor, clickX, clickY);
                }
            });

            const copyBtn = document.createElement('div');
            copyBtn.classList.add('copy-btn');
            copyBtn.innerHTML = `
                <svg class="copy-btn-icon" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="12" y1="8" x2="12" y2="16" />
                <line x1="8" y1="12" x2="16" y2="12" />
                </svg>
            `;

            copyBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                const stickerWidth = sticker.offsetWidth;
                const stickerHeight = sticker.offsetHeight;
                let newX = parseInt(sticker.style.left) + 10;
                let newY = parseInt(sticker.style.top) + 10;

                function isOverlapping(x, y) {
                    const stickers = document.querySelectorAll('.sticker');
                    return Array.from(stickers).some(s => {
                        const sx = parseInt(s.style.left);
                        const sy = parseInt(s.style.top);
                        const sw = s.offsetWidth;
                        const sh = s.offsetHeight;
                        return !(x + stickerWidth < sx || x > sx + sw || y + stickerHeight < sy || y > sy + sh);
                    });
                }
                const step = 10;
                let attempts = 0;
                while (isOverlapping(newX, newY) && attempts < 100) {
                    newX += step;
                    newY += step;
                    if (newX + stickerWidth > canvas.offsetWidth) newX = step;
                    if (newY + stickerHeight > canvas.offsetHeight) newY = step;
                    attempts++;
                }
                saveState();
                addSticker(stickerImg.src, newX, newY, sticker.offsetWidth);
            });

            const deleteBtn = document.createElement('div');
            deleteBtn.classList.add('delete-btn');
            deleteBtn.innerHTML = `
                <svg class="delete-btn-icon" viewBox="0 0 24 24">
                    <line x1="5" y1="12" x2="19" y2="12" stroke="white" stroke-width="1" />
                </svg>
            `;
            deleteBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                saveState();
                sticker.remove();
            });

            const lockBtn = document.createElement('div');
            lockBtn.classList.add('lock-btn');
            lockBtn.innerHTML = `
                <svg class="lock-btn-icon" data-lucide="lock" viewBox="0 0 24 24">
                    <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                    <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
                </svg>
            `;

            lockBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                sticker.classList.toggle('locked');
                saveState();
            });


            sticker.appendChild(deleteBtn);
            sticker.appendChild(copyBtn);
            sticker.appendChild(lockBtn);

            function startInteraction(e) {
                if (e.target.closest('.delete-btn') || e.target.closest('.copy-btn') || e.target.closest('.lock-btn')) {
                    return;
                }

                if (bucketMode && (!e.touches || e.touches.length < 2)) {
                    return;
                }

                saveState();

                document.querySelectorAll('.sticker').forEach(s => {
                    if (s !== sticker) {
                        s.classList.remove('selected');
                    }
                });

                sticker.classList.add('selected');

                e.preventDefault();
                activeSticker = sticker;

                initialCenter.x = sticker.offsetLeft + sticker.offsetWidth / 2;
                initialCenter.y = sticker.offsetTop + sticker.offsetHeight / 2;

                if (e.touches && e.touches.length === 2) {
                    initialTouchDistance = getTouchDistance(e.touches);
                    initialStickerWidth = sticker.offsetWidth;
                    initialStickerHeight = sticker.offsetHeight;
                } else if (e.touches && e.touches.length === 1) {
                    const touch = e.touches[0];
                    initialX = touch.clientX;
                    initialY = touch.clientY;
                    offsetX = sticker.offsetLeft;
                    offsetY = sticker.offsetTop;
                } else {
                    initialX = e.clientX;
                    initialY = e.clientY;
                    offsetX = sticker.offsetLeft;
                    offsetY = sticker.offsetTop;
                }

                document.addEventListener('mousemove', handleMove);
                document.addEventListener('mouseup', handleEnd);
                document.addEventListener('touchmove', handleMove, {
                    passive: false
                });
                document.addEventListener('touchend', handleEnd);
            }

            function handleMove(e) {
                if (!activeSticker) return;
                e.preventDefault();

                if (e.touches && e.touches.length === 2) {
                    const newTouchDistance = getTouchDistance(e.touches);
                    const scaleChange = newTouchDistance / initialTouchDistance;
                    const newWidth = Math.max(initialStickerWidth * scaleChange, 30);
                    const aspectRatio = initialStickerWidth / initialStickerHeight;
                    const newHeight = newWidth / aspectRatio;

                    activeSticker.style.width = `${newWidth}px`;
                    activeSticker.style.height = `${newHeight}px`;

                    activeSticker.style.left = `${initialCenter.x - newWidth / 2}px`;
                    activeSticker.style.top = `${initialCenter.y - newHeight / 2}px`;

                } else if (!bucketMode) { // Only allow dragging if bucketMode is not active
                    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
                    const clientY = e.touches ? e.touches[0].clientY : e.clientY;
                    const newX = offsetX + (clientX - initialX);
                    const newY = offsetY + (clientY - initialY);
                    activeSticker.style.left = `${newX}px`;
                    activeSticker.style.top = `${newY}px`;
                }
            }

            function handleEnd() {
                document.removeEventListener('mousemove', handleMove);
                document.removeEventListener('mouseup', handleEnd);
                document.removeEventListener('touchmove', handleMove);
                document.removeEventListener('touchend', handleEnd);
                activeSticker = null;
                saveState();
            }

            sticker.addEventListener('mousedown', startInteraction);
            sticker.addEventListener('touchstart', startInteraction);

            canvas.addEventListener('mousedown', (e) => {
                if (!e.target.closest('.sticker')) {
                    deselectAllStickers();
                }
            });
            canvas.addEventListener('touchstart', (e) => {
                if (!e.target.closest('.sticker')) {
                    deselectAllStickers();
                }
            });

            function addResizeListener(stickerImg) {
                stickerImg.addEventListener('wheel', (e) => {
                    e.preventDefault();
                    saveState();
                    const parent = stickerImg.parentElement;
                    const delta = Math.sign(e.deltaY);

                    const initialWidth = parent.offsetWidth;
                    const initialHeight = parent.offsetHeight;

                    const initialLeft = parent.offsetLeft;
                    const initialTop = parent.offsetTop;

                    const newSize = initialWidth + (delta * 10);
                    const minSize = 30;

                    if (newSize >= minSize) {
                        const newHeight = newSize / (initialWidth / initialHeight);

                        parent.style.width = `${newSize}px`;
                        parent.style.height = `${newHeight}px`;

                        parent.style.left = `${initialLeft + (initialWidth - newSize) / 2}px`;
                        parent.style.top = `${initialTop + (initialHeight - newHeight) / 2}px`;

                        saveState();
                    }
                });
            }

            addResizeListener(stickerImg);

            let finalX = x;
            let finalY = y;
            const canvasRect = canvas.getBoundingClientRect();

            if (finalX === undefined || finalY === undefined) {
                let tries = 0;
                let overlap;
                do {
                    overlap = false;
                    finalX = Math.floor(Math.random() * (canvas.offsetWidth - width));
                    finalY = Math.floor(Math.random() * (canvas.offsetHeight - width));
                    document.querySelectorAll('.sticker').forEach(existing => {
                        const rect = existing.getBoundingClientRect();
                        const ex = rect.left - canvasRect.left;
                        const ey = rect.top - canvasRect.top;
                        const ew = rect.width;
                        const eh = rect.height;
                        if (
                            finalX < ex + ew &&
                            finalX + width > ex &&
                            finalY < ey + eh &&
                            finalY + width > ey
                        ) {
                            overlap = true;
                        }
                    });
                    tries++;
                    if (tries > 200) break;
                } while (overlap);
            }

            sticker.style.left = `${finalX}px`;
            sticker.style.top = `${finalY}px`;

            function updateButtonSizes() {
                const btnSize = sticker.offsetWidth * 0.2;
                [deleteBtn, copyBtn, lockBtn].forEach(btn => {
                    btn.style.width = btnSize + 'px';
                    btn.style.height = btnSize + 'px';
                });
                deleteBtn.style.top = deleteBtn.style.right = `${btnSize * 0.25}px`;
                copyBtn.style.top = copyBtn.style.left = `${btnSize * 0.25}px`;
            }

            updateButtonSizes();
            const observer = new ResizeObserver(updateButtonSizes);
            observer.observe(sticker);
            canvas.appendChild(sticker);

            // Re-render Lucide icons after adding new elements
            if (window.lucide) {
                lucide.createIcons();
            }


            if (!suppressSave && !isRestoring) {
                saveState();
            }

            return sticker;
        }

     
    
        function hexToRgb(hex) {
            hex = hex.replace(/^#/, "");
            const bigint = parseInt(hex, 16);
            return [(bigint >> 16) & 255, (bigint >> 8) & 255, bigint & 255];
        }

        function recolorSticker(stickerImg, fillColor, clickX, clickY) {
            const canvasEl = document.createElement("canvas");
            const ctx = canvasEl.getContext("2d", {
                willReadFrequently: true
            });
            canvasEl.width = stickerImg.naturalWidth;
            canvasEl.height = stickerImg.naturalHeight;
            ctx.drawImage(stickerImg, 0, 0);

            const imgData = ctx.getImageData(0, 0, canvasEl.width, canvasEl.height);
            const data = imgData.data;

            const isEraser = fillColor && fillColor.type === 'erase';
            const [r, g, b] = isEraser ? [0, 0, 0] : hexToRgb(fillColor);

            // border detection: treat dark pixels as "walls"
            const blackThreshold = 30;

            function isBorderPixel(pxR, pxG, pxB, pxA) {
                return (pxA > 0 && pxR < blackThreshold && pxG < blackThreshold && pxB < blackThreshold);
            }

            function colorsMatch(data, i, target, tolerance = 30) {
                return (
                    Math.abs(data[i] - target[0]) <= tolerance &&
                    Math.abs(data[i + 1] - target[1]) <= tolerance &&
                    Math.abs(data[i + 2] - target[2]) <= tolerance &&
                    Math.abs(data[i + 3] - target[3]) <= tolerance
                );
            }

            const startIndex = ((clickY * canvasEl.width) + clickX) * 4;
            const targetColor = [
                data[startIndex],
                data[startIndex + 1],
                data[startIndex + 2],
                data[startIndex + 3]
            ];

            const stack = [
                [clickX, clickY]
            ];
            const visited = new Set();
            const fillPixels = []; // collect pixels first
            let touchesEdge = false;

            while (stack.length) {
                const [x, y] = stack.pop();
                if (x < 0 || y < 0 || x >= canvasEl.width || y >= canvasEl.height) continue;
                const i = ((y * canvasEl.width) + x) * 4;
                const key = `${x},${y}`;
                if (visited.has(key)) continue;

                if (!isBorderPixel(data[i], data[i + 1], data[i + 2], data[i + 3]) && colorsMatch(data, i, targetColor, 30)) {
                    visited.add(key);
                    fillPixels.push(i);

                    // if this region touches canvas edge → not enclosed
                    if (x === 0 || y === 0 || x === canvasEl.width - 1 || y === canvasEl.height - 1) {
                        touchesEdge = true;
                    }

                    stack.push([x + 1, y]);
                    stack.push([x - 1, y]);
                    stack.push([x, y + 1]);
                    stack.push([x, y - 1]);
                }
            }

            // Only apply fill if region is enclosed
            if (!touchesEdge) {
                for (const i of fillPixels) {
                    if (isEraser) {
                        data[i + 3] = 0;
                    } else {
                        data[i] = r;
                        data[i + 1] = g;
                        data[i + 2] = b;
                        data[i + 3] = 255;
                    }
                }
            }

            ctx.putImageData(imgData, 0, 0);
            stickerImg.src = canvasEl.toDataURL();
            saveState();
        }

        function updateUndoRedoButtons() {
            undoBtn.disabled = history.length <= 1;
            redoBtn.disabled = redoStack.length === 0;
        }

        eraserBtn.addEventListener('click', () => {
            setBucketMode(true);
            document.querySelectorAll('.color-swatch').forEach(s => s.classList.remove('active'));
            selectedColor = transparentColor;

            const wasActive = eraserBtn.classList.contains('active');
            document.querySelectorAll('.controls button').forEach(b => b.classList.remove('active'));

            if (!wasActive) {
                eraserBtn.classList.add('active');
            } else {
                selectedColor = null;
                setBucketMode(false);
            }
        });

        undoBtn.addEventListener('click', () => {
            if (history.length > 1) {
                const lastState = history.pop();
                redoStack.push(lastState); // 👈 save for redo
                loadState(history[history.length - 1]);
                updateUndoRedoButtons();
            }
        });

        redoBtn.addEventListener('click', () => {
            if (redoStack.length > 0) {
                const nextState = redoStack.pop();
                history.push(nextState);
                loadState(nextState);
                updateUndoRedoButtons();
            }
        });

        function addOrReplaceSticker(newUrl) {
            const unlockedSticker = document.querySelector('.sticker:not(.locked)');
            const stickerSize = 120;
            const canvasWidth = canvas.offsetWidth;
            const canvasHeight = canvas.offsetHeight;
            const centerX = (canvasWidth / 2) - (stickerSize / 2);
            const centerY = (canvasHeight / 2) - (stickerSize / 2);

            if (unlockedSticker) {
                unlockedSticker.querySelector('img').src = newUrl;
            } else {
                addSticker(newUrl, centerX, centerY, stickerSize);
            }
            saveState();
        }


        addStickerBtn.addEventListener('click', () => {
            const allUrls = stickerGroups.flatMap(group => group.urls);
            const randomUrl = allUrls[Math.floor(Math.random() * allUrls.length)];
            const unlockedSticker = document.querySelector('.sticker:not(.locked)');

            if (unlockedSticker) {
                unlockedSticker.querySelector('img').src = randomUrl;
            } else {
                const stickerSize = 120;
                const canvasWidth = canvas.offsetWidth;
                const canvasHeight = canvas.offsetHeight;
                const centerX = (canvasWidth / 2) - (stickerSize / 2);
                const centerY = (canvasHeight / 2) - (stickerSize / 2);
                addSticker(randomUrl, centerX, centerY, stickerSize);
            }
            saveState();
        });

        window.addEventListener('load', () => {
            if (window.lucide) {
                lucide.createIcons();
            }
            updateCanvasDrop();
            const allStickers = document.querySelectorAll('.sticker');
            if (allStickers.length === 0) {
                addOrReplaceSticker(stickerGroups.flatMap(g => g.urls)[0]);
            }
        });

        let isDragging = false;
        let startX;
        let scrollLeft;
        let isSwiping = false;
        let initialTap = {
            clientX: 0
        };

        function addSwipeFunctionality() {
            const paletteContainer = document.querySelector('.color-palette-container');
            const palette = document.querySelector('.color-palette');

            const handleStart = (e) => {
                isDragging = true;
                startX = e.type.includes('mouse') ? e.pageX - paletteContainer.offsetLeft : e.touches[0].clientX;
                scrollLeft = paletteContainer.scrollLeft;
                initialTap.clientX = e.type.includes('mouse') ? e.clientX : e.touches[0].clientX;
            };

            const handleMove = (e) => {
                if (!isDragging) return;
                e.preventDefault();
                const x = e.type.includes('mouse') ? e.pageX - paletteContainer.offsetLeft : e.touches[0].clientX;
                const walk = (x - startX) * 1.5;
                paletteContainer.scrollLeft = scrollLeft - walk;
                if (Math.abs(e.clientX - initialTap.clientX) > 10) {
                    isSwiping = true;
                }
            };

            const handleEnd = () => {
                isDragging = false;
                setTimeout(() => {
                    isSwiping = false;
                }, 100);
            };

            [paletteContainer, palette].forEach(element => {
                element.addEventListener('mousedown', handleStart);
                element.addEventListener('mousemove', handleMove);
                element.addEventListener('mouseup', handleEnd);
                element.addEventListener('mouseleave', handleEnd);

                element.addEventListener('touchstart', handleStart);
                element.addEventListener('touchmove', handleMove, {
                    passive: false
                });
                element.addEventListener('touchend', handleEnd);
            });
        }

        function populateColorPalette() {
            colorPalette.innerHTML = '';
            colors.forEach(color => {
                const swatch = document.createElement('div');
                swatch.classList.add('color-swatch');
                swatch.style.backgroundColor = color;
                if (color === selectedColor) {
                    swatch.classList.add('active');
                }
                swatch.addEventListener('click', (e) => {
                    if (isSwiping) {
                        return;
                    }
                    const wasActive = swatch.classList.contains('active');

                    // Deactivate all color swatches and the eraser button
                    document.querySelectorAll('.color-swatch').forEach(s => s.classList.remove('active'));
                    eraserBtn.classList.remove('active'); // NEW: Deactivate the eraser button

                    if (!wasActive) {
                        swatch.classList.add('active');
                        selectedColor = color;
                        setBucketMode(true);
                    } else {
                        selectedColor = null;
                        setBucketMode(false);
                    }
                });
                colorPalette.appendChild(swatch);
            });
        }

        function hideOverlays() {
            groupOverlayContainer.style.display = 'none';
            stickerOverlayContainer.style.display = 'none';
        }

        function showGroupOverlay() {
            hideOverlays();
            groupOverlayContainer.innerHTML = '';

            // add close button
            const closeBtn = document.createElement('button');
            closeBtn.textContent = '✕';
            closeBtn.classList.add('close-btn');
            closeBtn.addEventListener('click', hideOverlays);
            groupOverlayContainer.appendChild(closeBtn);

            // add group icons
            stickerGroups.forEach(group => {
                const groupIcon = document.createElement('img');
                groupIcon.src = group.urls[0];
                groupIcon.classList.add('overlay-icon');
                groupIcon.title = group.name;

                groupIcon.addEventListener('click', () => {
                    showStickerOverlay(group.urls);
                });

                groupOverlayContainer.appendChild(groupIcon);
            });

            // finally: show overlay
            groupOverlayContainer.style.display = 'grid';
        }

        function updateCanvasDrop() {
            const canvas = document.getElementById('canvas-container');
            canvas.removeEventListener('dragover', (e) => {
                e.preventDefault();
            });
            canvas.removeEventListener('drop', handleCanvasDrop);
            canvas.addEventListener('drop', handleCanvasDrop);
        }

        function handleCanvasDrop(e) {
            e.preventDefault();
            const data = e.dataTransfer.getData('application/json');
            if (data) {
                const {
                    url,
                    width
                } = JSON.parse(data);
                const rect = canvas.getBoundingClientRect();
                const x = e.clientX - rect.left - (width / 2);
                const y = e.clientY - rect.top - (width / 2);
                saveState();
                addSticker(url, x, y, width);
            }
        }

        let activeTouchSticker = null;
        let touchOffsetX = 0;
        let touchOffsetY = 0;

        function showStickerOverlay(urls) {
            hideOverlays();
            stickerOverlayContainer.innerHTML = '';

            // add close button
            const closeBtn = document.createElement('button');
            closeBtn.textContent = '✕';
            closeBtn.classList.add('close-btn');
            closeBtn.addEventListener('click', hideOverlays);
            stickerOverlayContainer.appendChild(closeBtn);

            // add stickers
            urls.forEach(url => {
                const sticker = document.createElement('img');
                sticker.src = url;
                sticker.classList.add('overlay-sticker');
                sticker.addEventListener('click', () => {
                    addOrReplaceSticker(url);
                    hideOverlays();
                });
                stickerOverlayContainer.appendChild(sticker);
            });

            // finally: show the overlay
            stickerOverlayContainer.style.display = 'grid';
        }

        stickerPickerBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            if (groupOverlayContainer.style.display === 'grid') {
                hideOverlays();
            } else {
                showGroupOverlay();
            }
        });

        document.addEventListener('click', (e) => {
            if (!groupOverlayContainer.contains(e.target) && !stickerOverlayContainer.contains(e.target) && !stickerPickerBtn.contains(e.target)) {
                hideOverlays();
            }
        });

        canvas.addEventListener('dragover', (e) => {
            e.preventDefault();
        });

        canvas.addEventListener('drop', (e) => {
            e.preventDefault();
            const data = e.dataTransfer.getData('application/json');
            if (data) {
                const {
                    url,
                    width
                } = JSON.parse(data);
                const rect = canvas.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                saveState();
                addSticker(url, x, y, width);
            }
        });

        addSwipeFunctionality();
        populateColorPalette();
        saveState();


        
    </script>
</body>
</html>
